/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from "./base";

/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export const AnalysisDomain = {
  Data: "data",
  Annotation: "annotation",
} as const;

export type AnalysisDomain =
  (typeof AnalysisDomain)[keyof typeof AnalysisDomain];

/**
 *
 * @export
 * @interface AnalysisSearch
 */
export interface AnalysisSearch {
  /**
   *
   * @type {boolean}
   * @memberof AnalysisSearch
   */
  truncated: boolean;
  /**
   *
   * @type {Array<string>}
   * @memberof AnalysisSearch
   */
  results: Array<string>;
}
/**
 *
 * @export
 * @interface CreateProjectSubsetPostAction
 */
export interface CreateProjectSubsetPostAction {
  /**
   *
   * @type {string}
   * @memberof CreateProjectSubsetPostAction
   */
  project_title: string;
  /**
   *
   * @type {string}
   * @memberof CreateProjectSubsetPostAction
   */
  project_description?: string;
  /**
   *
   * @type {string}
   * @memberof CreateProjectSubsetPostAction
   */
  dataset_title: string;
  /**
   *
   * @type {string}
   * @memberof CreateProjectSubsetPostAction
   */
  dataset_description?: string;
  /**
   *
   * @type {SearchFilters}
   * @memberof CreateProjectSubsetPostAction
   */
  filters: SearchFilters;
}
/**
 *
 * @export
 * @interface DomainSearchFilters
 */
export interface DomainSearchFilters {
  /**
   *
   * @type {{ [key: string]: Range | undefined; }}
   * @memberof DomainSearchFilters
   */
  metrics: { [key: string]: Range | undefined };
  /**
   *
   * @type {{ [key: string]: Array<string> | undefined; }}
   * @memberof DomainSearchFilters
   */
  enums: { [key: string]: Array<string> | undefined };
  /**
   *
   * @type {Embedding2DFilter}
   * @memberof DomainSearchFilters
   */
  reduction?: Embedding2DFilter;
  /**
   *
   * @type {Array<string>}
   * @memberof DomainSearchFilters
   */
  tags?: Array<string>;
}
/**
 *
 * @export
 * @interface Embedding2DFilter
 */
export interface Embedding2DFilter {
  /**
   *
   * @type {string}
   * @memberof Embedding2DFilter
   */
  reduction_hash: string;
  /**
   *
   * @type {number}
   * @memberof Embedding2DFilter
   */
  minX: number;
  /**
   *
   * @type {number}
   * @memberof Embedding2DFilter
   */
  maxX: number;
  /**
   *
   * @type {number}
   * @memberof Embedding2DFilter
   */
  minY: number;
  /**
   *
   * @type {number}
   * @memberof Embedding2DFilter
   */
  maxY: number;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export const EmbeddingReductionType = {
  Umap: "umap",
} as const;

export type EmbeddingReductionType =
  (typeof EmbeddingReductionType)[keyof typeof EmbeddingReductionType];

/**
 *
 * @export
 * @interface EnumSummary
 */
export interface EnumSummary {
  /**
   *
   * @type {string}
   * @memberof EnumSummary
   */
  title: string;
  /**
   *
   * @type {{ [key: string]: string | undefined; }}
   * @memberof EnumSummary
   */
  values?: { [key: string]: string | undefined };
  /**
   *
   * @type {EnumType}
   * @memberof EnumSummary
   */
  type: EnumType;
}

/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export const EnumType = {
  Ontology: "ontology",
  Enum: "enum",
} as const;

export type EnumType = (typeof EnumType)[keyof typeof EnumType];

/**
 *
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
  /**
   *
   * @type {Array<ValidationError>}
   * @memberof HTTPValidationError
   */
  detail?: Array<ValidationError>;
}
/**
 *
 * @export
 * @interface ListProjectPredictionResult
 */
export interface ListProjectPredictionResult {
  /**
   *
   * @type {number}
   * @memberof ListProjectPredictionResult
   */
  total: number;
  /**
   *
   * @type {Array<ListProjectPredictionResultEntry>}
   * @memberof ListProjectPredictionResult
   */
  results: Array<ListProjectPredictionResultEntry>;
}
/**
 *
 * @export
 * @interface ListProjectPredictionResultEntry
 */
export interface ListProjectPredictionResultEntry {
  /**
   *
   * @type {string}
   * @memberof ListProjectPredictionResultEntry
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof ListProjectPredictionResultEntry
   */
  prediction_hash: string;
}
/**
 *
 * @export
 * @interface LocationInner
 */
export interface LocationInner {}
/**
 *
 * @export
 * @interface MetricDissimilarityResult
 */
export interface MetricDissimilarityResult {
  /**
   *
   * @type {{ [key: string]: number | undefined; }}
   * @memberof MetricDissimilarityResult
   */
  results: { [key: string]: number | undefined };
}
/**
 *
 * @export
 * @interface MetricSummary
 */
export interface MetricSummary {
  /**
   *
   * @type {string}
   * @memberof MetricSummary
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof MetricSummary
   */
  short_desc: string;
  /**
   *
   * @type {string}
   * @memberof MetricSummary
   */
  long_desc: string;
  /**
   *
   * @type {MetricType}
   * @memberof MetricSummary
   */
  type: MetricType;
}

/**
 * Type of the metric
 * @export
 * @enum {string}
 */

export const MetricType = {
  Normal: "normal",
  Uint: "uint",
  Ufloat: "ufloat",
  Rank: "rank",
} as const;

export type MetricType = (typeof MetricType)[keyof typeof MetricType];

/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export const PredictionDomain = {
  Tp: "tp",
  Fp: "fp",
  Fn: "fn",
} as const;

export type PredictionDomain =
  (typeof PredictionDomain)[keyof typeof PredictionDomain];

/**
 *
 * @export
 * @interface PredictionPRPoint
 */
export interface PredictionPRPoint {
  /**
   *
   * @type {number}
   * @memberof PredictionPRPoint
   */
  p: number;
  /**
   *
   * @type {number}
   * @memberof PredictionPRPoint
   */
  r: number;
}
/**
 *
 * @export
 * @interface PredictionSummaryFeatureResult
 */
export interface PredictionSummaryFeatureResult {
  /**
   *
   * @type {number}
   * @memberof PredictionSummaryFeatureResult
   */
  ap: number;
  /**
   *
   * @type {number}
   * @memberof PredictionSummaryFeatureResult
   */
  ar: number;
  /**
   *
   * @type {number}
   * @memberof PredictionSummaryFeatureResult
   */
  p: number;
  /**
   *
   * @type {number}
   * @memberof PredictionSummaryFeatureResult
   */
  r: number;
  /**
   *
   * @type {number}
   * @memberof PredictionSummaryFeatureResult
   */
  f1: number;
  /**
   *
   * @type {number}
   * @memberof PredictionSummaryFeatureResult
   */
  tp: number;
  /**
   *
   * @type {number}
   * @memberof PredictionSummaryFeatureResult
   */
  fp: number;
  /**
   *
   * @type {number}
   * @memberof PredictionSummaryFeatureResult
   */
  fn: number;
}
/**
 *
 * @export
 * @interface PredictionSummaryResult
 */
export interface PredictionSummaryResult {
  /**
   *
   * @type {boolean}
   * @memberof PredictionSummaryResult
   */
  classification_only: boolean;
  /**
   *
   * @type {number}
   * @memberof PredictionSummaryResult
   */
  classification_tTN?: number;
  /**
   *
   * @type {number}
   * @memberof PredictionSummaryResult
   */
  classification_accuracy?: number;
  /**
   *
   * @type {number}
   * @memberof PredictionSummaryResult
   */
  num_frames: number;
  /**
   *
   * @type {number}
   * @memberof PredictionSummaryResult
   */
  mAP: number;
  /**
   *
   * @type {number}
   * @memberof PredictionSummaryResult
   */
  mAR: number;
  /**
   *
   * @type {number}
   * @memberof PredictionSummaryResult
   */
  mP: number;
  /**
   *
   * @type {number}
   * @memberof PredictionSummaryResult
   */
  mR: number;
  /**
   *
   * @type {number}
   * @memberof PredictionSummaryResult
   */
  mF1: number;
  /**
   *
   * @type {number}
   * @memberof PredictionSummaryResult
   */
  tTP: number;
  /**
   *
   * @type {number}
   * @memberof PredictionSummaryResult
   */
  tFP: number;
  /**
   *
   * @type {number}
   * @memberof PredictionSummaryResult
   */
  tFN: number;
  /**
   *
   * @type {{ [key: string]: PredictionSummaryFeatureResult | undefined; }}
   * @memberof PredictionSummaryResult
   */
  feature_properties: {
    [key: string]: PredictionSummaryFeatureResult | undefined;
  };
  /**
   *
   * @type {{ [key: string]: Array<PredictionPRPoint> | undefined; }}
   * @memberof PredictionSummaryResult
   */
  prs: { [key: string]: Array<PredictionPRPoint> | undefined };
  /**
   *
   * @type {{ [key: string]: number | undefined; }}
   * @memberof PredictionSummaryResult
   */
  correlation: { [key: string]: number | undefined };
  /**
   *
   * @type {{ [key: string]: number | undefined; }}
   * @memberof PredictionSummaryResult
   */
  importance: { [key: string]: number | undefined };
}
/**
 *
 * @export
 * @interface ProjectDomainSummary
 */
export interface ProjectDomainSummary {
  /**
   *
   * @type {{ [key: string]: MetricSummary | undefined; }}
   * @memberof ProjectDomainSummary
   */
  metrics: { [key: string]: MetricSummary | undefined };
  /**
   *
   * @type {{ [key: string]: EnumSummary | undefined; }}
   * @memberof ProjectDomainSummary
   */
  enums: { [key: string]: EnumSummary | undefined };
}
/**
 *
 * @export
 * @interface ProjectItem
 */
export interface ProjectItem {
  /**
   *
   * @type {{ [key: string]: number | undefined; }}
   * @memberof ProjectItem
   */
  data_metrics: { [key: string]: number | undefined };
  /**
   *
   * @type {{ [key: string]: { [key: string]: number | undefined; } | undefined; }}
   * @memberof ProjectItem
   */
  annotation_metrics: {
    [key: string]: { [key: string]: number | undefined } | undefined;
  };
  /**
   *
   * @type {Array<object>}
   * @memberof ProjectItem
   */
  objects: Array<object>;
  /**
   *
   * @type {Array<object>}
   * @memberof ProjectItem
   */
  classifications: Array<object>;
  /**
   *
   * @type {string}
   * @memberof ProjectItem
   */
  dataset_title: string;
  /**
   *
   * @type {string}
   * @memberof ProjectItem
   */
  dataset_hash: string;
  /**
   *
   * @type {string}
   * @memberof ProjectItem
   */
  data_title: string;
  /**
   *
   * @type {string}
   * @memberof ProjectItem
   */
  data_hash: string;
  /**
   *
   * @type {string}
   * @memberof ProjectItem
   */
  label_hash: string;
  /**
   *
   * @type {number}
   * @memberof ProjectItem
   */
  num_frames: number;
  /**
   *
   * @type {number}
   * @memberof ProjectItem
   */
  frames_per_second?: number;
  /**
   *
   * @type {string}
   * @memberof ProjectItem
   */
  data_type: string;
  /**
   *
   * @type {string}
   * @memberof ProjectItem
   */
  url: string;
  /**
   *
   * @type {number}
   * @memberof ProjectItem
   */
  timestamp?: number;
}
/**
 *
 * @export
 * @interface ProjectList2DEmbeddingReductionResult
 */
export interface ProjectList2DEmbeddingReductionResult {
  /**
   *
   * @type {number}
   * @memberof ProjectList2DEmbeddingReductionResult
   */
  total: number;
  /**
   *
   * @type {Array<ProjectList2DEmbeddingReductionResultEntry>}
   * @memberof ProjectList2DEmbeddingReductionResult
   */
  results: Array<ProjectList2DEmbeddingReductionResultEntry>;
}
/**
 *
 * @export
 * @interface ProjectList2DEmbeddingReductionResultEntry
 */
export interface ProjectList2DEmbeddingReductionResultEntry {
  /**
   *
   * @type {string}
   * @memberof ProjectList2DEmbeddingReductionResultEntry
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof ProjectList2DEmbeddingReductionResultEntry
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof ProjectList2DEmbeddingReductionResultEntry
   */
  hash: string;
  /**
   *
   * @type {EmbeddingReductionType}
   * @memberof ProjectList2DEmbeddingReductionResultEntry
   */
  type: EmbeddingReductionType;
}

/**
 *
 * @export
 * @interface ProjectMetadata
 */
export interface ProjectMetadata {
  /**
   *
   * @type {number}
   * @memberof ProjectMetadata
   */
  data_count: number;
  /**
   *
   * @type {number}
   * @memberof ProjectMetadata
   */
  annotation_count: number;
  /**
   *
   * @type {number}
   * @memberof ProjectMetadata
   */
  class_count: number;
}
/**
 *
 * @export
 * @interface ProjectSandboxEntry
 */
export interface ProjectSandboxEntry {
  /**
   *
   * @type {string}
   * @memberof ProjectSandboxEntry
   */
  project_hash: string;
  /**
   *
   * @type {string}
   * @memberof ProjectSandboxEntry
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof ProjectSandboxEntry
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof ProjectSandboxEntry
   */
  sandbox_url: string;
  /**
   *
   * @type {number}
   * @memberof ProjectSandboxEntry
   */
  data_count: number;
  /**
   *
   * @type {number}
   * @memberof ProjectSandboxEntry
   */
  annotation_count: number;
  /**
   *
   * @type {number}
   * @memberof ProjectSandboxEntry
   */
  class_count: number;
}
/**
 *
 * @export
 * @interface ProjectSearchEntry
 */
export interface ProjectSearchEntry {
  /**
   *
   * @type {string}
   * @memberof ProjectSearchEntry
   */
  project_hash: string;
  /**
   *
   * @type {string}
   * @memberof ProjectSearchEntry
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof ProjectSearchEntry
   */
  description: string;
  /**
   *
   * @type {boolean}
   * @memberof ProjectSearchEntry
   */
  sandbox: boolean;
}
/**
 *
 * @export
 * @interface ProjectSearchResult
 */
export interface ProjectSearchResult {
  /**
   *
   * @type {Array<ProjectSearchEntry>}
   * @memberof ProjectSearchResult
   */
  projects: Array<ProjectSearchEntry>;
  /**
   *
   * @type {Array<ProjectSandboxEntry>}
   * @memberof ProjectSearchResult
   */
  sandbox_projects: Array<ProjectSandboxEntry>;
}
/**
 *
 * @export
 * @interface ProjectSummary
 */
export interface ProjectSummary {
  /**
   *
   * @type {string}
   * @memberof ProjectSummary
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof ProjectSummary
   */
  description: string;
  /**
   *
   * @type {object}
   * @memberof ProjectSummary
   */
  ontology: object;
  /**
   *
   * @type {boolean}
   * @memberof ProjectSummary
   */
  local_project: boolean;
  /**
   *
   * @type {ProjectDomainSummary}
   * @memberof ProjectSummary
   */
  data: ProjectDomainSummary;
  /**
   *
   * @type {ProjectDomainSummary}
   * @memberof ProjectSummary
   */
  annotation: ProjectDomainSummary;
  /**
   *
   * @type {number}
   * @memberof ProjectSummary
   */
  du_count: number;
  /**
   *
   * @type {number}
   * @memberof ProjectSummary
   */
  frame_count: number;
  /**
   *
   * @type {number}
   * @memberof ProjectSummary
   */
  annotation_count: number;
  /**
   *
   * @type {number}
   * @memberof ProjectSummary
   */
  classification_count: number;
  /**
   *
   * @type {ProjectDomainSummary}
   * @memberof ProjectSummary
   */
  data_annotation: ProjectDomainSummary;
  /**
   *
   * @type {{ [key: string]: string | undefined; }}
   * @memberof ProjectSummary
   */
  tags: { [key: string]: string | undefined };
  /**
   *
   * @type {string}
   * @memberof ProjectSummary
   */
  preview?: string;
}
/**
 *
 * @export
 * @interface Query2DEmbedding
 */
export interface Query2DEmbedding {
  /**
   *
   * @type {number}
   * @memberof Query2DEmbedding
   */
  count: number;
  /**
   *
   * @type {Array<QueryScatterPoint>}
   * @memberof Query2DEmbedding
   */
  reductions: Array<QueryScatterPoint>;
}
/**
 *
 * @export
 * @interface QueryDistribution
 */
export interface QueryDistribution {
  /**
   *
   * @type {Array<QueryDistributionGroup>}
   * @memberof QueryDistribution
   */
  results: Array<QueryDistributionGroup>;
}
/**
 *
 * @export
 * @interface QueryDistributionGroup
 */
export interface QueryDistributionGroup {
  /**
   *
   * @type {string}
   * @memberof QueryDistributionGroup
   */
  group: string;
  /**
   *
   * @type {number}
   * @memberof QueryDistributionGroup
   */
  count: number;
}
/**
 *
 * @export
 * @interface QueryEnumSummary
 */
export interface QueryEnumSummary {
  /**
   *
   * @type {number}
   * @memberof QueryEnumSummary
   */
  count: number;
}
/**
 *
 * @export
 * @interface QueryMetricPerformance
 */
export interface QueryMetricPerformance {
  /**
   *
   * @type {{ [key: string]: Array<QueryMetricPerformanceEntry> | undefined; }}
   * @memberof QueryMetricPerformance
   */
  precision: { [key: string]: Array<QueryMetricPerformanceEntry> | undefined };
  /**
   *
   * @type {{ [key: string]: Array<QueryMetricPerformanceEntry> | undefined; }}
   * @memberof QueryMetricPerformance
   */
  fns: { [key: string]: Array<QueryMetricPerformanceEntry> | undefined };
}
/**
 *
 * @export
 * @interface QueryMetricPerformanceEntry
 */
export interface QueryMetricPerformanceEntry {
  /**
   *
   * @type {number}
   * @memberof QueryMetricPerformanceEntry
   */
  m: number;
  /**
   *
   * @type {number}
   * @memberof QueryMetricPerformanceEntry
   */
  a: number;
  /**
   *
   * @type {number}
   * @memberof QueryMetricPerformanceEntry
   */
  n: number;
}
/**
 *
 * @export
 * @interface QueryMetricSummary
 */
export interface QueryMetricSummary {
  /**
   *
   * @type {number}
   * @memberof QueryMetricSummary
   */
  min: number;
  /**
   *
   * @type {number}
   * @memberof QueryMetricSummary
   */
  q1: number;
  /**
   *
   * @type {number}
   * @memberof QueryMetricSummary
   */
  median: number;
  /**
   *
   * @type {number}
   * @memberof QueryMetricSummary
   */
  q3: number;
  /**
   *
   * @type {number}
   * @memberof QueryMetricSummary
   */
  max: number;
  /**
   *
   * @type {number}
   * @memberof QueryMetricSummary
   */
  count: number;
  /**
   *
   * @type {number}
   * @memberof QueryMetricSummary
   */
  moderate: number;
  /**
   *
   * @type {number}
   * @memberof QueryMetricSummary
   */
  severe: number;
}
/**
 *
 * @export
 * @interface QueryScatter
 */
export interface QueryScatter {
  /**
   *
   * @type {Array<QueryScatterPoint>}
   * @memberof QueryScatter
   */
  samples: Array<QueryScatterPoint>;
}
/**
 *
 * @export
 * @interface QueryScatterPoint
 */
export interface QueryScatterPoint {
  /**
   *
   * @type {number}
   * @memberof QueryScatterPoint
   */
  x: number;
  /**
   *
   * @type {number}
   * @memberof QueryScatterPoint
   */
  y: number;
  /**
   *
   * @type {number}
   * @memberof QueryScatterPoint
   */
  n: number;
}
/**
 *
 * @export
 * @interface QuerySummary
 */
export interface QuerySummary {
  /**
   *
   * @type {number}
   * @memberof QuerySummary
   */
  count: number;
  /**
   *
   * @type {{ [key: string]: QueryMetricSummary | undefined; }}
   * @memberof QuerySummary
   */
  metrics: { [key: string]: QueryMetricSummary | undefined };
  /**
   *
   * @type {{ [key: string]: QueryEnumSummary | undefined; }}
   * @memberof QuerySummary
   */
  enums: { [key: string]: QueryEnumSummary | undefined };
}
/**
 *
 * @export
 * @interface Range
 */
export interface Range {
  /**
   *
   * @type {number}
   * @memberof Range
   */
  min: number;
  /**
   *
   * @type {number}
   * @memberof Range
   */
  max: number;
}
/**
 *
 * @export
 * @interface SearchFilters
 */
export interface SearchFilters {
  /**
   *
   * @type {DomainSearchFilters}
   * @memberof SearchFilters
   */
  data?: DomainSearchFilters;
  /**
   *
   * @type {DomainSearchFilters}
   * @memberof SearchFilters
   */
  annotation?: DomainSearchFilters;
}
/**
 *
 * @export
 * @interface SimilarityResult
 */
export interface SimilarityResult {
  /**
   *
   * @type {string}
   * @memberof SimilarityResult
   */
  item: string;
  /**
   *
   * @type {number}
   * @memberof SimilarityResult
   */
  similarity: number;
}
/**
 *
 * @export
 * @interface UploadProjectToEncordPostAction
 */
export interface UploadProjectToEncordPostAction {
  /**
   *
   * @type {string}
   * @memberof UploadProjectToEncordPostAction
   */
  project_title: string;
  /**
   *
   * @type {string}
   * @memberof UploadProjectToEncordPostAction
   */
  project_description?: string;
  /**
   *
   * @type {string}
   * @memberof UploadProjectToEncordPostAction
   */
  dataset_title: string;
  /**
   *
   * @type {string}
   * @memberof UploadProjectToEncordPostAction
   */
  dataset_description?: string;
  /**
   *
   * @type {string}
   * @memberof UploadProjectToEncordPostAction
   */
  ontology_title: string;
  /**
   *
   * @type {string}
   * @memberof UploadProjectToEncordPostAction
   */
  ontology_description?: string;
}
/**
 *
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
  /**
   *
   * @type {Array<LocationInner>}
   * @memberof ValidationError
   */
  loc: Array<LocationInner>;
  /**
   *
   * @type {string}
   * @memberof ValidationError
   */
  msg: string;
  /**
   *
   * @type {string}
   * @memberof ValidationError
   */
  type: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary  Favicon Ico
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    faviconIcoFaviconIcoGet: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/favicon.ico`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthCheckGet: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary  Index
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    indexIndexHtmlGet: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/index.html`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Premium Available
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    premiumAvailablePremiumAvailableGet: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/premium_available`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary  Favicon Ico
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async faviconIcoFaviconIcoGet(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.faviconIcoFaviconIcoGet(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async healthCheckGet(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheckGet(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary  Index
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async indexIndexHtmlGet(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.indexIndexHtmlGet(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Premium Available
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async premiumAvailablePremiumAvailableGet(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.premiumAvailablePremiumAvailableGet(
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     *
     * @summary  Favicon Ico
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    faviconIcoFaviconIcoGet(options?: any): AxiosPromise<any> {
      return localVarFp
        .faviconIcoFaviconIcoGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthCheckGet(options?: any): AxiosPromise<boolean> {
      return localVarFp
        .healthCheckGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary  Index
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    indexIndexHtmlGet(options?: any): AxiosPromise<any> {
      return localVarFp
        .indexIndexHtmlGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Premium Available
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    premiumAvailablePremiumAvailableGet(options?: any): AxiosPromise<boolean> {
      return localVarFp
        .premiumAvailablePremiumAvailableGet(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @summary  Favicon Ico
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public faviconIcoFaviconIcoGet(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .faviconIcoFaviconIcoGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Health Check
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public healthCheckGet(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .healthCheckGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary  Index
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public indexIndexHtmlGet(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .indexIndexHtmlGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Premium Available
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public premiumAvailablePremiumAvailableGet(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .premiumAvailablePremiumAvailableGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ProjectsV2Api - axios parameter creator
 * @export
 */
export const ProjectsV2ApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Compare Metric Dissimilarity
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} compareProjectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    compareMetricDissimilarityProjectsV2ProjectHashAnalysisDomainProjectCompareMetricDissimilarityGet:
      async (
        projectHash: string,
        domain: AnalysisDomain,
        compareProjectHash: string,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "compareMetricDissimilarityProjectsV2ProjectHashAnalysisDomainProjectCompareMetricDissimilarityGet",
          "projectHash",
          projectHash
        );
        // verify required parameter 'domain' is not null or undefined
        assertParamExists(
          "compareMetricDissimilarityProjectsV2ProjectHashAnalysisDomainProjectCompareMetricDissimilarityGet",
          "domain",
          domain
        );
        // verify required parameter 'compareProjectHash' is not null or undefined
        assertParamExists(
          "compareMetricDissimilarityProjectsV2ProjectHashAnalysisDomainProjectCompareMetricDissimilarityGet",
          "compareProjectHash",
          compareProjectHash
        );
        const localVarPath =
          `/projects_v2/{project_hash}/analysis/{domain}/project_compare/metric_dissimilarity`
            .replace(
              `{${"project_hash"}}`,
              encodeURIComponent(String(projectHash))
            )
            .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "GET",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        if (compareProjectHash !== undefined) {
          localVarQueryParameter["compare_project_hash"] = compareProjectHash;
        }

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Create Active Subset
     * @param {string} projectHash
     * @param {CreateProjectSubsetPostAction} createProjectSubsetPostAction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createActiveSubsetProjectsV2ProjectHashActionsCreateProjectSubsetPost:
      async (
        projectHash: string,
        createProjectSubsetPostAction: CreateProjectSubsetPostAction,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "createActiveSubsetProjectsV2ProjectHashActionsCreateProjectSubsetPost",
          "projectHash",
          projectHash
        );
        // verify required parameter 'createProjectSubsetPostAction' is not null or undefined
        assertParamExists(
          "createActiveSubsetProjectsV2ProjectHashActionsCreateProjectSubsetPost",
          "createProjectSubsetPostAction",
          createProjectSubsetPostAction
        );
        const localVarPath =
          `/projects_v2/{project_hash}/actions/create_project_subset`.replace(
            `{${"project_hash"}}`,
            encodeURIComponent(String(projectHash))
          );
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "POST",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        localVarHeaderParameter["Content-Type"] = "application/json";

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };
        localVarRequestOptions.data = serializeDataIfNeeded(
          createProjectSubsetPostAction,
          localVarRequestOptions,
          configuration
        );

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Create Data Tag
     * @param {string} projectHash
     * @param {string} tagName
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDataTagProjectsV2ProjectHashCreateTagPost: async (
      projectHash: string,
      tagName: string,
      requestBody: Array<string>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectHash' is not null or undefined
      assertParamExists(
        "createDataTagProjectsV2ProjectHashCreateTagPost",
        "projectHash",
        projectHash
      );
      // verify required parameter 'tagName' is not null or undefined
      assertParamExists(
        "createDataTagProjectsV2ProjectHashCreateTagPost",
        "tagName",
        tagName
      );
      // verify required parameter 'requestBody' is not null or undefined
      assertParamExists(
        "createDataTagProjectsV2ProjectHashCreateTagPost",
        "requestBody",
        requestBody
      );
      const localVarPath = `/projects_v2/{project_hash}/create/tag`.replace(
        `{${"project_hash"}}`,
        encodeURIComponent(String(projectHash))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (tagName !== undefined) {
        localVarQueryParameter["tag_name"] = tagName;
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Display Preview
     * @param {string} projectHash
     * @param {string} item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewProjectsV2ProjectHashPreviewItemGet: async (
      projectHash: string,
      item: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectHash' is not null or undefined
      assertParamExists(
        "displayPreviewProjectsV2ProjectHashPreviewItemGet",
        "projectHash",
        projectHash
      );
      // verify required parameter 'item' is not null or undefined
      assertParamExists(
        "displayPreviewProjectsV2ProjectHashPreviewItemGet",
        "item",
        item
      );
      const localVarPath = `/projects_v2/{project_hash}/preview/{item}`
        .replace(`{${"project_hash"}}`, encodeURIComponent(String(projectHash)))
        .replace(`{${"item"}}`, encodeURIComponent(String(item)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Display Raw File
     * @param {string} projectHash
     * @param {string} duHash
     * @param {number} frame
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayRawFileProjectsV2ProjectHashFilesDuHashFrameGet: async (
      projectHash: string,
      duHash: string,
      frame: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectHash' is not null or undefined
      assertParamExists(
        "displayRawFileProjectsV2ProjectHashFilesDuHashFrameGet",
        "projectHash",
        projectHash
      );
      // verify required parameter 'duHash' is not null or undefined
      assertParamExists(
        "displayRawFileProjectsV2ProjectHashFilesDuHashFrameGet",
        "duHash",
        duHash
      );
      // verify required parameter 'frame' is not null or undefined
      assertParamExists(
        "displayRawFileProjectsV2ProjectHashFilesDuHashFrameGet",
        "frame",
        frame
      );
      const localVarPath = `/projects_v2/{project_hash}/files/{du_hash}/{frame}`
        .replace(`{${"project_hash"}}`, encodeURIComponent(String(projectHash)))
        .replace(`{${"du_hash"}}`, encodeURIComponent(String(duHash)))
        .replace(`{${"frame"}}`, encodeURIComponent(String(frame)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get 2D Embedding Summary
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} reductionHash
     * @param {Get2dEmbeddingSummaryProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGetBucketsEnum} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get2dEmbeddingSummaryProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGet:
      async (
        projectHash: string,
        domain: AnalysisDomain,
        reductionHash: string,
        buckets?: Get2dEmbeddingSummaryProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGetBucketsEnum,
        filters?: string,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "get2dEmbeddingSummaryProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGet",
          "projectHash",
          projectHash
        );
        // verify required parameter 'domain' is not null or undefined
        assertParamExists(
          "get2dEmbeddingSummaryProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGet",
          "domain",
          domain
        );
        // verify required parameter 'reductionHash' is not null or undefined
        assertParamExists(
          "get2dEmbeddingSummaryProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGet",
          "reductionHash",
          reductionHash
        );
        const localVarPath =
          `/projects_v2/{project_hash}/analysis/{domain}/reductions/{reduction_hash}/summary`
            .replace(
              `{${"project_hash"}}`,
              encodeURIComponent(String(projectHash))
            )
            .replace(`{${"domain"}}`, encodeURIComponent(String(domain)))
            .replace(
              `{${"reduction_hash"}}`,
              encodeURIComponent(String(reductionHash))
            );
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "GET",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        if (buckets !== undefined) {
          localVarQueryParameter["buckets"] = buckets;
        }

        if (filters !== undefined) {
          localVarQueryParameter["filters"] = filters;
        }

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Get All Projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllProjectsProjectsV2Get: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/projects_v2`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get Metric Distribution
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} group
     * @param {GetMetricDistributionProjectsV2ProjectHashAnalysisDomainDistributionGetBucketsEnum} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetricDistributionProjectsV2ProjectHashAnalysisDomainDistributionGet:
      async (
        projectHash: string,
        domain: AnalysisDomain,
        group: string,
        buckets?: GetMetricDistributionProjectsV2ProjectHashAnalysisDomainDistributionGetBucketsEnum,
        filters?: string,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "getMetricDistributionProjectsV2ProjectHashAnalysisDomainDistributionGet",
          "projectHash",
          projectHash
        );
        // verify required parameter 'domain' is not null or undefined
        assertParamExists(
          "getMetricDistributionProjectsV2ProjectHashAnalysisDomainDistributionGet",
          "domain",
          domain
        );
        // verify required parameter 'group' is not null or undefined
        assertParamExists(
          "getMetricDistributionProjectsV2ProjectHashAnalysisDomainDistributionGet",
          "group",
          group
        );
        const localVarPath =
          `/projects_v2/{project_hash}/analysis/{domain}/distribution`
            .replace(
              `{${"project_hash"}}`,
              encodeURIComponent(String(projectHash))
            )
            .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "GET",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        if (group !== undefined) {
          localVarQueryParameter["group"] = group;
        }

        if (buckets !== undefined) {
          localVarQueryParameter["buckets"] = buckets;
        }

        if (filters !== undefined) {
          localVarQueryParameter["filters"] = filters;
        }

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Get Prediction Item
     * @param {string} predictionHash
     * @param {string} item
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPredictionItemProjectsV2ProjectHashPredictionsPredictionHashPreviewItemGet:
      async (
        predictionHash: string,
        item: string,
        projectHash: string,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'predictionHash' is not null or undefined
        assertParamExists(
          "getPredictionItemProjectsV2ProjectHashPredictionsPredictionHashPreviewItemGet",
          "predictionHash",
          predictionHash
        );
        // verify required parameter 'item' is not null or undefined
        assertParamExists(
          "getPredictionItemProjectsV2ProjectHashPredictionsPredictionHashPreviewItemGet",
          "item",
          item
        );
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "getPredictionItemProjectsV2ProjectHashPredictionsPredictionHashPreviewItemGet",
          "projectHash",
          projectHash
        );
        const localVarPath =
          `/projects_v2/{project_hash}/predictions/{prediction_hash}/preview/{item}`
            .replace(
              `{${"prediction_hash"}}`,
              encodeURIComponent(String(predictionHash))
            )
            .replace(`{${"item"}}`, encodeURIComponent(String(item)))
            .replace(
              `{${"project_hash"}}`,
              encodeURIComponent(String(projectHash))
            );
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "GET",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Get Project Metadata
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectMetadataProjectsV2ProjectHashMetadataGet: async (
      projectHash: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectHash' is not null or undefined
      assertParamExists(
        "getProjectMetadataProjectsV2ProjectHashMetadataGet",
        "projectHash",
        projectHash
      );
      const localVarPath = `/projects_v2/{project_hash}/metadata`.replace(
        `{${"project_hash"}}`,
        encodeURIComponent(String(projectHash))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get Project Prediction Summary
     * @param {string} predictionHash
     * @param {string} projectHash
     * @param {number} iou
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectPredictionSummaryProjectsV2ProjectHashPredictionsPredictionHashSummaryGet:
      async (
        predictionHash: string,
        projectHash: string,
        iou: number,
        filters?: string,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'predictionHash' is not null or undefined
        assertParamExists(
          "getProjectPredictionSummaryProjectsV2ProjectHashPredictionsPredictionHashSummaryGet",
          "predictionHash",
          predictionHash
        );
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "getProjectPredictionSummaryProjectsV2ProjectHashPredictionsPredictionHashSummaryGet",
          "projectHash",
          projectHash
        );
        // verify required parameter 'iou' is not null or undefined
        assertParamExists(
          "getProjectPredictionSummaryProjectsV2ProjectHashPredictionsPredictionHashSummaryGet",
          "iou",
          iou
        );
        const localVarPath =
          `/projects_v2/{project_hash}/predictions/{prediction_hash}/summary`
            .replace(
              `{${"prediction_hash"}}`,
              encodeURIComponent(String(predictionHash))
            )
            .replace(
              `{${"project_hash"}}`,
              encodeURIComponent(String(projectHash))
            );
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "GET",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        if (iou !== undefined) {
          localVarQueryParameter["iou"] = iou;
        }

        if (filters !== undefined) {
          localVarQueryParameter["filters"] = filters;
        }

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Get Project Summary
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectSummaryProjectsV2ProjectHashSummaryGet: async (
      projectHash: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectHash' is not null or undefined
      assertParamExists(
        "getProjectSummaryProjectsV2ProjectHashSummaryGet",
        "projectHash",
        projectHash
      );
      const localVarPath = `/projects_v2/{project_hash}/summary`.replace(
        `{${"project_hash"}}`,
        encodeURIComponent(String(projectHash))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary List Project Predictions
     * @param {string} projectHash
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {ListProjectPredictionsProjectsV2ProjectHashPredictionsGetOrderByEnum} [orderBy]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjectPredictionsProjectsV2ProjectHashPredictionsGet: async (
      projectHash: string,
      offset?: number,
      limit?: number,
      orderBy?: ListProjectPredictionsProjectsV2ProjectHashPredictionsGetOrderByEnum,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectHash' is not null or undefined
      assertParamExists(
        "listProjectPredictionsProjectsV2ProjectHashPredictionsGet",
        "projectHash",
        projectHash
      );
      const localVarPath = `/projects_v2/{project_hash}/predictions`.replace(
        `{${"project_hash"}}`,
        encodeURIComponent(String(projectHash))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (orderBy !== undefined) {
        localVarQueryParameter["order_by"] = orderBy;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary List Supported 2D Embedding Reductions
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSupported2dEmbeddingReductionsProjectsV2ProjectHashReductionsGet:
      async (
        projectHash: string,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "listSupported2dEmbeddingReductionsProjectsV2ProjectHashReductionsGet",
          "projectHash",
          projectHash
        );
        const localVarPath = `/projects_v2/{project_hash}/reductions`.replace(
          `{${"project_hash"}}`,
          encodeURIComponent(String(projectHash))
        );
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "GET",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Metric Search
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} [orderBy]
     * @param {boolean} [desc]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metricSearchProjectsV2ProjectHashAnalysisDomainSearchGet: async (
      projectHash: string,
      domain: AnalysisDomain,
      orderBy?: string,
      desc?: boolean,
      offset?: number,
      limit?: number,
      filters?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectHash' is not null or undefined
      assertParamExists(
        "metricSearchProjectsV2ProjectHashAnalysisDomainSearchGet",
        "projectHash",
        projectHash
      );
      // verify required parameter 'domain' is not null or undefined
      assertParamExists(
        "metricSearchProjectsV2ProjectHashAnalysisDomainSearchGet",
        "domain",
        domain
      );
      const localVarPath =
        `/projects_v2/{project_hash}/analysis/{domain}/search`
          .replace(
            `{${"project_hash"}}`,
            encodeURIComponent(String(projectHash))
          )
          .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (orderBy !== undefined) {
        localVarQueryParameter["order_by"] = orderBy;
      }

      if (desc !== undefined) {
        localVarQueryParameter["desc"] = desc;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (filters !== undefined) {
        localVarQueryParameter["filters"] = filters;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Metric Summary
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metricSummaryProjectsV2ProjectHashAnalysisDomainSummaryGet: async (
      projectHash: string,
      domain: AnalysisDomain,
      filters?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectHash' is not null or undefined
      assertParamExists(
        "metricSummaryProjectsV2ProjectHashAnalysisDomainSummaryGet",
        "projectHash",
        projectHash
      );
      // verify required parameter 'domain' is not null or undefined
      assertParamExists(
        "metricSummaryProjectsV2ProjectHashAnalysisDomainSummaryGet",
        "domain",
        domain
      );
      const localVarPath =
        `/projects_v2/{project_hash}/analysis/{domain}/summary`
          .replace(
            `{${"project_hash"}}`,
            encodeURIComponent(String(projectHash))
          )
          .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (filters !== undefined) {
        localVarQueryParameter["filters"] = filters;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Prediction Metric Distribution
     * @param {string} predictionHash
     * @param {PredictionDomain} predictionDomain
     * @param {string} projectHash
     * @param {string} group
     * @param {PredictionMetricDistributionProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainDistributionGetBucketsEnum} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    predictionMetricDistributionProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainDistributionGet:
      async (
        predictionHash: string,
        predictionDomain: PredictionDomain,
        projectHash: string,
        group: string,
        buckets?: PredictionMetricDistributionProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainDistributionGetBucketsEnum,
        filters?: string,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'predictionHash' is not null or undefined
        assertParamExists(
          "predictionMetricDistributionProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainDistributionGet",
          "predictionHash",
          predictionHash
        );
        // verify required parameter 'predictionDomain' is not null or undefined
        assertParamExists(
          "predictionMetricDistributionProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainDistributionGet",
          "predictionDomain",
          predictionDomain
        );
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "predictionMetricDistributionProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainDistributionGet",
          "projectHash",
          projectHash
        );
        // verify required parameter 'group' is not null or undefined
        assertParamExists(
          "predictionMetricDistributionProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainDistributionGet",
          "group",
          group
        );
        const localVarPath =
          `/projects_v2/{project_hash}/predictions/{prediction_hash}/analytics/{prediction_domain}/distribution`
            .replace(
              `{${"prediction_hash"}}`,
              encodeURIComponent(String(predictionHash))
            )
            .replace(
              `{${"prediction_domain"}}`,
              encodeURIComponent(String(predictionDomain))
            )
            .replace(
              `{${"project_hash"}}`,
              encodeURIComponent(String(projectHash))
            );
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "GET",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        if (group !== undefined) {
          localVarQueryParameter["group"] = group;
        }

        if (buckets !== undefined) {
          localVarQueryParameter["buckets"] = buckets;
        }

        if (filters !== undefined) {
          localVarQueryParameter["filters"] = filters;
        }

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Prediction Metric Performance
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {number} iou
     * @param {string} metricName
     * @param {PredictionMetricPerformanceProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGetBucketsEnum} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    predictionMetricPerformanceProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGet:
      async (
        projectHash: string,
        predictionHash: string,
        iou: number,
        metricName: string,
        buckets?: PredictionMetricPerformanceProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGetBucketsEnum,
        filters?: string,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "predictionMetricPerformanceProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGet",
          "projectHash",
          projectHash
        );
        // verify required parameter 'predictionHash' is not null or undefined
        assertParamExists(
          "predictionMetricPerformanceProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGet",
          "predictionHash",
          predictionHash
        );
        // verify required parameter 'iou' is not null or undefined
        assertParamExists(
          "predictionMetricPerformanceProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGet",
          "iou",
          iou
        );
        // verify required parameter 'metricName' is not null or undefined
        assertParamExists(
          "predictionMetricPerformanceProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGet",
          "metricName",
          metricName
        );
        const localVarPath =
          `/projects_v2/{project_hash}/predictions/{prediction_hash}/metric_performance`
            .replace(
              `{${"project_hash"}}`,
              encodeURIComponent(String(projectHash))
            )
            .replace(
              `{${"prediction_hash"}}`,
              encodeURIComponent(String(predictionHash))
            );
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "GET",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        if (iou !== undefined) {
          localVarQueryParameter["iou"] = iou;
        }

        if (metricName !== undefined) {
          localVarQueryParameter["metric_name"] = metricName;
        }

        if (buckets !== undefined) {
          localVarQueryParameter["buckets"] = buckets;
        }

        if (filters !== undefined) {
          localVarQueryParameter["filters"] = filters;
        }

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Prediction Metric Scatter
     * @param {string} predictionHash
     * @param {PredictionDomain} predictionDomain
     * @param {string} projectHash
     * @param {string} xMetric
     * @param {string} yMetric
     * @param {PredictionMetricScatterProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainScatterGetBucketsEnum} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    predictionMetricScatterProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainScatterGet:
      async (
        predictionHash: string,
        predictionDomain: PredictionDomain,
        projectHash: string,
        xMetric: string,
        yMetric: string,
        buckets?: PredictionMetricScatterProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainScatterGetBucketsEnum,
        filters?: string,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'predictionHash' is not null or undefined
        assertParamExists(
          "predictionMetricScatterProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainScatterGet",
          "predictionHash",
          predictionHash
        );
        // verify required parameter 'predictionDomain' is not null or undefined
        assertParamExists(
          "predictionMetricScatterProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainScatterGet",
          "predictionDomain",
          predictionDomain
        );
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "predictionMetricScatterProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainScatterGet",
          "projectHash",
          projectHash
        );
        // verify required parameter 'xMetric' is not null or undefined
        assertParamExists(
          "predictionMetricScatterProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainScatterGet",
          "xMetric",
          xMetric
        );
        // verify required parameter 'yMetric' is not null or undefined
        assertParamExists(
          "predictionMetricScatterProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainScatterGet",
          "yMetric",
          yMetric
        );
        const localVarPath =
          `/projects_v2/{project_hash}/predictions/{prediction_hash}/analytics/{prediction_domain}/scatter`
            .replace(
              `{${"prediction_hash"}}`,
              encodeURIComponent(String(predictionHash))
            )
            .replace(
              `{${"prediction_domain"}}`,
              encodeURIComponent(String(predictionDomain))
            )
            .replace(
              `{${"project_hash"}}`,
              encodeURIComponent(String(projectHash))
            );
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "GET",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        if (xMetric !== undefined) {
          localVarQueryParameter["x_metric"] = xMetric;
        }

        if (yMetric !== undefined) {
          localVarQueryParameter["y_metric"] = yMetric;
        }

        if (buckets !== undefined) {
          localVarQueryParameter["buckets"] = buckets;
        }

        if (filters !== undefined) {
          localVarQueryParameter["filters"] = filters;
        }

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Prediction Search
     * @param {string} predictionHash
     * @param {string} projectHash
     * @param {number} iou
     * @param {string} metricFilters
     * @param {string} enumFilters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    predictionSearchProjectsV2ProjectHashPredictionsPredictionHashSearchGet:
      async (
        predictionHash: string,
        projectHash: string,
        iou: number,
        metricFilters: string,
        enumFilters: string,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'predictionHash' is not null or undefined
        assertParamExists(
          "predictionSearchProjectsV2ProjectHashPredictionsPredictionHashSearchGet",
          "predictionHash",
          predictionHash
        );
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "predictionSearchProjectsV2ProjectHashPredictionsPredictionHashSearchGet",
          "projectHash",
          projectHash
        );
        // verify required parameter 'iou' is not null or undefined
        assertParamExists(
          "predictionSearchProjectsV2ProjectHashPredictionsPredictionHashSearchGet",
          "iou",
          iou
        );
        // verify required parameter 'metricFilters' is not null or undefined
        assertParamExists(
          "predictionSearchProjectsV2ProjectHashPredictionsPredictionHashSearchGet",
          "metricFilters",
          metricFilters
        );
        // verify required parameter 'enumFilters' is not null or undefined
        assertParamExists(
          "predictionSearchProjectsV2ProjectHashPredictionsPredictionHashSearchGet",
          "enumFilters",
          enumFilters
        );
        const localVarPath =
          `/projects_v2/{project_hash}/predictions/{prediction_hash}/search`
            .replace(
              `{${"prediction_hash"}}`,
              encodeURIComponent(String(predictionHash))
            )
            .replace(
              `{${"project_hash"}}`,
              encodeURIComponent(String(projectHash))
            );
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "GET",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        if (iou !== undefined) {
          localVarQueryParameter["iou"] = iou;
        }

        if (metricFilters !== undefined) {
          localVarQueryParameter["metric_filters"] = metricFilters;
        }

        if (enumFilters !== undefined) {
          localVarQueryParameter["enum_filters"] = enumFilters;
        }

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Project Item
     * @param {string} projectHash
     * @param {string} dataItem
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectItemProjectsV2ProjectHashItemDataItemGet: async (
      projectHash: string,
      dataItem: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectHash' is not null or undefined
      assertParamExists(
        "projectItemProjectsV2ProjectHashItemDataItemGet",
        "projectHash",
        projectHash
      );
      // verify required parameter 'dataItem' is not null or undefined
      assertParamExists(
        "projectItemProjectsV2ProjectHashItemDataItemGet",
        "dataItem",
        dataItem
      );
      const localVarPath = `/projects_v2/{project_hash}/item/{data_item}/`
        .replace(`{${"project_hash"}}`, encodeURIComponent(String(projectHash)))
        .replace(`{${"data_item"}}`, encodeURIComponent(String(dataItem)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Scatter 2D Data Metric
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} xMetric
     * @param {string} yMetric
     * @param {Scatter2dDataMetricProjectsV2ProjectHashAnalysisDomainScatterGetBucketsEnum} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scatter2dDataMetricProjectsV2ProjectHashAnalysisDomainScatterGet: async (
      projectHash: string,
      domain: AnalysisDomain,
      xMetric: string,
      yMetric: string,
      buckets?: Scatter2dDataMetricProjectsV2ProjectHashAnalysisDomainScatterGetBucketsEnum,
      filters?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectHash' is not null or undefined
      assertParamExists(
        "scatter2dDataMetricProjectsV2ProjectHashAnalysisDomainScatterGet",
        "projectHash",
        projectHash
      );
      // verify required parameter 'domain' is not null or undefined
      assertParamExists(
        "scatter2dDataMetricProjectsV2ProjectHashAnalysisDomainScatterGet",
        "domain",
        domain
      );
      // verify required parameter 'xMetric' is not null or undefined
      assertParamExists(
        "scatter2dDataMetricProjectsV2ProjectHashAnalysisDomainScatterGet",
        "xMetric",
        xMetric
      );
      // verify required parameter 'yMetric' is not null or undefined
      assertParamExists(
        "scatter2dDataMetricProjectsV2ProjectHashAnalysisDomainScatterGet",
        "yMetric",
        yMetric
      );
      const localVarPath =
        `/projects_v2/{project_hash}/analysis/{domain}/scatter`
          .replace(
            `{${"project_hash"}}`,
            encodeURIComponent(String(projectHash))
          )
          .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (xMetric !== undefined) {
        localVarQueryParameter["x_metric"] = xMetric;
      }

      if (yMetric !== undefined) {
        localVarQueryParameter["y_metric"] = yMetric;
      }

      if (buckets !== undefined) {
        localVarQueryParameter["buckets"] = buckets;
      }

      if (filters !== undefined) {
        localVarQueryParameter["filters"] = filters;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Search Similarity
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} item
     * @param {SearchSimilarityProjectsV2ProjectHashAnalysisDomainSimilarityItemGetEmbeddingEnum} embedding
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSimilarityProjectsV2ProjectHashAnalysisDomainSimilarityItemGet:
      async (
        projectHash: string,
        domain: AnalysisDomain,
        item: string,
        embedding: SearchSimilarityProjectsV2ProjectHashAnalysisDomainSimilarityItemGetEmbeddingEnum,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "searchSimilarityProjectsV2ProjectHashAnalysisDomainSimilarityItemGet",
          "projectHash",
          projectHash
        );
        // verify required parameter 'domain' is not null or undefined
        assertParamExists(
          "searchSimilarityProjectsV2ProjectHashAnalysisDomainSimilarityItemGet",
          "domain",
          domain
        );
        // verify required parameter 'item' is not null or undefined
        assertParamExists(
          "searchSimilarityProjectsV2ProjectHashAnalysisDomainSimilarityItemGet",
          "item",
          item
        );
        // verify required parameter 'embedding' is not null or undefined
        assertParamExists(
          "searchSimilarityProjectsV2ProjectHashAnalysisDomainSimilarityItemGet",
          "embedding",
          embedding
        );
        const localVarPath =
          `/projects_v2/{project_hash}/analysis/{domain}/similarity/{item}`
            .replace(
              `{${"project_hash"}}`,
              encodeURIComponent(String(projectHash))
            )
            .replace(`{${"domain"}}`, encodeURIComponent(String(domain)))
            .replace(`{${"item"}}`, encodeURIComponent(String(item)));
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "GET",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        if (embedding !== undefined) {
          localVarQueryParameter["embedding"] = embedding;
        }

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Upload Project To Encord
     * @param {string} projectHash
     * @param {UploadProjectToEncordPostAction} uploadProjectToEncordPostAction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadProjectToEncordProjectsV2ProjectHashActionsUploadToEncordPost: async (
      projectHash: string,
      uploadProjectToEncordPostAction: UploadProjectToEncordPostAction,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectHash' is not null or undefined
      assertParamExists(
        "uploadProjectToEncordProjectsV2ProjectHashActionsUploadToEncordPost",
        "projectHash",
        projectHash
      );
      // verify required parameter 'uploadProjectToEncordPostAction' is not null or undefined
      assertParamExists(
        "uploadProjectToEncordProjectsV2ProjectHashActionsUploadToEncordPost",
        "uploadProjectToEncordPostAction",
        uploadProjectToEncordPostAction
      );
      const localVarPath =
        `/projects_v2/{project_hash}/actions/upload_to_encord`.replace(
          `{${"project_hash"}}`,
          encodeURIComponent(String(projectHash))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        uploadProjectToEncordPostAction,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ProjectsV2Api - functional programming interface
 * @export
 */
export const ProjectsV2ApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    ProjectsV2ApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Compare Metric Dissimilarity
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} compareProjectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async compareMetricDissimilarityProjectsV2ProjectHashAnalysisDomainProjectCompareMetricDissimilarityGet(
      projectHash: string,
      domain: AnalysisDomain,
      compareProjectHash: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<MetricDissimilarityResult>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.compareMetricDissimilarityProjectsV2ProjectHashAnalysisDomainProjectCompareMetricDissimilarityGet(
          projectHash,
          domain,
          compareProjectHash,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Create Active Subset
     * @param {string} projectHash
     * @param {CreateProjectSubsetPostAction} createProjectSubsetPostAction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createActiveSubsetProjectsV2ProjectHashActionsCreateProjectSubsetPost(
      projectHash: string,
      createProjectSubsetPostAction: CreateProjectSubsetPostAction,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createActiveSubsetProjectsV2ProjectHashActionsCreateProjectSubsetPost(
          projectHash,
          createProjectSubsetPostAction,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Create Data Tag
     * @param {string} projectHash
     * @param {string} tagName
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createDataTagProjectsV2ProjectHashCreateTagPost(
      projectHash: string,
      tagName: string,
      requestBody: Array<string>,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createDataTagProjectsV2ProjectHashCreateTagPost(
          projectHash,
          tagName,
          requestBody,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Display Preview
     * @param {string} projectHash
     * @param {string} item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async displayPreviewProjectsV2ProjectHashPreviewItemGet(
      projectHash: string,
      item: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.displayPreviewProjectsV2ProjectHashPreviewItemGet(
          projectHash,
          item,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Display Raw File
     * @param {string} projectHash
     * @param {string} duHash
     * @param {number} frame
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async displayRawFileProjectsV2ProjectHashFilesDuHashFrameGet(
      projectHash: string,
      duHash: string,
      frame: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.displayRawFileProjectsV2ProjectHashFilesDuHashFrameGet(
          projectHash,
          duHash,
          frame,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get 2D Embedding Summary
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} reductionHash
     * @param {Get2dEmbeddingSummaryProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGetBucketsEnum} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async get2dEmbeddingSummaryProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGet(
      projectHash: string,
      domain: AnalysisDomain,
      reductionHash: string,
      buckets?: Get2dEmbeddingSummaryProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGetBucketsEnum,
      filters?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Query2DEmbedding>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.get2dEmbeddingSummaryProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGet(
          projectHash,
          domain,
          reductionHash,
          buckets,
          filters,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get All Projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllProjectsProjectsV2Get(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ProjectSearchResult>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getAllProjectsProjectsV2Get(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get Metric Distribution
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} group
     * @param {GetMetricDistributionProjectsV2ProjectHashAnalysisDomainDistributionGetBucketsEnum} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMetricDistributionProjectsV2ProjectHashAnalysisDomainDistributionGet(
      projectHash: string,
      domain: AnalysisDomain,
      group: string,
      buckets?: GetMetricDistributionProjectsV2ProjectHashAnalysisDomainDistributionGetBucketsEnum,
      filters?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<QueryDistribution>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getMetricDistributionProjectsV2ProjectHashAnalysisDomainDistributionGet(
          projectHash,
          domain,
          group,
          buckets,
          filters,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get Prediction Item
     * @param {string} predictionHash
     * @param {string} item
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPredictionItemProjectsV2ProjectHashPredictionsPredictionHashPreviewItemGet(
      predictionHash: string,
      item: string,
      projectHash: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getPredictionItemProjectsV2ProjectHashPredictionsPredictionHashPreviewItemGet(
          predictionHash,
          item,
          projectHash,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get Project Metadata
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProjectMetadataProjectsV2ProjectHashMetadataGet(
      projectHash: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ProjectMetadata>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getProjectMetadataProjectsV2ProjectHashMetadataGet(
          projectHash,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get Project Prediction Summary
     * @param {string} predictionHash
     * @param {string} projectHash
     * @param {number} iou
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProjectPredictionSummaryProjectsV2ProjectHashPredictionsPredictionHashSummaryGet(
      predictionHash: string,
      projectHash: string,
      iou: number,
      filters?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PredictionSummaryResult>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getProjectPredictionSummaryProjectsV2ProjectHashPredictionsPredictionHashSummaryGet(
          predictionHash,
          projectHash,
          iou,
          filters,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get Project Summary
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProjectSummaryProjectsV2ProjectHashSummaryGet(
      projectHash: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectSummary>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getProjectSummaryProjectsV2ProjectHashSummaryGet(
          projectHash,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary List Project Predictions
     * @param {string} projectHash
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {ListProjectPredictionsProjectsV2ProjectHashPredictionsGetOrderByEnum} [orderBy]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listProjectPredictionsProjectsV2ProjectHashPredictionsGet(
      projectHash: string,
      offset?: number,
      limit?: number,
      orderBy?: ListProjectPredictionsProjectsV2ProjectHashPredictionsGetOrderByEnum,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ListProjectPredictionResult>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.listProjectPredictionsProjectsV2ProjectHashPredictionsGet(
          projectHash,
          offset,
          limit,
          orderBy,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary List Supported 2D Embedding Reductions
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listSupported2dEmbeddingReductionsProjectsV2ProjectHashReductionsGet(
      projectHash: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ProjectList2DEmbeddingReductionResult>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.listSupported2dEmbeddingReductionsProjectsV2ProjectHashReductionsGet(
          projectHash,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Metric Search
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} [orderBy]
     * @param {boolean} [desc]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async metricSearchProjectsV2ProjectHashAnalysisDomainSearchGet(
      projectHash: string,
      domain: AnalysisDomain,
      orderBy?: string,
      desc?: boolean,
      offset?: number,
      limit?: number,
      filters?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnalysisSearch>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.metricSearchProjectsV2ProjectHashAnalysisDomainSearchGet(
          projectHash,
          domain,
          orderBy,
          desc,
          offset,
          limit,
          filters,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Metric Summary
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async metricSummaryProjectsV2ProjectHashAnalysisDomainSummaryGet(
      projectHash: string,
      domain: AnalysisDomain,
      filters?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuerySummary>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.metricSummaryProjectsV2ProjectHashAnalysisDomainSummaryGet(
          projectHash,
          domain,
          filters,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Prediction Metric Distribution
     * @param {string} predictionHash
     * @param {PredictionDomain} predictionDomain
     * @param {string} projectHash
     * @param {string} group
     * @param {PredictionMetricDistributionProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainDistributionGetBucketsEnum} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async predictionMetricDistributionProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainDistributionGet(
      predictionHash: string,
      predictionDomain: PredictionDomain,
      projectHash: string,
      group: string,
      buckets?: PredictionMetricDistributionProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainDistributionGetBucketsEnum,
      filters?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<QueryDistribution>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.predictionMetricDistributionProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainDistributionGet(
          predictionHash,
          predictionDomain,
          projectHash,
          group,
          buckets,
          filters,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Prediction Metric Performance
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {number} iou
     * @param {string} metricName
     * @param {PredictionMetricPerformanceProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGetBucketsEnum} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async predictionMetricPerformanceProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGet(
      projectHash: string,
      predictionHash: string,
      iou: number,
      metricName: string,
      buckets?: PredictionMetricPerformanceProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGetBucketsEnum,
      filters?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<QueryMetricPerformance>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.predictionMetricPerformanceProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGet(
          projectHash,
          predictionHash,
          iou,
          metricName,
          buckets,
          filters,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Prediction Metric Scatter
     * @param {string} predictionHash
     * @param {PredictionDomain} predictionDomain
     * @param {string} projectHash
     * @param {string} xMetric
     * @param {string} yMetric
     * @param {PredictionMetricScatterProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainScatterGetBucketsEnum} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async predictionMetricScatterProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainScatterGet(
      predictionHash: string,
      predictionDomain: PredictionDomain,
      projectHash: string,
      xMetric: string,
      yMetric: string,
      buckets?: PredictionMetricScatterProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainScatterGetBucketsEnum,
      filters?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryScatter>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.predictionMetricScatterProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainScatterGet(
          predictionHash,
          predictionDomain,
          projectHash,
          xMetric,
          yMetric,
          buckets,
          filters,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Prediction Search
     * @param {string} predictionHash
     * @param {string} projectHash
     * @param {number} iou
     * @param {string} metricFilters
     * @param {string} enumFilters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async predictionSearchProjectsV2ProjectHashPredictionsPredictionHashSearchGet(
      predictionHash: string,
      projectHash: string,
      iou: number,
      metricFilters: string,
      enumFilters: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.predictionSearchProjectsV2ProjectHashPredictionsPredictionHashSearchGet(
          predictionHash,
          projectHash,
          iou,
          metricFilters,
          enumFilters,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Project Item
     * @param {string} projectHash
     * @param {string} dataItem
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async projectItemProjectsV2ProjectHashItemDataItemGet(
      projectHash: string,
      dataItem: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectItem>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.projectItemProjectsV2ProjectHashItemDataItemGet(
          projectHash,
          dataItem,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Scatter 2D Data Metric
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} xMetric
     * @param {string} yMetric
     * @param {Scatter2dDataMetricProjectsV2ProjectHashAnalysisDomainScatterGetBucketsEnum} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async scatter2dDataMetricProjectsV2ProjectHashAnalysisDomainScatterGet(
      projectHash: string,
      domain: AnalysisDomain,
      xMetric: string,
      yMetric: string,
      buckets?: Scatter2dDataMetricProjectsV2ProjectHashAnalysisDomainScatterGetBucketsEnum,
      filters?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryScatter>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.scatter2dDataMetricProjectsV2ProjectHashAnalysisDomainScatterGet(
          projectHash,
          domain,
          xMetric,
          yMetric,
          buckets,
          filters,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Search Similarity
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} item
     * @param {SearchSimilarityProjectsV2ProjectHashAnalysisDomainSimilarityItemGetEmbeddingEnum} embedding
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchSimilarityProjectsV2ProjectHashAnalysisDomainSimilarityItemGet(
      projectHash: string,
      domain: AnalysisDomain,
      item: string,
      embedding: SearchSimilarityProjectsV2ProjectHashAnalysisDomainSimilarityItemGetEmbeddingEnum,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<SimilarityResult>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.searchSimilarityProjectsV2ProjectHashAnalysisDomainSimilarityItemGet(
          projectHash,
          domain,
          item,
          embedding,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Upload Project To Encord
     * @param {string} projectHash
     * @param {UploadProjectToEncordPostAction} uploadProjectToEncordPostAction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async uploadProjectToEncordProjectsV2ProjectHashActionsUploadToEncordPost(
      projectHash: string,
      uploadProjectToEncordPostAction: UploadProjectToEncordPostAction,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.uploadProjectToEncordProjectsV2ProjectHashActionsUploadToEncordPost(
          projectHash,
          uploadProjectToEncordPostAction,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * ProjectsV2Api - factory interface
 * @export
 */
export const ProjectsV2ApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ProjectsV2ApiFp(configuration);
  return {
    /**
     *
     * @summary Compare Metric Dissimilarity
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} compareProjectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    compareMetricDissimilarityProjectsV2ProjectHashAnalysisDomainProjectCompareMetricDissimilarityGet(
      projectHash: string,
      domain: AnalysisDomain,
      compareProjectHash: string,
      options?: any
    ): AxiosPromise<MetricDissimilarityResult> {
      return localVarFp
        .compareMetricDissimilarityProjectsV2ProjectHashAnalysisDomainProjectCompareMetricDissimilarityGet(
          projectHash,
          domain,
          compareProjectHash,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create Active Subset
     * @param {string} projectHash
     * @param {CreateProjectSubsetPostAction} createProjectSubsetPostAction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createActiveSubsetProjectsV2ProjectHashActionsCreateProjectSubsetPost(
      projectHash: string,
      createProjectSubsetPostAction: CreateProjectSubsetPostAction,
      options?: any
    ): AxiosPromise<any> {
      return localVarFp
        .createActiveSubsetProjectsV2ProjectHashActionsCreateProjectSubsetPost(
          projectHash,
          createProjectSubsetPostAction,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create Data Tag
     * @param {string} projectHash
     * @param {string} tagName
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDataTagProjectsV2ProjectHashCreateTagPost(
      projectHash: string,
      tagName: string,
      requestBody: Array<string>,
      options?: any
    ): AxiosPromise<any> {
      return localVarFp
        .createDataTagProjectsV2ProjectHashCreateTagPost(
          projectHash,
          tagName,
          requestBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Display Preview
     * @param {string} projectHash
     * @param {string} item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewProjectsV2ProjectHashPreviewItemGet(
      projectHash: string,
      item: string,
      options?: any
    ): AxiosPromise<any> {
      return localVarFp
        .displayPreviewProjectsV2ProjectHashPreviewItemGet(
          projectHash,
          item,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Display Raw File
     * @param {string} projectHash
     * @param {string} duHash
     * @param {number} frame
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayRawFileProjectsV2ProjectHashFilesDuHashFrameGet(
      projectHash: string,
      duHash: string,
      frame: number,
      options?: any
    ): AxiosPromise<any> {
      return localVarFp
        .displayRawFileProjectsV2ProjectHashFilesDuHashFrameGet(
          projectHash,
          duHash,
          frame,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get 2D Embedding Summary
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} reductionHash
     * @param {Get2dEmbeddingSummaryProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGetBucketsEnum} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get2dEmbeddingSummaryProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGet(
      projectHash: string,
      domain: AnalysisDomain,
      reductionHash: string,
      buckets?: Get2dEmbeddingSummaryProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGetBucketsEnum,
      filters?: string,
      options?: any
    ): AxiosPromise<Query2DEmbedding> {
      return localVarFp
        .get2dEmbeddingSummaryProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGet(
          projectHash,
          domain,
          reductionHash,
          buckets,
          filters,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get All Projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllProjectsProjectsV2Get(
      options?: any
    ): AxiosPromise<ProjectSearchResult> {
      return localVarFp
        .getAllProjectsProjectsV2Get(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Metric Distribution
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} group
     * @param {GetMetricDistributionProjectsV2ProjectHashAnalysisDomainDistributionGetBucketsEnum} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetricDistributionProjectsV2ProjectHashAnalysisDomainDistributionGet(
      projectHash: string,
      domain: AnalysisDomain,
      group: string,
      buckets?: GetMetricDistributionProjectsV2ProjectHashAnalysisDomainDistributionGetBucketsEnum,
      filters?: string,
      options?: any
    ): AxiosPromise<QueryDistribution> {
      return localVarFp
        .getMetricDistributionProjectsV2ProjectHashAnalysisDomainDistributionGet(
          projectHash,
          domain,
          group,
          buckets,
          filters,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Prediction Item
     * @param {string} predictionHash
     * @param {string} item
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPredictionItemProjectsV2ProjectHashPredictionsPredictionHashPreviewItemGet(
      predictionHash: string,
      item: string,
      projectHash: string,
      options?: any
    ): AxiosPromise<any> {
      return localVarFp
        .getPredictionItemProjectsV2ProjectHashPredictionsPredictionHashPreviewItemGet(
          predictionHash,
          item,
          projectHash,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Project Metadata
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectMetadataProjectsV2ProjectHashMetadataGet(
      projectHash: string,
      options?: any
    ): AxiosPromise<ProjectMetadata> {
      return localVarFp
        .getProjectMetadataProjectsV2ProjectHashMetadataGet(
          projectHash,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Project Prediction Summary
     * @param {string} predictionHash
     * @param {string} projectHash
     * @param {number} iou
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectPredictionSummaryProjectsV2ProjectHashPredictionsPredictionHashSummaryGet(
      predictionHash: string,
      projectHash: string,
      iou: number,
      filters?: string,
      options?: any
    ): AxiosPromise<PredictionSummaryResult> {
      return localVarFp
        .getProjectPredictionSummaryProjectsV2ProjectHashPredictionsPredictionHashSummaryGet(
          predictionHash,
          projectHash,
          iou,
          filters,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Project Summary
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectSummaryProjectsV2ProjectHashSummaryGet(
      projectHash: string,
      options?: any
    ): AxiosPromise<ProjectSummary> {
      return localVarFp
        .getProjectSummaryProjectsV2ProjectHashSummaryGet(projectHash, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary List Project Predictions
     * @param {string} projectHash
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {ListProjectPredictionsProjectsV2ProjectHashPredictionsGetOrderByEnum} [orderBy]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjectPredictionsProjectsV2ProjectHashPredictionsGet(
      projectHash: string,
      offset?: number,
      limit?: number,
      orderBy?: ListProjectPredictionsProjectsV2ProjectHashPredictionsGetOrderByEnum,
      options?: any
    ): AxiosPromise<ListProjectPredictionResult> {
      return localVarFp
        .listProjectPredictionsProjectsV2ProjectHashPredictionsGet(
          projectHash,
          offset,
          limit,
          orderBy,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary List Supported 2D Embedding Reductions
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSupported2dEmbeddingReductionsProjectsV2ProjectHashReductionsGet(
      projectHash: string,
      options?: any
    ): AxiosPromise<ProjectList2DEmbeddingReductionResult> {
      return localVarFp
        .listSupported2dEmbeddingReductionsProjectsV2ProjectHashReductionsGet(
          projectHash,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Metric Search
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} [orderBy]
     * @param {boolean} [desc]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metricSearchProjectsV2ProjectHashAnalysisDomainSearchGet(
      projectHash: string,
      domain: AnalysisDomain,
      orderBy?: string,
      desc?: boolean,
      offset?: number,
      limit?: number,
      filters?: string,
      options?: any
    ): AxiosPromise<AnalysisSearch> {
      return localVarFp
        .metricSearchProjectsV2ProjectHashAnalysisDomainSearchGet(
          projectHash,
          domain,
          orderBy,
          desc,
          offset,
          limit,
          filters,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Metric Summary
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metricSummaryProjectsV2ProjectHashAnalysisDomainSummaryGet(
      projectHash: string,
      domain: AnalysisDomain,
      filters?: string,
      options?: any
    ): AxiosPromise<QuerySummary> {
      return localVarFp
        .metricSummaryProjectsV2ProjectHashAnalysisDomainSummaryGet(
          projectHash,
          domain,
          filters,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Prediction Metric Distribution
     * @param {string} predictionHash
     * @param {PredictionDomain} predictionDomain
     * @param {string} projectHash
     * @param {string} group
     * @param {PredictionMetricDistributionProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainDistributionGetBucketsEnum} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    predictionMetricDistributionProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainDistributionGet(
      predictionHash: string,
      predictionDomain: PredictionDomain,
      projectHash: string,
      group: string,
      buckets?: PredictionMetricDistributionProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainDistributionGetBucketsEnum,
      filters?: string,
      options?: any
    ): AxiosPromise<QueryDistribution> {
      return localVarFp
        .predictionMetricDistributionProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainDistributionGet(
          predictionHash,
          predictionDomain,
          projectHash,
          group,
          buckets,
          filters,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Prediction Metric Performance
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {number} iou
     * @param {string} metricName
     * @param {PredictionMetricPerformanceProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGetBucketsEnum} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    predictionMetricPerformanceProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGet(
      projectHash: string,
      predictionHash: string,
      iou: number,
      metricName: string,
      buckets?: PredictionMetricPerformanceProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGetBucketsEnum,
      filters?: string,
      options?: any
    ): AxiosPromise<QueryMetricPerformance> {
      return localVarFp
        .predictionMetricPerformanceProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGet(
          projectHash,
          predictionHash,
          iou,
          metricName,
          buckets,
          filters,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Prediction Metric Scatter
     * @param {string} predictionHash
     * @param {PredictionDomain} predictionDomain
     * @param {string} projectHash
     * @param {string} xMetric
     * @param {string} yMetric
     * @param {PredictionMetricScatterProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainScatterGetBucketsEnum} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    predictionMetricScatterProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainScatterGet(
      predictionHash: string,
      predictionDomain: PredictionDomain,
      projectHash: string,
      xMetric: string,
      yMetric: string,
      buckets?: PredictionMetricScatterProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainScatterGetBucketsEnum,
      filters?: string,
      options?: any
    ): AxiosPromise<QueryScatter> {
      return localVarFp
        .predictionMetricScatterProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainScatterGet(
          predictionHash,
          predictionDomain,
          projectHash,
          xMetric,
          yMetric,
          buckets,
          filters,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Prediction Search
     * @param {string} predictionHash
     * @param {string} projectHash
     * @param {number} iou
     * @param {string} metricFilters
     * @param {string} enumFilters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    predictionSearchProjectsV2ProjectHashPredictionsPredictionHashSearchGet(
      predictionHash: string,
      projectHash: string,
      iou: number,
      metricFilters: string,
      enumFilters: string,
      options?: any
    ): AxiosPromise<Array<string>> {
      return localVarFp
        .predictionSearchProjectsV2ProjectHashPredictionsPredictionHashSearchGet(
          predictionHash,
          projectHash,
          iou,
          metricFilters,
          enumFilters,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Project Item
     * @param {string} projectHash
     * @param {string} dataItem
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectItemProjectsV2ProjectHashItemDataItemGet(
      projectHash: string,
      dataItem: string,
      options?: any
    ): AxiosPromise<ProjectItem> {
      return localVarFp
        .projectItemProjectsV2ProjectHashItemDataItemGet(
          projectHash,
          dataItem,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Scatter 2D Data Metric
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} xMetric
     * @param {string} yMetric
     * @param {Scatter2dDataMetricProjectsV2ProjectHashAnalysisDomainScatterGetBucketsEnum} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scatter2dDataMetricProjectsV2ProjectHashAnalysisDomainScatterGet(
      projectHash: string,
      domain: AnalysisDomain,
      xMetric: string,
      yMetric: string,
      buckets?: Scatter2dDataMetricProjectsV2ProjectHashAnalysisDomainScatterGetBucketsEnum,
      filters?: string,
      options?: any
    ): AxiosPromise<QueryScatter> {
      return localVarFp
        .scatter2dDataMetricProjectsV2ProjectHashAnalysisDomainScatterGet(
          projectHash,
          domain,
          xMetric,
          yMetric,
          buckets,
          filters,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Search Similarity
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} item
     * @param {SearchSimilarityProjectsV2ProjectHashAnalysisDomainSimilarityItemGetEmbeddingEnum} embedding
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSimilarityProjectsV2ProjectHashAnalysisDomainSimilarityItemGet(
      projectHash: string,
      domain: AnalysisDomain,
      item: string,
      embedding: SearchSimilarityProjectsV2ProjectHashAnalysisDomainSimilarityItemGetEmbeddingEnum,
      options?: any
    ): AxiosPromise<Array<SimilarityResult>> {
      return localVarFp
        .searchSimilarityProjectsV2ProjectHashAnalysisDomainSimilarityItemGet(
          projectHash,
          domain,
          item,
          embedding,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Upload Project To Encord
     * @param {string} projectHash
     * @param {UploadProjectToEncordPostAction} uploadProjectToEncordPostAction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadProjectToEncordProjectsV2ProjectHashActionsUploadToEncordPost(
      projectHash: string,
      uploadProjectToEncordPostAction: UploadProjectToEncordPostAction,
      options?: any
    ): AxiosPromise<any> {
      return localVarFp
        .uploadProjectToEncordProjectsV2ProjectHashActionsUploadToEncordPost(
          projectHash,
          uploadProjectToEncordPostAction,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ProjectsV2Api - object-oriented interface
 * @export
 * @class ProjectsV2Api
 * @extends {BaseAPI}
 */
export class ProjectsV2Api extends BaseAPI {
  /**
   *
   * @summary Compare Metric Dissimilarity
   * @param {string} projectHash
   * @param {AnalysisDomain} domain
   * @param {string} compareProjectHash
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsV2Api
   */
  public compareMetricDissimilarityProjectsV2ProjectHashAnalysisDomainProjectCompareMetricDissimilarityGet(
    projectHash: string,
    domain: AnalysisDomain,
    compareProjectHash: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectsV2ApiFp(this.configuration)
      .compareMetricDissimilarityProjectsV2ProjectHashAnalysisDomainProjectCompareMetricDissimilarityGet(
        projectHash,
        domain,
        compareProjectHash,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create Active Subset
   * @param {string} projectHash
   * @param {CreateProjectSubsetPostAction} createProjectSubsetPostAction
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsV2Api
   */
  public createActiveSubsetProjectsV2ProjectHashActionsCreateProjectSubsetPost(
    projectHash: string,
    createProjectSubsetPostAction: CreateProjectSubsetPostAction,
    options?: AxiosRequestConfig
  ) {
    return ProjectsV2ApiFp(this.configuration)
      .createActiveSubsetProjectsV2ProjectHashActionsCreateProjectSubsetPost(
        projectHash,
        createProjectSubsetPostAction,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create Data Tag
   * @param {string} projectHash
   * @param {string} tagName
   * @param {Array<string>} requestBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsV2Api
   */
  public createDataTagProjectsV2ProjectHashCreateTagPost(
    projectHash: string,
    tagName: string,
    requestBody: Array<string>,
    options?: AxiosRequestConfig
  ) {
    return ProjectsV2ApiFp(this.configuration)
      .createDataTagProjectsV2ProjectHashCreateTagPost(
        projectHash,
        tagName,
        requestBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Display Preview
   * @param {string} projectHash
   * @param {string} item
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsV2Api
   */
  public displayPreviewProjectsV2ProjectHashPreviewItemGet(
    projectHash: string,
    item: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectsV2ApiFp(this.configuration)
      .displayPreviewProjectsV2ProjectHashPreviewItemGet(
        projectHash,
        item,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Display Raw File
   * @param {string} projectHash
   * @param {string} duHash
   * @param {number} frame
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsV2Api
   */
  public displayRawFileProjectsV2ProjectHashFilesDuHashFrameGet(
    projectHash: string,
    duHash: string,
    frame: number,
    options?: AxiosRequestConfig
  ) {
    return ProjectsV2ApiFp(this.configuration)
      .displayRawFileProjectsV2ProjectHashFilesDuHashFrameGet(
        projectHash,
        duHash,
        frame,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get 2D Embedding Summary
   * @param {string} projectHash
   * @param {AnalysisDomain} domain
   * @param {string} reductionHash
   * @param {Get2dEmbeddingSummaryProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGetBucketsEnum} [buckets]
   * @param {string} [filters] Search Filters
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsV2Api
   */
  public get2dEmbeddingSummaryProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGet(
    projectHash: string,
    domain: AnalysisDomain,
    reductionHash: string,
    buckets?: Get2dEmbeddingSummaryProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGetBucketsEnum,
    filters?: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectsV2ApiFp(this.configuration)
      .get2dEmbeddingSummaryProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGet(
        projectHash,
        domain,
        reductionHash,
        buckets,
        filters,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get All Projects
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsV2Api
   */
  public getAllProjectsProjectsV2Get(options?: AxiosRequestConfig) {
    return ProjectsV2ApiFp(this.configuration)
      .getAllProjectsProjectsV2Get(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get Metric Distribution
   * @param {string} projectHash
   * @param {AnalysisDomain} domain
   * @param {string} group
   * @param {GetMetricDistributionProjectsV2ProjectHashAnalysisDomainDistributionGetBucketsEnum} [buckets]
   * @param {string} [filters] Search Filters
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsV2Api
   */
  public getMetricDistributionProjectsV2ProjectHashAnalysisDomainDistributionGet(
    projectHash: string,
    domain: AnalysisDomain,
    group: string,
    buckets?: GetMetricDistributionProjectsV2ProjectHashAnalysisDomainDistributionGetBucketsEnum,
    filters?: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectsV2ApiFp(this.configuration)
      .getMetricDistributionProjectsV2ProjectHashAnalysisDomainDistributionGet(
        projectHash,
        domain,
        group,
        buckets,
        filters,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get Prediction Item
   * @param {string} predictionHash
   * @param {string} item
   * @param {string} projectHash
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsV2Api
   */
  public getPredictionItemProjectsV2ProjectHashPredictionsPredictionHashPreviewItemGet(
    predictionHash: string,
    item: string,
    projectHash: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectsV2ApiFp(this.configuration)
      .getPredictionItemProjectsV2ProjectHashPredictionsPredictionHashPreviewItemGet(
        predictionHash,
        item,
        projectHash,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get Project Metadata
   * @param {string} projectHash
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsV2Api
   */
  public getProjectMetadataProjectsV2ProjectHashMetadataGet(
    projectHash: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectsV2ApiFp(this.configuration)
      .getProjectMetadataProjectsV2ProjectHashMetadataGet(projectHash, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get Project Prediction Summary
   * @param {string} predictionHash
   * @param {string} projectHash
   * @param {number} iou
   * @param {string} [filters] Search Filters
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsV2Api
   */
  public getProjectPredictionSummaryProjectsV2ProjectHashPredictionsPredictionHashSummaryGet(
    predictionHash: string,
    projectHash: string,
    iou: number,
    filters?: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectsV2ApiFp(this.configuration)
      .getProjectPredictionSummaryProjectsV2ProjectHashPredictionsPredictionHashSummaryGet(
        predictionHash,
        projectHash,
        iou,
        filters,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get Project Summary
   * @param {string} projectHash
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsV2Api
   */
  public getProjectSummaryProjectsV2ProjectHashSummaryGet(
    projectHash: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectsV2ApiFp(this.configuration)
      .getProjectSummaryProjectsV2ProjectHashSummaryGet(projectHash, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary List Project Predictions
   * @param {string} projectHash
   * @param {number} [offset]
   * @param {number} [limit]
   * @param {ListProjectPredictionsProjectsV2ProjectHashPredictionsGetOrderByEnum} [orderBy]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsV2Api
   */
  public listProjectPredictionsProjectsV2ProjectHashPredictionsGet(
    projectHash: string,
    offset?: number,
    limit?: number,
    orderBy?: ListProjectPredictionsProjectsV2ProjectHashPredictionsGetOrderByEnum,
    options?: AxiosRequestConfig
  ) {
    return ProjectsV2ApiFp(this.configuration)
      .listProjectPredictionsProjectsV2ProjectHashPredictionsGet(
        projectHash,
        offset,
        limit,
        orderBy,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary List Supported 2D Embedding Reductions
   * @param {string} projectHash
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsV2Api
   */
  public listSupported2dEmbeddingReductionsProjectsV2ProjectHashReductionsGet(
    projectHash: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectsV2ApiFp(this.configuration)
      .listSupported2dEmbeddingReductionsProjectsV2ProjectHashReductionsGet(
        projectHash,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Metric Search
   * @param {string} projectHash
   * @param {AnalysisDomain} domain
   * @param {string} [orderBy]
   * @param {boolean} [desc]
   * @param {number} [offset]
   * @param {number} [limit]
   * @param {string} [filters] Search Filters
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsV2Api
   */
  public metricSearchProjectsV2ProjectHashAnalysisDomainSearchGet(
    projectHash: string,
    domain: AnalysisDomain,
    orderBy?: string,
    desc?: boolean,
    offset?: number,
    limit?: number,
    filters?: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectsV2ApiFp(this.configuration)
      .metricSearchProjectsV2ProjectHashAnalysisDomainSearchGet(
        projectHash,
        domain,
        orderBy,
        desc,
        offset,
        limit,
        filters,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Metric Summary
   * @param {string} projectHash
   * @param {AnalysisDomain} domain
   * @param {string} [filters] Search Filters
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsV2Api
   */
  public metricSummaryProjectsV2ProjectHashAnalysisDomainSummaryGet(
    projectHash: string,
    domain: AnalysisDomain,
    filters?: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectsV2ApiFp(this.configuration)
      .metricSummaryProjectsV2ProjectHashAnalysisDomainSummaryGet(
        projectHash,
        domain,
        filters,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Prediction Metric Distribution
   * @param {string} predictionHash
   * @param {PredictionDomain} predictionDomain
   * @param {string} projectHash
   * @param {string} group
   * @param {PredictionMetricDistributionProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainDistributionGetBucketsEnum} [buckets]
   * @param {string} [filters] Search Filters
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsV2Api
   */
  public predictionMetricDistributionProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainDistributionGet(
    predictionHash: string,
    predictionDomain: PredictionDomain,
    projectHash: string,
    group: string,
    buckets?: PredictionMetricDistributionProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainDistributionGetBucketsEnum,
    filters?: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectsV2ApiFp(this.configuration)
      .predictionMetricDistributionProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainDistributionGet(
        predictionHash,
        predictionDomain,
        projectHash,
        group,
        buckets,
        filters,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Prediction Metric Performance
   * @param {string} projectHash
   * @param {string} predictionHash
   * @param {number} iou
   * @param {string} metricName
   * @param {PredictionMetricPerformanceProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGetBucketsEnum} [buckets]
   * @param {string} [filters] Search Filters
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsV2Api
   */
  public predictionMetricPerformanceProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGet(
    projectHash: string,
    predictionHash: string,
    iou: number,
    metricName: string,
    buckets?: PredictionMetricPerformanceProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGetBucketsEnum,
    filters?: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectsV2ApiFp(this.configuration)
      .predictionMetricPerformanceProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGet(
        projectHash,
        predictionHash,
        iou,
        metricName,
        buckets,
        filters,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Prediction Metric Scatter
   * @param {string} predictionHash
   * @param {PredictionDomain} predictionDomain
   * @param {string} projectHash
   * @param {string} xMetric
   * @param {string} yMetric
   * @param {PredictionMetricScatterProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainScatterGetBucketsEnum} [buckets]
   * @param {string} [filters] Search Filters
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsV2Api
   */
  public predictionMetricScatterProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainScatterGet(
    predictionHash: string,
    predictionDomain: PredictionDomain,
    projectHash: string,
    xMetric: string,
    yMetric: string,
    buckets?: PredictionMetricScatterProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainScatterGetBucketsEnum,
    filters?: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectsV2ApiFp(this.configuration)
      .predictionMetricScatterProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainScatterGet(
        predictionHash,
        predictionDomain,
        projectHash,
        xMetric,
        yMetric,
        buckets,
        filters,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Prediction Search
   * @param {string} predictionHash
   * @param {string} projectHash
   * @param {number} iou
   * @param {string} metricFilters
   * @param {string} enumFilters
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsV2Api
   */
  public predictionSearchProjectsV2ProjectHashPredictionsPredictionHashSearchGet(
    predictionHash: string,
    projectHash: string,
    iou: number,
    metricFilters: string,
    enumFilters: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectsV2ApiFp(this.configuration)
      .predictionSearchProjectsV2ProjectHashPredictionsPredictionHashSearchGet(
        predictionHash,
        projectHash,
        iou,
        metricFilters,
        enumFilters,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Project Item
   * @param {string} projectHash
   * @param {string} dataItem
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsV2Api
   */
  public projectItemProjectsV2ProjectHashItemDataItemGet(
    projectHash: string,
    dataItem: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectsV2ApiFp(this.configuration)
      .projectItemProjectsV2ProjectHashItemDataItemGet(
        projectHash,
        dataItem,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Scatter 2D Data Metric
   * @param {string} projectHash
   * @param {AnalysisDomain} domain
   * @param {string} xMetric
   * @param {string} yMetric
   * @param {Scatter2dDataMetricProjectsV2ProjectHashAnalysisDomainScatterGetBucketsEnum} [buckets]
   * @param {string} [filters] Search Filters
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsV2Api
   */
  public scatter2dDataMetricProjectsV2ProjectHashAnalysisDomainScatterGet(
    projectHash: string,
    domain: AnalysisDomain,
    xMetric: string,
    yMetric: string,
    buckets?: Scatter2dDataMetricProjectsV2ProjectHashAnalysisDomainScatterGetBucketsEnum,
    filters?: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectsV2ApiFp(this.configuration)
      .scatter2dDataMetricProjectsV2ProjectHashAnalysisDomainScatterGet(
        projectHash,
        domain,
        xMetric,
        yMetric,
        buckets,
        filters,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Search Similarity
   * @param {string} projectHash
   * @param {AnalysisDomain} domain
   * @param {string} item
   * @param {SearchSimilarityProjectsV2ProjectHashAnalysisDomainSimilarityItemGetEmbeddingEnum} embedding
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsV2Api
   */
  public searchSimilarityProjectsV2ProjectHashAnalysisDomainSimilarityItemGet(
    projectHash: string,
    domain: AnalysisDomain,
    item: string,
    embedding: SearchSimilarityProjectsV2ProjectHashAnalysisDomainSimilarityItemGetEmbeddingEnum,
    options?: AxiosRequestConfig
  ) {
    return ProjectsV2ApiFp(this.configuration)
      .searchSimilarityProjectsV2ProjectHashAnalysisDomainSimilarityItemGet(
        projectHash,
        domain,
        item,
        embedding,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Upload Project To Encord
   * @param {string} projectHash
   * @param {UploadProjectToEncordPostAction} uploadProjectToEncordPostAction
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsV2Api
   */
  public uploadProjectToEncordProjectsV2ProjectHashActionsUploadToEncordPost(
    projectHash: string,
    uploadProjectToEncordPostAction: UploadProjectToEncordPostAction,
    options?: AxiosRequestConfig
  ) {
    return ProjectsV2ApiFp(this.configuration)
      .uploadProjectToEncordProjectsV2ProjectHashActionsUploadToEncordPost(
        projectHash,
        uploadProjectToEncordPostAction,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * @export
 */
export const Get2dEmbeddingSummaryProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGetBucketsEnum =
  {
    _10: "10",
    _100: "100",
    _1000: "1000",
  } as const;
export type Get2dEmbeddingSummaryProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGetBucketsEnum =
  (typeof Get2dEmbeddingSummaryProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGetBucketsEnum)[keyof typeof Get2dEmbeddingSummaryProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGetBucketsEnum];
/**
 * @export
 */
export const GetMetricDistributionProjectsV2ProjectHashAnalysisDomainDistributionGetBucketsEnum =
  {
    _10: "10",
    _100: "100",
    _1000: "1000",
  } as const;
export type GetMetricDistributionProjectsV2ProjectHashAnalysisDomainDistributionGetBucketsEnum =
  (typeof GetMetricDistributionProjectsV2ProjectHashAnalysisDomainDistributionGetBucketsEnum)[keyof typeof GetMetricDistributionProjectsV2ProjectHashAnalysisDomainDistributionGetBucketsEnum];
/**
 * @export
 */
export const ListProjectPredictionsProjectsV2ProjectHashPredictionsGetOrderByEnum =
  {
    Empty: "",
  } as const;
export type ListProjectPredictionsProjectsV2ProjectHashPredictionsGetOrderByEnum =
  (typeof ListProjectPredictionsProjectsV2ProjectHashPredictionsGetOrderByEnum)[keyof typeof ListProjectPredictionsProjectsV2ProjectHashPredictionsGetOrderByEnum];
/**
 * @export
 */
export const PredictionMetricDistributionProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainDistributionGetBucketsEnum =
  {
    _10: "10",
    _100: "100",
    _1000: "1000",
  } as const;
export type PredictionMetricDistributionProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainDistributionGetBucketsEnum =
  (typeof PredictionMetricDistributionProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainDistributionGetBucketsEnum)[keyof typeof PredictionMetricDistributionProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainDistributionGetBucketsEnum];
/**
 * @export
 */
export const PredictionMetricPerformanceProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGetBucketsEnum =
  {
    _10: "10",
    _100: "100",
    _1000: "1000",
  } as const;
export type PredictionMetricPerformanceProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGetBucketsEnum =
  (typeof PredictionMetricPerformanceProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGetBucketsEnum)[keyof typeof PredictionMetricPerformanceProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGetBucketsEnum];
/**
 * @export
 */
export const PredictionMetricScatterProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainScatterGetBucketsEnum =
  {
    _10: "10",
    _100: "100",
    _1000: "1000",
  } as const;
export type PredictionMetricScatterProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainScatterGetBucketsEnum =
  (typeof PredictionMetricScatterProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainScatterGetBucketsEnum)[keyof typeof PredictionMetricScatterProjectsV2ProjectHashPredictionsPredictionHashAnalyticsPredictionDomainScatterGetBucketsEnum];
/**
 * @export
 */
export const Scatter2dDataMetricProjectsV2ProjectHashAnalysisDomainScatterGetBucketsEnum =
  {
    _10: "10",
    _100: "100",
    _1000: "1000",
  } as const;
export type Scatter2dDataMetricProjectsV2ProjectHashAnalysisDomainScatterGetBucketsEnum =
  (typeof Scatter2dDataMetricProjectsV2ProjectHashAnalysisDomainScatterGetBucketsEnum)[keyof typeof Scatter2dDataMetricProjectsV2ProjectHashAnalysisDomainScatterGetBucketsEnum];
/**
 * @export
 */
export const SearchSimilarityProjectsV2ProjectHashAnalysisDomainSimilarityItemGetEmbeddingEnum =
  {
    EmbeddingClip: "embedding_clip",
  } as const;
export type SearchSimilarityProjectsV2ProjectHashAnalysisDomainSimilarityItemGetEmbeddingEnum =
  (typeof SearchSimilarityProjectsV2ProjectHashAnalysisDomainSimilarityItemGetEmbeddingEnum)[keyof typeof SearchSimilarityProjectsV2ProjectHashAnalysisDomainSimilarityItemGetEmbeddingEnum];
