# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

import datetime
import decimal
import sys

# global imports for type checking
from builtins import bool as _bool
from builtins import float as _float
from builtins import int as _int
from builtins import str as _str
from typing import (
    TYPE_CHECKING,
    Any,
    Callable,
    ClassVar,
    Dict,
    Generic,
    Iterable,
    Iterator,
    List,
    Mapping,
    NoReturn,
    Optional,
    Sequence,
    Set,
    Tuple,
    Type,
    TypeVar,
    Union,
    cast,
    overload,
)

from typing_extensions import Literal, TypedDict

LiteralString = str
# -- template models.py.jinja --
from pydantic import BaseConfig, BaseModel

from . import actions, fields
from ._types import FuncType
from .builder import serialize_base64

_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class _Config(BaseConfig):
    use_enum_values: bool = True
    arbitrary_types_allowed: bool = True
    allow_population_by_field_name: bool = True
    json_encoders: Dict[Any, FuncType] = {
        fields.Base64: serialize_base64,
    }


class _PrismaModel(BaseModel):
    Config = _Config

    # TODO: ensure this is required by subclasses
    __prisma_model__: ClassVar[str]


class BaseTag(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Tag']] = 'Tag'

    @classmethod
    def prisma(cls: Type[_PrismaModelT]) -> 'actions.TagActions[_PrismaModelT]':
        from .client import get_client

        return actions.TagActions[_PrismaModelT](get_client(), cls)


class BaseItemTag(_PrismaModel):
    __prisma_model__: ClassVar[Literal['ItemTag']] = 'ItemTag'

    @classmethod
    def prisma(cls: Type[_PrismaModelT]) -> 'actions.ItemTagActions[_PrismaModelT]':
        from .client import get_client

        return actions.ItemTagActions[_PrismaModelT](get_client(), cls)


class BaseDataUnit(_PrismaModel):
    __prisma_model__: ClassVar[Literal['DataUnit']] = 'DataUnit'

    @classmethod
    def prisma(cls: Type[_PrismaModelT]) -> 'actions.DataUnitActions[_PrismaModelT]':
        from .client import get_client

        return actions.DataUnitActions[_PrismaModelT](get_client(), cls)


class BaseLabelRow(_PrismaModel):
    __prisma_model__: ClassVar[Literal['LabelRow']] = 'LabelRow'

    @classmethod
    def prisma(cls: Type[_PrismaModelT]) -> 'actions.LabelRowActions[_PrismaModelT]':
        from .client import get_client

        return actions.LabelRowActions[_PrismaModelT](get_client(), cls)
