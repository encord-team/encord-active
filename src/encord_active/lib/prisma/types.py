# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = Literal['default', 'insensitive']
SortOrder = Literal['asc', 'desc']


class _DatasourceOverrideOptional(TypedDict, total=False):
    env: str
    name: str


class DatasourceOverride(_DatasourceOverrideOptional):
    url: str


# NOTE: we don't support some options as their type hints are not publicly exposed
# https://github.com/encode/httpx/discussions/1977
class HttpConfig(TypedDict, total=False):
    app: Callable[[Mapping[str, Any], Any], Any]
    http1: bool
    http2: bool
    limits: httpx.Limits
    timeout: Union[None, float, httpx.Timeout]
    trust_env: bool
    max_redirects: int


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
            },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
            },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
            },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
            },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# Tag types

class TagOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Tag create method"""
    id: _int
    ItemTag: 'ItemTagCreateManyNestedWithoutRelationsInput'


class TagCreateInput(TagOptionalCreateInput):
    """Required arguments to the Tag create method"""
    name: _str
    scope: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class TagOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Tag create method, without relations"""
    id: _int


class TagCreateWithoutRelationsInput(TagOptionalCreateWithoutRelationsInput):
    """Required arguments to the Tag create method, without relations"""
    name: _str
    scope: _str


class TagCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'TagCreateWithoutRelationsInput'
    connect: 'TagWhereUniqueInput'


class TagCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['TagCreateWithoutRelationsInput', List['TagCreateWithoutRelationsInput']]
    connect: Union['TagWhereUniqueInput', List['TagWhereUniqueInput']]


_TagWhereUnique_id_Input = TypedDict(
    '_TagWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_TagCompoundname_scopeKeyInner = TypedDict(
    '_TagCompoundname_scopeKeyInner',
    {
        'name': '_str',
        'scope': '_str',
    },
    total=True
)

_TagCompoundname_scopeKey = TypedDict(
    '_TagCompoundname_scopeKey',
    {
        'name_scope': '_TagCompoundname_scopeKeyInner',
    },
    total=True
)

TagWhereUniqueInput = Union[
    '_TagWhereUnique_id_Input',
    '_TagCompoundname_scopeKey',
]


class TagUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    scope: _str
    ItemTag: 'ItemTagUpdateManyWithoutRelationsInput'


class TagUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str
    scope: _str


class TagUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['TagCreateWithoutRelationsInput']
    connect: List['TagWhereUniqueInput']
    set: List['TagWhereUniqueInput']
    disconnect: List['TagWhereUniqueInput']
    delete: List['TagWhereUniqueInput']

    # TODO
    # update: List['TagUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['TagUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['TagScalarWhereInput']
    # upsert: List['TagUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['TagCreateOrConnectWithoutRelationsInput']


class TagUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'TagCreateWithoutRelationsInput'
    connect: 'TagWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'TagUpdateInput'
    # upsert: 'TagUpsertWithoutRelationsInput'
    # connectOrCreate: 'TagCreateOrConnectWithoutRelationsInput'


class TagUpsertInput(TypedDict):
    create: 'TagCreateInput'
    update: 'TagUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Tag_id_OrderByInput = TypedDict(
    '_Tag_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Tag_name_OrderByInput = TypedDict(
    '_Tag_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Tag_scope_OrderByInput = TypedDict(
    '_Tag_scope_OrderByInput',
    {
        'scope': 'SortOrder',
    },
    total=True
)

TagOrderByInput = Union[
    '_Tag_id_OrderByInput',
    '_Tag_name_OrderByInput',
    '_Tag_scope_OrderByInput',
]



# recursive Tag types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

TagRelationFilter = TypedDict(
    'TagRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class TagListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class TagInclude(TypedDict, total=False):
    """Tag relational arguments"""
    ItemTag: Union[bool, 'FindManyItemTagArgsFromTag']


    

class TagIncludeFromTag(TypedDict, total=False):
    """Relational arguments for Tag"""
    ItemTag: Union[bool, 'FindManyItemTagArgsFromTagRecursive1']


class TagIncludeFromTagRecursive1(TypedDict, total=False):
    """Relational arguments for Tag"""
    ItemTag: Union[bool, 'FindManyItemTagArgsFromTagRecursive2']


class TagIncludeFromTagRecursive2(TypedDict, total=False):
    """Relational arguments for Tag"""
    ItemTag: Union[bool, 'FindManyItemTagArgsFromTagRecursive3']


class TagIncludeFromTagRecursive3(TypedDict, total=False):
    """Relational arguments for Tag"""
    ItemTag: Union[bool, 'FindManyItemTagArgsFromTagRecursive4']


class TagIncludeFromTagRecursive4(TypedDict, total=False):
    """Relational arguments for Tag"""

    

class TagArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'TagIncludeFromTagRecursive1'


class TagArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'TagIncludeFromTagRecursive2'


class TagArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'TagIncludeFromTagRecursive3'


class TagArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'TagIncludeFromTagRecursive4'


class TagArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    
    

class FindManyTagArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive1'


class FindManyTagArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive2'


class FindManyTagArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive3'


class FindManyTagArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive4'


class FindManyTagArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    
    

class ItemTagIncludeFromTag(TypedDict, total=False):
    """Relational arguments for Tag"""
    tag: Union[bool, 'TagArgsFromTagRecursive1']


class ItemTagIncludeFromTagRecursive1(TypedDict, total=False):
    """Relational arguments for Tag"""
    tag: Union[bool, 'TagArgsFromTagRecursive2']


class ItemTagIncludeFromTagRecursive2(TypedDict, total=False):
    """Relational arguments for Tag"""
    tag: Union[bool, 'TagArgsFromTagRecursive3']


class ItemTagIncludeFromTagRecursive3(TypedDict, total=False):
    """Relational arguments for Tag"""
    tag: Union[bool, 'TagArgsFromTagRecursive4']


class ItemTagIncludeFromTagRecursive4(TypedDict, total=False):
    """Relational arguments for Tag"""

    

class ItemTagArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'ItemTagIncludeFromItemTagRecursive1'


class ItemTagArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'ItemTagIncludeFromItemTagRecursive2'


class ItemTagArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'ItemTagIncludeFromItemTagRecursive3'


class ItemTagArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'ItemTagIncludeFromItemTagRecursive4'


class ItemTagArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    
    

class FindManyItemTagArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['ItemTagOrderByInput', List['ItemTagOrderByInput']]
    where: 'ItemTagWhereInput'
    cursor: 'ItemTagWhereUniqueInput'
    distinct: List['ItemTagScalarFieldKeys']
    include: 'ItemTagIncludeFromItemTagRecursive1'


class FindManyItemTagArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['ItemTagOrderByInput', List['ItemTagOrderByInput']]
    where: 'ItemTagWhereInput'
    cursor: 'ItemTagWhereUniqueInput'
    distinct: List['ItemTagScalarFieldKeys']
    include: 'ItemTagIncludeFromItemTagRecursive2'


class FindManyItemTagArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['ItemTagOrderByInput', List['ItemTagOrderByInput']]
    where: 'ItemTagWhereInput'
    cursor: 'ItemTagWhereUniqueInput'
    distinct: List['ItemTagScalarFieldKeys']
    include: 'ItemTagIncludeFromItemTagRecursive3'


class FindManyItemTagArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['ItemTagOrderByInput', List['ItemTagOrderByInput']]
    where: 'ItemTagWhereInput'
    cursor: 'ItemTagWhereUniqueInput'
    distinct: List['ItemTagScalarFieldKeys']
    include: 'ItemTagIncludeFromItemTagRecursive4'


class FindManyItemTagArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['ItemTagOrderByInput', List['ItemTagOrderByInput']]
    where: 'ItemTagWhereInput'
    cursor: 'ItemTagWhereUniqueInput'
    distinct: List['ItemTagScalarFieldKeys']
    
    

class DataUnitIncludeFromTag(TypedDict, total=False):
    """Relational arguments for Tag"""
    label_row: Union[bool, 'LabelRowArgsFromTagRecursive1']


class DataUnitIncludeFromTagRecursive1(TypedDict, total=False):
    """Relational arguments for Tag"""
    label_row: Union[bool, 'LabelRowArgsFromTagRecursive2']


class DataUnitIncludeFromTagRecursive2(TypedDict, total=False):
    """Relational arguments for Tag"""
    label_row: Union[bool, 'LabelRowArgsFromTagRecursive3']


class DataUnitIncludeFromTagRecursive3(TypedDict, total=False):
    """Relational arguments for Tag"""
    label_row: Union[bool, 'LabelRowArgsFromTagRecursive4']


class DataUnitIncludeFromTagRecursive4(TypedDict, total=False):
    """Relational arguments for Tag"""

    

class DataUnitArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'DataUnitIncludeFromDataUnitRecursive1'


class DataUnitArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'DataUnitIncludeFromDataUnitRecursive2'


class DataUnitArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'DataUnitIncludeFromDataUnitRecursive3'


class DataUnitArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'DataUnitIncludeFromDataUnitRecursive4'


class DataUnitArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    
    

class FindManyDataUnitArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['DataUnitOrderByInput', List['DataUnitOrderByInput']]
    where: 'DataUnitWhereInput'
    cursor: 'DataUnitWhereUniqueInput'
    distinct: List['DataUnitScalarFieldKeys']
    include: 'DataUnitIncludeFromDataUnitRecursive1'


class FindManyDataUnitArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['DataUnitOrderByInput', List['DataUnitOrderByInput']]
    where: 'DataUnitWhereInput'
    cursor: 'DataUnitWhereUniqueInput'
    distinct: List['DataUnitScalarFieldKeys']
    include: 'DataUnitIncludeFromDataUnitRecursive2'


class FindManyDataUnitArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['DataUnitOrderByInput', List['DataUnitOrderByInput']]
    where: 'DataUnitWhereInput'
    cursor: 'DataUnitWhereUniqueInput'
    distinct: List['DataUnitScalarFieldKeys']
    include: 'DataUnitIncludeFromDataUnitRecursive3'


class FindManyDataUnitArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['DataUnitOrderByInput', List['DataUnitOrderByInput']]
    where: 'DataUnitWhereInput'
    cursor: 'DataUnitWhereUniqueInput'
    distinct: List['DataUnitScalarFieldKeys']
    include: 'DataUnitIncludeFromDataUnitRecursive4'


class FindManyDataUnitArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['DataUnitOrderByInput', List['DataUnitOrderByInput']]
    where: 'DataUnitWhereInput'
    cursor: 'DataUnitWhereUniqueInput'
    distinct: List['DataUnitScalarFieldKeys']
    
    

class LabelRowIncludeFromTag(TypedDict, total=False):
    """Relational arguments for Tag"""
    data_units: Union[bool, 'FindManyDataUnitArgsFromTagRecursive1']


class LabelRowIncludeFromTagRecursive1(TypedDict, total=False):
    """Relational arguments for Tag"""
    data_units: Union[bool, 'FindManyDataUnitArgsFromTagRecursive2']


class LabelRowIncludeFromTagRecursive2(TypedDict, total=False):
    """Relational arguments for Tag"""
    data_units: Union[bool, 'FindManyDataUnitArgsFromTagRecursive3']


class LabelRowIncludeFromTagRecursive3(TypedDict, total=False):
    """Relational arguments for Tag"""
    data_units: Union[bool, 'FindManyDataUnitArgsFromTagRecursive4']


class LabelRowIncludeFromTagRecursive4(TypedDict, total=False):
    """Relational arguments for Tag"""

    

class LabelRowArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'LabelRowIncludeFromLabelRowRecursive1'


class LabelRowArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'LabelRowIncludeFromLabelRowRecursive2'


class LabelRowArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'LabelRowIncludeFromLabelRowRecursive3'


class LabelRowArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'LabelRowIncludeFromLabelRowRecursive4'


class LabelRowArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    
    

class FindManyLabelRowArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['LabelRowOrderByInput', List['LabelRowOrderByInput']]
    where: 'LabelRowWhereInput'
    cursor: 'LabelRowWhereUniqueInput'
    distinct: List['LabelRowScalarFieldKeys']
    include: 'LabelRowIncludeFromLabelRowRecursive1'


class FindManyLabelRowArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['LabelRowOrderByInput', List['LabelRowOrderByInput']]
    where: 'LabelRowWhereInput'
    cursor: 'LabelRowWhereUniqueInput'
    distinct: List['LabelRowScalarFieldKeys']
    include: 'LabelRowIncludeFromLabelRowRecursive2'


class FindManyLabelRowArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['LabelRowOrderByInput', List['LabelRowOrderByInput']]
    where: 'LabelRowWhereInput'
    cursor: 'LabelRowWhereUniqueInput'
    distinct: List['LabelRowScalarFieldKeys']
    include: 'LabelRowIncludeFromLabelRowRecursive3'


class FindManyLabelRowArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['LabelRowOrderByInput', List['LabelRowOrderByInput']]
    where: 'LabelRowWhereInput'
    cursor: 'LabelRowWhereUniqueInput'
    distinct: List['LabelRowScalarFieldKeys']
    include: 'LabelRowIncludeFromLabelRowRecursive4'


class FindManyLabelRowArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['LabelRowOrderByInput', List['LabelRowOrderByInput']]
    where: 'LabelRowWhereInput'
    cursor: 'LabelRowWhereUniqueInput'
    distinct: List['LabelRowScalarFieldKeys']
    


FindManyTagArgs = FindManyTagArgsFromTag
FindFirstTagArgs = FindManyTagArgsFromTag


    

class TagWhereInput(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    scope: Union[_str, 'types.StringFilter']
    ItemTag: 'ItemTagListRelationFilter'

    # should be noted that AND and NOT should be Union['TagWhereInputRecursive1', List['TagWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['TagWhereInputRecursive1']
    OR: List['TagWhereInputRecursive1']
    NOT: List['TagWhereInputRecursive1']


class TagWhereInputRecursive1(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    scope: Union[_str, 'types.StringFilter']
    ItemTag: 'ItemTagListRelationFilter'

    # should be noted that AND and NOT should be Union['TagWhereInputRecursive2', List['TagWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['TagWhereInputRecursive2']
    OR: List['TagWhereInputRecursive2']
    NOT: List['TagWhereInputRecursive2']


class TagWhereInputRecursive2(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    scope: Union[_str, 'types.StringFilter']
    ItemTag: 'ItemTagListRelationFilter'

    # should be noted that AND and NOT should be Union['TagWhereInputRecursive3', List['TagWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['TagWhereInputRecursive3']
    OR: List['TagWhereInputRecursive3']
    NOT: List['TagWhereInputRecursive3']


class TagWhereInputRecursive3(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    scope: Union[_str, 'types.StringFilter']
    ItemTag: 'ItemTagListRelationFilter'

    # should be noted that AND and NOT should be Union['TagWhereInputRecursive4', List['TagWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['TagWhereInputRecursive4']
    OR: List['TagWhereInputRecursive4']
    NOT: List['TagWhereInputRecursive4']


class TagWhereInputRecursive4(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    scope: Union[_str, 'types.StringFilter']
    ItemTag: 'ItemTagListRelationFilter'



# aggregate Tag types


    

class TagScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['TagScalarWhereWithAggregatesInputRecursive1']
    OR: List['TagScalarWhereWithAggregatesInputRecursive1']
    NOT: List['TagScalarWhereWithAggregatesInputRecursive1']


class TagScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['TagScalarWhereWithAggregatesInputRecursive2']
    OR: List['TagScalarWhereWithAggregatesInputRecursive2']
    NOT: List['TagScalarWhereWithAggregatesInputRecursive2']


class TagScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['TagScalarWhereWithAggregatesInputRecursive3']
    OR: List['TagScalarWhereWithAggregatesInputRecursive3']
    NOT: List['TagScalarWhereWithAggregatesInputRecursive3']


class TagScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['TagScalarWhereWithAggregatesInputRecursive4']
    OR: List['TagScalarWhereWithAggregatesInputRecursive4']
    NOT: List['TagScalarWhereWithAggregatesInputRecursive4']


class TagScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']



class TagGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    scope: _str
    _sum: 'TagSumAggregateOutput'
    _avg: 'TagAvgAggregateOutput'
    _min: 'TagMinAggregateOutput'
    _max: 'TagMaxAggregateOutput'
    _count: 'TagCountAggregateOutput'


class TagAvgAggregateOutput(TypedDict, total=False):
    """Tag output for aggregating averages"""
    id: float


class TagSumAggregateOutput(TypedDict, total=False):
    """Tag output for aggregating sums"""
    id: _int


class TagScalarAggregateOutput(TypedDict, total=False):
    """Tag output including scalar fields"""
    id: _int
    name: _str
    scope: _str


TagMinAggregateOutput = TagScalarAggregateOutput
TagMaxAggregateOutput = TagScalarAggregateOutput


class TagMaxAggregateInput(TypedDict, total=False):
    """Tag input for aggregating by max"""
    id: bool
    name: bool
    scope: bool


class TagMinAggregateInput(TypedDict, total=False):
    """Tag input for aggregating by min"""
    id: bool
    name: bool
    scope: bool


class TagNumberAggregateInput(TypedDict, total=False):
    """Tag input for aggregating numbers"""
    id: bool


TagAvgAggregateInput = TagNumberAggregateInput
TagSumAggregateInput = TagNumberAggregateInput


TagCountAggregateInput = TypedDict(
    'TagCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'scope': bool,
        '_all': bool,
    },
    total=False,
)

TagCountAggregateOutput = TypedDict(
    'TagCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'scope': int,
        '_all': int,
    },
    total=False,
)


TagKeys = Literal[
    'id',
    'name',
    'scope',
    'ItemTag',
]
TagScalarFieldKeys = Literal[
    'id',
    'name',
    'scope',
]
TagScalarFieldKeysT = TypeVar('TagScalarFieldKeysT', bound=TagScalarFieldKeys)

TagRelationalFieldKeys = Literal[
        'ItemTag',
    ]

# ItemTag types

class ItemTagOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the ItemTag create method"""
    tag: 'TagCreateNestedWithoutRelationsInput'
    tag_id: _int


class ItemTagCreateInput(ItemTagOptionalCreateInput):
    """Required arguments to the ItemTag create method"""
    label_hash: _str
    data_hash: _str
    frame: _int
    object_hash: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ItemTagOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the ItemTag create method, without relations"""
    tag_id: _int


class ItemTagCreateWithoutRelationsInput(ItemTagOptionalCreateWithoutRelationsInput):
    """Required arguments to the ItemTag create method, without relations"""
    label_hash: _str
    data_hash: _str
    frame: _int
    object_hash: _str


class ItemTagCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ItemTagCreateWithoutRelationsInput'
    connect: 'ItemTagWhereUniqueInput'


class ItemTagCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ItemTagCreateWithoutRelationsInput', List['ItemTagCreateWithoutRelationsInput']]
    connect: Union['ItemTagWhereUniqueInput', List['ItemTagWhereUniqueInput']]


_ItemTagCompoundPrimaryKeyInner = TypedDict(
    '_ItemTagCompoundPrimaryKeyInner',
    {
        'label_hash': '_str',
        'data_hash': '_str',
        'frame': '_int',
        'object_hash': '_str',
        'tag_id': '_int',
    },
    total=True
)

_ItemTagCompoundPrimaryKey = TypedDict(
    '_ItemTagCompoundPrimaryKey',
    {
        'label_hash_data_hash_frame_object_hash_tag_id': '_ItemTagCompoundPrimaryKeyInner',
    },
    total=True
)

ItemTagWhereUniqueInput = _ItemTagCompoundPrimaryKey


class ItemTagUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    label_hash: _str
    data_hash: _str
    frame: Union[AtomicIntInput, _int]
    object_hash: _str
    tag: 'TagUpdateOneWithoutRelationsInput'


class ItemTagUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    label_hash: _str
    data_hash: _str
    frame: Union[AtomicIntInput, _int]
    object_hash: _str


class ItemTagUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ItemTagCreateWithoutRelationsInput']
    connect: List['ItemTagWhereUniqueInput']
    set: List['ItemTagWhereUniqueInput']
    disconnect: List['ItemTagWhereUniqueInput']
    delete: List['ItemTagWhereUniqueInput']

    # TODO
    # update: List['ItemTagUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ItemTagUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ItemTagScalarWhereInput']
    # upsert: List['ItemTagUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['ItemTagCreateOrConnectWithoutRelationsInput']


class ItemTagUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ItemTagCreateWithoutRelationsInput'
    connect: 'ItemTagWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ItemTagUpdateInput'
    # upsert: 'ItemTagUpsertWithoutRelationsInput'
    # connectOrCreate: 'ItemTagCreateOrConnectWithoutRelationsInput'


class ItemTagUpsertInput(TypedDict):
    create: 'ItemTagCreateInput'
    update: 'ItemTagUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_ItemTag_label_hash_OrderByInput = TypedDict(
    '_ItemTag_label_hash_OrderByInput',
    {
        'label_hash': 'SortOrder',
    },
    total=True
)

_ItemTag_data_hash_OrderByInput = TypedDict(
    '_ItemTag_data_hash_OrderByInput',
    {
        'data_hash': 'SortOrder',
    },
    total=True
)

_ItemTag_frame_OrderByInput = TypedDict(
    '_ItemTag_frame_OrderByInput',
    {
        'frame': 'SortOrder',
    },
    total=True
)

_ItemTag_object_hash_OrderByInput = TypedDict(
    '_ItemTag_object_hash_OrderByInput',
    {
        'object_hash': 'SortOrder',
    },
    total=True
)

_ItemTag_tag_id_OrderByInput = TypedDict(
    '_ItemTag_tag_id_OrderByInput',
    {
        'tag_id': 'SortOrder',
    },
    total=True
)

ItemTagOrderByInput = Union[
    '_ItemTag_label_hash_OrderByInput',
    '_ItemTag_data_hash_OrderByInput',
    '_ItemTag_frame_OrderByInput',
    '_ItemTag_object_hash_OrderByInput',
    '_ItemTag_tag_id_OrderByInput',
]



# recursive ItemTag types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ItemTagRelationFilter = TypedDict(
    'ItemTagRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ItemTagListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ItemTagInclude(TypedDict, total=False):
    """ItemTag relational arguments"""
    tag: Union[bool, 'TagArgsFromItemTag']


    

class TagIncludeFromItemTag(TypedDict, total=False):
    """Relational arguments for ItemTag"""
    ItemTag: Union[bool, 'FindManyItemTagArgsFromItemTagRecursive1']


class TagIncludeFromItemTagRecursive1(TypedDict, total=False):
    """Relational arguments for ItemTag"""
    ItemTag: Union[bool, 'FindManyItemTagArgsFromItemTagRecursive2']


class TagIncludeFromItemTagRecursive2(TypedDict, total=False):
    """Relational arguments for ItemTag"""
    ItemTag: Union[bool, 'FindManyItemTagArgsFromItemTagRecursive3']


class TagIncludeFromItemTagRecursive3(TypedDict, total=False):
    """Relational arguments for ItemTag"""
    ItemTag: Union[bool, 'FindManyItemTagArgsFromItemTagRecursive4']


class TagIncludeFromItemTagRecursive4(TypedDict, total=False):
    """Relational arguments for ItemTag"""

    

class TagArgsFromItemTag(TypedDict, total=False):
    """Arguments for ItemTag"""
    include: 'TagIncludeFromTagRecursive1'


class TagArgsFromItemTagRecursive1(TypedDict, total=False):
    """Arguments for ItemTag"""
    include: 'TagIncludeFromTagRecursive2'


class TagArgsFromItemTagRecursive2(TypedDict, total=False):
    """Arguments for ItemTag"""
    include: 'TagIncludeFromTagRecursive3'


class TagArgsFromItemTagRecursive3(TypedDict, total=False):
    """Arguments for ItemTag"""
    include: 'TagIncludeFromTagRecursive4'


class TagArgsFromItemTagRecursive4(TypedDict, total=False):
    """Arguments for ItemTag"""
    
    

class FindManyTagArgsFromItemTag(TypedDict, total=False):
    """Arguments for ItemTag"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive1'


class FindManyTagArgsFromItemTagRecursive1(TypedDict, total=False):
    """Arguments for ItemTag"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive2'


class FindManyTagArgsFromItemTagRecursive2(TypedDict, total=False):
    """Arguments for ItemTag"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive3'


class FindManyTagArgsFromItemTagRecursive3(TypedDict, total=False):
    """Arguments for ItemTag"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive4'


class FindManyTagArgsFromItemTagRecursive4(TypedDict, total=False):
    """Arguments for ItemTag"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    
    

class ItemTagIncludeFromItemTag(TypedDict, total=False):
    """Relational arguments for ItemTag"""
    tag: Union[bool, 'TagArgsFromItemTagRecursive1']


class ItemTagIncludeFromItemTagRecursive1(TypedDict, total=False):
    """Relational arguments for ItemTag"""
    tag: Union[bool, 'TagArgsFromItemTagRecursive2']


class ItemTagIncludeFromItemTagRecursive2(TypedDict, total=False):
    """Relational arguments for ItemTag"""
    tag: Union[bool, 'TagArgsFromItemTagRecursive3']


class ItemTagIncludeFromItemTagRecursive3(TypedDict, total=False):
    """Relational arguments for ItemTag"""
    tag: Union[bool, 'TagArgsFromItemTagRecursive4']


class ItemTagIncludeFromItemTagRecursive4(TypedDict, total=False):
    """Relational arguments for ItemTag"""

    

class ItemTagArgsFromItemTag(TypedDict, total=False):
    """Arguments for ItemTag"""
    include: 'ItemTagIncludeFromItemTagRecursive1'


class ItemTagArgsFromItemTagRecursive1(TypedDict, total=False):
    """Arguments for ItemTag"""
    include: 'ItemTagIncludeFromItemTagRecursive2'


class ItemTagArgsFromItemTagRecursive2(TypedDict, total=False):
    """Arguments for ItemTag"""
    include: 'ItemTagIncludeFromItemTagRecursive3'


class ItemTagArgsFromItemTagRecursive3(TypedDict, total=False):
    """Arguments for ItemTag"""
    include: 'ItemTagIncludeFromItemTagRecursive4'


class ItemTagArgsFromItemTagRecursive4(TypedDict, total=False):
    """Arguments for ItemTag"""
    
    

class FindManyItemTagArgsFromItemTag(TypedDict, total=False):
    """Arguments for ItemTag"""
    take: int
    skip: int
    order_by: Union['ItemTagOrderByInput', List['ItemTagOrderByInput']]
    where: 'ItemTagWhereInput'
    cursor: 'ItemTagWhereUniqueInput'
    distinct: List['ItemTagScalarFieldKeys']
    include: 'ItemTagIncludeFromItemTagRecursive1'


class FindManyItemTagArgsFromItemTagRecursive1(TypedDict, total=False):
    """Arguments for ItemTag"""
    take: int
    skip: int
    order_by: Union['ItemTagOrderByInput', List['ItemTagOrderByInput']]
    where: 'ItemTagWhereInput'
    cursor: 'ItemTagWhereUniqueInput'
    distinct: List['ItemTagScalarFieldKeys']
    include: 'ItemTagIncludeFromItemTagRecursive2'


class FindManyItemTagArgsFromItemTagRecursive2(TypedDict, total=False):
    """Arguments for ItemTag"""
    take: int
    skip: int
    order_by: Union['ItemTagOrderByInput', List['ItemTagOrderByInput']]
    where: 'ItemTagWhereInput'
    cursor: 'ItemTagWhereUniqueInput'
    distinct: List['ItemTagScalarFieldKeys']
    include: 'ItemTagIncludeFromItemTagRecursive3'


class FindManyItemTagArgsFromItemTagRecursive3(TypedDict, total=False):
    """Arguments for ItemTag"""
    take: int
    skip: int
    order_by: Union['ItemTagOrderByInput', List['ItemTagOrderByInput']]
    where: 'ItemTagWhereInput'
    cursor: 'ItemTagWhereUniqueInput'
    distinct: List['ItemTagScalarFieldKeys']
    include: 'ItemTagIncludeFromItemTagRecursive4'


class FindManyItemTagArgsFromItemTagRecursive4(TypedDict, total=False):
    """Arguments for ItemTag"""
    take: int
    skip: int
    order_by: Union['ItemTagOrderByInput', List['ItemTagOrderByInput']]
    where: 'ItemTagWhereInput'
    cursor: 'ItemTagWhereUniqueInput'
    distinct: List['ItemTagScalarFieldKeys']
    
    

class DataUnitIncludeFromItemTag(TypedDict, total=False):
    """Relational arguments for ItemTag"""
    label_row: Union[bool, 'LabelRowArgsFromItemTagRecursive1']


class DataUnitIncludeFromItemTagRecursive1(TypedDict, total=False):
    """Relational arguments for ItemTag"""
    label_row: Union[bool, 'LabelRowArgsFromItemTagRecursive2']


class DataUnitIncludeFromItemTagRecursive2(TypedDict, total=False):
    """Relational arguments for ItemTag"""
    label_row: Union[bool, 'LabelRowArgsFromItemTagRecursive3']


class DataUnitIncludeFromItemTagRecursive3(TypedDict, total=False):
    """Relational arguments for ItemTag"""
    label_row: Union[bool, 'LabelRowArgsFromItemTagRecursive4']


class DataUnitIncludeFromItemTagRecursive4(TypedDict, total=False):
    """Relational arguments for ItemTag"""

    

class DataUnitArgsFromItemTag(TypedDict, total=False):
    """Arguments for ItemTag"""
    include: 'DataUnitIncludeFromDataUnitRecursive1'


class DataUnitArgsFromItemTagRecursive1(TypedDict, total=False):
    """Arguments for ItemTag"""
    include: 'DataUnitIncludeFromDataUnitRecursive2'


class DataUnitArgsFromItemTagRecursive2(TypedDict, total=False):
    """Arguments for ItemTag"""
    include: 'DataUnitIncludeFromDataUnitRecursive3'


class DataUnitArgsFromItemTagRecursive3(TypedDict, total=False):
    """Arguments for ItemTag"""
    include: 'DataUnitIncludeFromDataUnitRecursive4'


class DataUnitArgsFromItemTagRecursive4(TypedDict, total=False):
    """Arguments for ItemTag"""
    
    

class FindManyDataUnitArgsFromItemTag(TypedDict, total=False):
    """Arguments for ItemTag"""
    take: int
    skip: int
    order_by: Union['DataUnitOrderByInput', List['DataUnitOrderByInput']]
    where: 'DataUnitWhereInput'
    cursor: 'DataUnitWhereUniqueInput'
    distinct: List['DataUnitScalarFieldKeys']
    include: 'DataUnitIncludeFromDataUnitRecursive1'


class FindManyDataUnitArgsFromItemTagRecursive1(TypedDict, total=False):
    """Arguments for ItemTag"""
    take: int
    skip: int
    order_by: Union['DataUnitOrderByInput', List['DataUnitOrderByInput']]
    where: 'DataUnitWhereInput'
    cursor: 'DataUnitWhereUniqueInput'
    distinct: List['DataUnitScalarFieldKeys']
    include: 'DataUnitIncludeFromDataUnitRecursive2'


class FindManyDataUnitArgsFromItemTagRecursive2(TypedDict, total=False):
    """Arguments for ItemTag"""
    take: int
    skip: int
    order_by: Union['DataUnitOrderByInput', List['DataUnitOrderByInput']]
    where: 'DataUnitWhereInput'
    cursor: 'DataUnitWhereUniqueInput'
    distinct: List['DataUnitScalarFieldKeys']
    include: 'DataUnitIncludeFromDataUnitRecursive3'


class FindManyDataUnitArgsFromItemTagRecursive3(TypedDict, total=False):
    """Arguments for ItemTag"""
    take: int
    skip: int
    order_by: Union['DataUnitOrderByInput', List['DataUnitOrderByInput']]
    where: 'DataUnitWhereInput'
    cursor: 'DataUnitWhereUniqueInput'
    distinct: List['DataUnitScalarFieldKeys']
    include: 'DataUnitIncludeFromDataUnitRecursive4'


class FindManyDataUnitArgsFromItemTagRecursive4(TypedDict, total=False):
    """Arguments for ItemTag"""
    take: int
    skip: int
    order_by: Union['DataUnitOrderByInput', List['DataUnitOrderByInput']]
    where: 'DataUnitWhereInput'
    cursor: 'DataUnitWhereUniqueInput'
    distinct: List['DataUnitScalarFieldKeys']
    
    

class LabelRowIncludeFromItemTag(TypedDict, total=False):
    """Relational arguments for ItemTag"""
    data_units: Union[bool, 'FindManyDataUnitArgsFromItemTagRecursive1']


class LabelRowIncludeFromItemTagRecursive1(TypedDict, total=False):
    """Relational arguments for ItemTag"""
    data_units: Union[bool, 'FindManyDataUnitArgsFromItemTagRecursive2']


class LabelRowIncludeFromItemTagRecursive2(TypedDict, total=False):
    """Relational arguments for ItemTag"""
    data_units: Union[bool, 'FindManyDataUnitArgsFromItemTagRecursive3']


class LabelRowIncludeFromItemTagRecursive3(TypedDict, total=False):
    """Relational arguments for ItemTag"""
    data_units: Union[bool, 'FindManyDataUnitArgsFromItemTagRecursive4']


class LabelRowIncludeFromItemTagRecursive4(TypedDict, total=False):
    """Relational arguments for ItemTag"""

    

class LabelRowArgsFromItemTag(TypedDict, total=False):
    """Arguments for ItemTag"""
    include: 'LabelRowIncludeFromLabelRowRecursive1'


class LabelRowArgsFromItemTagRecursive1(TypedDict, total=False):
    """Arguments for ItemTag"""
    include: 'LabelRowIncludeFromLabelRowRecursive2'


class LabelRowArgsFromItemTagRecursive2(TypedDict, total=False):
    """Arguments for ItemTag"""
    include: 'LabelRowIncludeFromLabelRowRecursive3'


class LabelRowArgsFromItemTagRecursive3(TypedDict, total=False):
    """Arguments for ItemTag"""
    include: 'LabelRowIncludeFromLabelRowRecursive4'


class LabelRowArgsFromItemTagRecursive4(TypedDict, total=False):
    """Arguments for ItemTag"""
    
    

class FindManyLabelRowArgsFromItemTag(TypedDict, total=False):
    """Arguments for ItemTag"""
    take: int
    skip: int
    order_by: Union['LabelRowOrderByInput', List['LabelRowOrderByInput']]
    where: 'LabelRowWhereInput'
    cursor: 'LabelRowWhereUniqueInput'
    distinct: List['LabelRowScalarFieldKeys']
    include: 'LabelRowIncludeFromLabelRowRecursive1'


class FindManyLabelRowArgsFromItemTagRecursive1(TypedDict, total=False):
    """Arguments for ItemTag"""
    take: int
    skip: int
    order_by: Union['LabelRowOrderByInput', List['LabelRowOrderByInput']]
    where: 'LabelRowWhereInput'
    cursor: 'LabelRowWhereUniqueInput'
    distinct: List['LabelRowScalarFieldKeys']
    include: 'LabelRowIncludeFromLabelRowRecursive2'


class FindManyLabelRowArgsFromItemTagRecursive2(TypedDict, total=False):
    """Arguments for ItemTag"""
    take: int
    skip: int
    order_by: Union['LabelRowOrderByInput', List['LabelRowOrderByInput']]
    where: 'LabelRowWhereInput'
    cursor: 'LabelRowWhereUniqueInput'
    distinct: List['LabelRowScalarFieldKeys']
    include: 'LabelRowIncludeFromLabelRowRecursive3'


class FindManyLabelRowArgsFromItemTagRecursive3(TypedDict, total=False):
    """Arguments for ItemTag"""
    take: int
    skip: int
    order_by: Union['LabelRowOrderByInput', List['LabelRowOrderByInput']]
    where: 'LabelRowWhereInput'
    cursor: 'LabelRowWhereUniqueInput'
    distinct: List['LabelRowScalarFieldKeys']
    include: 'LabelRowIncludeFromLabelRowRecursive4'


class FindManyLabelRowArgsFromItemTagRecursive4(TypedDict, total=False):
    """Arguments for ItemTag"""
    take: int
    skip: int
    order_by: Union['LabelRowOrderByInput', List['LabelRowOrderByInput']]
    where: 'LabelRowWhereInput'
    cursor: 'LabelRowWhereUniqueInput'
    distinct: List['LabelRowScalarFieldKeys']
    


FindManyItemTagArgs = FindManyItemTagArgsFromItemTag
FindFirstItemTagArgs = FindManyItemTagArgsFromItemTag


    

class ItemTagWhereInput(TypedDict, total=False):
    """ItemTag arguments for searching"""
    label_hash: Union[_str, 'types.StringFilter']
    data_hash: Union[_str, 'types.StringFilter']
    frame: Union[_int, 'types.IntFilter']
    object_hash: Union[_str, 'types.StringFilter']
    tag: 'TagRelationFilter'
    tag_id: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['ItemTagWhereInputRecursive1', List['ItemTagWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ItemTagWhereInputRecursive1']
    OR: List['ItemTagWhereInputRecursive1']
    NOT: List['ItemTagWhereInputRecursive1']


class ItemTagWhereInputRecursive1(TypedDict, total=False):
    """ItemTag arguments for searching"""
    label_hash: Union[_str, 'types.StringFilter']
    data_hash: Union[_str, 'types.StringFilter']
    frame: Union[_int, 'types.IntFilter']
    object_hash: Union[_str, 'types.StringFilter']
    tag: 'TagRelationFilter'
    tag_id: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['ItemTagWhereInputRecursive2', List['ItemTagWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ItemTagWhereInputRecursive2']
    OR: List['ItemTagWhereInputRecursive2']
    NOT: List['ItemTagWhereInputRecursive2']


class ItemTagWhereInputRecursive2(TypedDict, total=False):
    """ItemTag arguments for searching"""
    label_hash: Union[_str, 'types.StringFilter']
    data_hash: Union[_str, 'types.StringFilter']
    frame: Union[_int, 'types.IntFilter']
    object_hash: Union[_str, 'types.StringFilter']
    tag: 'TagRelationFilter'
    tag_id: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['ItemTagWhereInputRecursive3', List['ItemTagWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ItemTagWhereInputRecursive3']
    OR: List['ItemTagWhereInputRecursive3']
    NOT: List['ItemTagWhereInputRecursive3']


class ItemTagWhereInputRecursive3(TypedDict, total=False):
    """ItemTag arguments for searching"""
    label_hash: Union[_str, 'types.StringFilter']
    data_hash: Union[_str, 'types.StringFilter']
    frame: Union[_int, 'types.IntFilter']
    object_hash: Union[_str, 'types.StringFilter']
    tag: 'TagRelationFilter'
    tag_id: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['ItemTagWhereInputRecursive4', List['ItemTagWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ItemTagWhereInputRecursive4']
    OR: List['ItemTagWhereInputRecursive4']
    NOT: List['ItemTagWhereInputRecursive4']


class ItemTagWhereInputRecursive4(TypedDict, total=False):
    """ItemTag arguments for searching"""
    label_hash: Union[_str, 'types.StringFilter']
    data_hash: Union[_str, 'types.StringFilter']
    frame: Union[_int, 'types.IntFilter']
    object_hash: Union[_str, 'types.StringFilter']
    tag: 'TagRelationFilter'
    tag_id: Union[_int, 'types.IntFilter']



# aggregate ItemTag types


    

class ItemTagScalarWhereWithAggregatesInput(TypedDict, total=False):
    """ItemTag arguments for searching"""
    label_hash: Union[_str, 'types.StringWithAggregatesFilter']
    data_hash: Union[_str, 'types.StringWithAggregatesFilter']
    frame: Union[_int, 'types.IntWithAggregatesFilter']
    object_hash: Union[_str, 'types.StringWithAggregatesFilter']
    tag_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ItemTagScalarWhereWithAggregatesInputRecursive1']
    OR: List['ItemTagScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ItemTagScalarWhereWithAggregatesInputRecursive1']


class ItemTagScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """ItemTag arguments for searching"""
    label_hash: Union[_str, 'types.StringWithAggregatesFilter']
    data_hash: Union[_str, 'types.StringWithAggregatesFilter']
    frame: Union[_int, 'types.IntWithAggregatesFilter']
    object_hash: Union[_str, 'types.StringWithAggregatesFilter']
    tag_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ItemTagScalarWhereWithAggregatesInputRecursive2']
    OR: List['ItemTagScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ItemTagScalarWhereWithAggregatesInputRecursive2']


class ItemTagScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """ItemTag arguments for searching"""
    label_hash: Union[_str, 'types.StringWithAggregatesFilter']
    data_hash: Union[_str, 'types.StringWithAggregatesFilter']
    frame: Union[_int, 'types.IntWithAggregatesFilter']
    object_hash: Union[_str, 'types.StringWithAggregatesFilter']
    tag_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ItemTagScalarWhereWithAggregatesInputRecursive3']
    OR: List['ItemTagScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ItemTagScalarWhereWithAggregatesInputRecursive3']


class ItemTagScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """ItemTag arguments for searching"""
    label_hash: Union[_str, 'types.StringWithAggregatesFilter']
    data_hash: Union[_str, 'types.StringWithAggregatesFilter']
    frame: Union[_int, 'types.IntWithAggregatesFilter']
    object_hash: Union[_str, 'types.StringWithAggregatesFilter']
    tag_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ItemTagScalarWhereWithAggregatesInputRecursive4']
    OR: List['ItemTagScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ItemTagScalarWhereWithAggregatesInputRecursive4']


class ItemTagScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """ItemTag arguments for searching"""
    label_hash: Union[_str, 'types.StringWithAggregatesFilter']
    data_hash: Union[_str, 'types.StringWithAggregatesFilter']
    frame: Union[_int, 'types.IntWithAggregatesFilter']
    object_hash: Union[_str, 'types.StringWithAggregatesFilter']
    tag_id: Union[_int, 'types.IntWithAggregatesFilter']



class ItemTagGroupByOutput(TypedDict, total=False):
    label_hash: _str
    data_hash: _str
    frame: _int
    object_hash: _str
    tag_id: _int
    _sum: 'ItemTagSumAggregateOutput'
    _avg: 'ItemTagAvgAggregateOutput'
    _min: 'ItemTagMinAggregateOutput'
    _max: 'ItemTagMaxAggregateOutput'
    _count: 'ItemTagCountAggregateOutput'


class ItemTagAvgAggregateOutput(TypedDict, total=False):
    """ItemTag output for aggregating averages"""
    frame: float
    tag_id: float


class ItemTagSumAggregateOutput(TypedDict, total=False):
    """ItemTag output for aggregating sums"""
    frame: _int
    tag_id: _int


class ItemTagScalarAggregateOutput(TypedDict, total=False):
    """ItemTag output including scalar fields"""
    label_hash: _str
    data_hash: _str
    frame: _int
    object_hash: _str
    tag_id: _int


ItemTagMinAggregateOutput = ItemTagScalarAggregateOutput
ItemTagMaxAggregateOutput = ItemTagScalarAggregateOutput


class ItemTagMaxAggregateInput(TypedDict, total=False):
    """ItemTag input for aggregating by max"""
    label_hash: bool
    data_hash: bool
    frame: bool
    object_hash: bool
    tag_id: bool


class ItemTagMinAggregateInput(TypedDict, total=False):
    """ItemTag input for aggregating by min"""
    label_hash: bool
    data_hash: bool
    frame: bool
    object_hash: bool
    tag_id: bool


class ItemTagNumberAggregateInput(TypedDict, total=False):
    """ItemTag input for aggregating numbers"""
    frame: bool
    tag_id: bool


ItemTagAvgAggregateInput = ItemTagNumberAggregateInput
ItemTagSumAggregateInput = ItemTagNumberAggregateInput


ItemTagCountAggregateInput = TypedDict(
    'ItemTagCountAggregateInput',
    {
        'label_hash': bool,
        'data_hash': bool,
        'frame': bool,
        'object_hash': bool,
        'tag_id': bool,
        '_all': bool,
    },
    total=False,
)

ItemTagCountAggregateOutput = TypedDict(
    'ItemTagCountAggregateOutput',
    {
        'label_hash': int,
        'data_hash': int,
        'frame': int,
        'object_hash': int,
        'tag_id': int,
        '_all': int,
    },
    total=False,
)


ItemTagKeys = Literal[
    'label_hash',
    'data_hash',
    'frame',
    'object_hash',
    'tag',
    'tag_id',
]
ItemTagScalarFieldKeys = Literal[
    'label_hash',
    'data_hash',
    'frame',
    'object_hash',
    'tag_id',
]
ItemTagScalarFieldKeysT = TypeVar('ItemTagScalarFieldKeysT', bound=ItemTagScalarFieldKeys)

ItemTagRelationalFieldKeys = Literal[
        'tag',
    ]

# DataUnit types

class DataUnitOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the DataUnit create method"""
    id: _int
    lr_data_hash: _str
    label_row: 'LabelRowCreateNestedWithoutRelationsInput'


class DataUnitCreateInput(DataUnitOptionalCreateInput):
    """Required arguments to the DataUnit create method"""
    data_hash: _str
    data_title: _str
    frame: _int
    location: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class DataUnitOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the DataUnit create method, without relations"""
    id: _int
    lr_data_hash: _str


class DataUnitCreateWithoutRelationsInput(DataUnitOptionalCreateWithoutRelationsInput):
    """Required arguments to the DataUnit create method, without relations"""
    data_hash: _str
    data_title: _str
    frame: _int
    location: _str


class DataUnitCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'DataUnitCreateWithoutRelationsInput'
    connect: 'DataUnitWhereUniqueInput'


class DataUnitCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['DataUnitCreateWithoutRelationsInput', List['DataUnitCreateWithoutRelationsInput']]
    connect: Union['DataUnitWhereUniqueInput', List['DataUnitWhereUniqueInput']]


_DataUnitWhereUnique_id_Input = TypedDict(
    '_DataUnitWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_DataUnitCompounddata_hash_frameKeyInner = TypedDict(
    '_DataUnitCompounddata_hash_frameKeyInner',
    {
        'data_hash': '_str',
        'frame': '_int',
    },
    total=True
)

_DataUnitCompounddata_hash_frameKey = TypedDict(
    '_DataUnitCompounddata_hash_frameKey',
    {
        'data_hash_frame': '_DataUnitCompounddata_hash_frameKeyInner',
    },
    total=True
)

DataUnitWhereUniqueInput = Union[
    '_DataUnitWhereUnique_id_Input',
    '_DataUnitCompounddata_hash_frameKey',
]


class DataUnitUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    data_hash: _str
    data_title: _str
    frame: Union[AtomicIntInput, _int]
    location: _str
    label_row: 'LabelRowUpdateOneWithoutRelationsInput'


class DataUnitUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    data_hash: _str
    data_title: _str
    frame: Union[AtomicIntInput, _int]
    location: _str


class DataUnitUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['DataUnitCreateWithoutRelationsInput']
    connect: List['DataUnitWhereUniqueInput']
    set: List['DataUnitWhereUniqueInput']
    disconnect: List['DataUnitWhereUniqueInput']
    delete: List['DataUnitWhereUniqueInput']

    # TODO
    # update: List['DataUnitUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['DataUnitUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['DataUnitScalarWhereInput']
    # upsert: List['DataUnitUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['DataUnitCreateOrConnectWithoutRelationsInput']


class DataUnitUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'DataUnitCreateWithoutRelationsInput'
    connect: 'DataUnitWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'DataUnitUpdateInput'
    # upsert: 'DataUnitUpsertWithoutRelationsInput'
    # connectOrCreate: 'DataUnitCreateOrConnectWithoutRelationsInput'


class DataUnitUpsertInput(TypedDict):
    create: 'DataUnitCreateInput'
    update: 'DataUnitUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_DataUnit_id_OrderByInput = TypedDict(
    '_DataUnit_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_DataUnit_data_hash_OrderByInput = TypedDict(
    '_DataUnit_data_hash_OrderByInput',
    {
        'data_hash': 'SortOrder',
    },
    total=True
)

_DataUnit_data_title_OrderByInput = TypedDict(
    '_DataUnit_data_title_OrderByInput',
    {
        'data_title': 'SortOrder',
    },
    total=True
)

_DataUnit_frame_OrderByInput = TypedDict(
    '_DataUnit_frame_OrderByInput',
    {
        'frame': 'SortOrder',
    },
    total=True
)

_DataUnit_location_OrderByInput = TypedDict(
    '_DataUnit_location_OrderByInput',
    {
        'location': 'SortOrder',
    },
    total=True
)

_DataUnit_lr_data_hash_OrderByInput = TypedDict(
    '_DataUnit_lr_data_hash_OrderByInput',
    {
        'lr_data_hash': 'SortOrder',
    },
    total=True
)

DataUnitOrderByInput = Union[
    '_DataUnit_id_OrderByInput',
    '_DataUnit_data_hash_OrderByInput',
    '_DataUnit_data_title_OrderByInput',
    '_DataUnit_frame_OrderByInput',
    '_DataUnit_location_OrderByInput',
    '_DataUnit_lr_data_hash_OrderByInput',
]



# recursive DataUnit types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

DataUnitRelationFilter = TypedDict(
    'DataUnitRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class DataUnitListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class DataUnitInclude(TypedDict, total=False):
    """DataUnit relational arguments"""
    label_row: Union[bool, 'LabelRowArgsFromDataUnit']


    

class TagIncludeFromDataUnit(TypedDict, total=False):
    """Relational arguments for DataUnit"""
    ItemTag: Union[bool, 'FindManyItemTagArgsFromDataUnitRecursive1']


class TagIncludeFromDataUnitRecursive1(TypedDict, total=False):
    """Relational arguments for DataUnit"""
    ItemTag: Union[bool, 'FindManyItemTagArgsFromDataUnitRecursive2']


class TagIncludeFromDataUnitRecursive2(TypedDict, total=False):
    """Relational arguments for DataUnit"""
    ItemTag: Union[bool, 'FindManyItemTagArgsFromDataUnitRecursive3']


class TagIncludeFromDataUnitRecursive3(TypedDict, total=False):
    """Relational arguments for DataUnit"""
    ItemTag: Union[bool, 'FindManyItemTagArgsFromDataUnitRecursive4']


class TagIncludeFromDataUnitRecursive4(TypedDict, total=False):
    """Relational arguments for DataUnit"""

    

class TagArgsFromDataUnit(TypedDict, total=False):
    """Arguments for DataUnit"""
    include: 'TagIncludeFromTagRecursive1'


class TagArgsFromDataUnitRecursive1(TypedDict, total=False):
    """Arguments for DataUnit"""
    include: 'TagIncludeFromTagRecursive2'


class TagArgsFromDataUnitRecursive2(TypedDict, total=False):
    """Arguments for DataUnit"""
    include: 'TagIncludeFromTagRecursive3'


class TagArgsFromDataUnitRecursive3(TypedDict, total=False):
    """Arguments for DataUnit"""
    include: 'TagIncludeFromTagRecursive4'


class TagArgsFromDataUnitRecursive4(TypedDict, total=False):
    """Arguments for DataUnit"""
    
    

class FindManyTagArgsFromDataUnit(TypedDict, total=False):
    """Arguments for DataUnit"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive1'


class FindManyTagArgsFromDataUnitRecursive1(TypedDict, total=False):
    """Arguments for DataUnit"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive2'


class FindManyTagArgsFromDataUnitRecursive2(TypedDict, total=False):
    """Arguments for DataUnit"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive3'


class FindManyTagArgsFromDataUnitRecursive3(TypedDict, total=False):
    """Arguments for DataUnit"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive4'


class FindManyTagArgsFromDataUnitRecursive4(TypedDict, total=False):
    """Arguments for DataUnit"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    
    

class ItemTagIncludeFromDataUnit(TypedDict, total=False):
    """Relational arguments for DataUnit"""
    tag: Union[bool, 'TagArgsFromDataUnitRecursive1']


class ItemTagIncludeFromDataUnitRecursive1(TypedDict, total=False):
    """Relational arguments for DataUnit"""
    tag: Union[bool, 'TagArgsFromDataUnitRecursive2']


class ItemTagIncludeFromDataUnitRecursive2(TypedDict, total=False):
    """Relational arguments for DataUnit"""
    tag: Union[bool, 'TagArgsFromDataUnitRecursive3']


class ItemTagIncludeFromDataUnitRecursive3(TypedDict, total=False):
    """Relational arguments for DataUnit"""
    tag: Union[bool, 'TagArgsFromDataUnitRecursive4']


class ItemTagIncludeFromDataUnitRecursive4(TypedDict, total=False):
    """Relational arguments for DataUnit"""

    

class ItemTagArgsFromDataUnit(TypedDict, total=False):
    """Arguments for DataUnit"""
    include: 'ItemTagIncludeFromItemTagRecursive1'


class ItemTagArgsFromDataUnitRecursive1(TypedDict, total=False):
    """Arguments for DataUnit"""
    include: 'ItemTagIncludeFromItemTagRecursive2'


class ItemTagArgsFromDataUnitRecursive2(TypedDict, total=False):
    """Arguments for DataUnit"""
    include: 'ItemTagIncludeFromItemTagRecursive3'


class ItemTagArgsFromDataUnitRecursive3(TypedDict, total=False):
    """Arguments for DataUnit"""
    include: 'ItemTagIncludeFromItemTagRecursive4'


class ItemTagArgsFromDataUnitRecursive4(TypedDict, total=False):
    """Arguments for DataUnit"""
    
    

class FindManyItemTagArgsFromDataUnit(TypedDict, total=False):
    """Arguments for DataUnit"""
    take: int
    skip: int
    order_by: Union['ItemTagOrderByInput', List['ItemTagOrderByInput']]
    where: 'ItemTagWhereInput'
    cursor: 'ItemTagWhereUniqueInput'
    distinct: List['ItemTagScalarFieldKeys']
    include: 'ItemTagIncludeFromItemTagRecursive1'


class FindManyItemTagArgsFromDataUnitRecursive1(TypedDict, total=False):
    """Arguments for DataUnit"""
    take: int
    skip: int
    order_by: Union['ItemTagOrderByInput', List['ItemTagOrderByInput']]
    where: 'ItemTagWhereInput'
    cursor: 'ItemTagWhereUniqueInput'
    distinct: List['ItemTagScalarFieldKeys']
    include: 'ItemTagIncludeFromItemTagRecursive2'


class FindManyItemTagArgsFromDataUnitRecursive2(TypedDict, total=False):
    """Arguments for DataUnit"""
    take: int
    skip: int
    order_by: Union['ItemTagOrderByInput', List['ItemTagOrderByInput']]
    where: 'ItemTagWhereInput'
    cursor: 'ItemTagWhereUniqueInput'
    distinct: List['ItemTagScalarFieldKeys']
    include: 'ItemTagIncludeFromItemTagRecursive3'


class FindManyItemTagArgsFromDataUnitRecursive3(TypedDict, total=False):
    """Arguments for DataUnit"""
    take: int
    skip: int
    order_by: Union['ItemTagOrderByInput', List['ItemTagOrderByInput']]
    where: 'ItemTagWhereInput'
    cursor: 'ItemTagWhereUniqueInput'
    distinct: List['ItemTagScalarFieldKeys']
    include: 'ItemTagIncludeFromItemTagRecursive4'


class FindManyItemTagArgsFromDataUnitRecursive4(TypedDict, total=False):
    """Arguments for DataUnit"""
    take: int
    skip: int
    order_by: Union['ItemTagOrderByInput', List['ItemTagOrderByInput']]
    where: 'ItemTagWhereInput'
    cursor: 'ItemTagWhereUniqueInput'
    distinct: List['ItemTagScalarFieldKeys']
    
    

class DataUnitIncludeFromDataUnit(TypedDict, total=False):
    """Relational arguments for DataUnit"""
    label_row: Union[bool, 'LabelRowArgsFromDataUnitRecursive1']


class DataUnitIncludeFromDataUnitRecursive1(TypedDict, total=False):
    """Relational arguments for DataUnit"""
    label_row: Union[bool, 'LabelRowArgsFromDataUnitRecursive2']


class DataUnitIncludeFromDataUnitRecursive2(TypedDict, total=False):
    """Relational arguments for DataUnit"""
    label_row: Union[bool, 'LabelRowArgsFromDataUnitRecursive3']


class DataUnitIncludeFromDataUnitRecursive3(TypedDict, total=False):
    """Relational arguments for DataUnit"""
    label_row: Union[bool, 'LabelRowArgsFromDataUnitRecursive4']


class DataUnitIncludeFromDataUnitRecursive4(TypedDict, total=False):
    """Relational arguments for DataUnit"""

    

class DataUnitArgsFromDataUnit(TypedDict, total=False):
    """Arguments for DataUnit"""
    include: 'DataUnitIncludeFromDataUnitRecursive1'


class DataUnitArgsFromDataUnitRecursive1(TypedDict, total=False):
    """Arguments for DataUnit"""
    include: 'DataUnitIncludeFromDataUnitRecursive2'


class DataUnitArgsFromDataUnitRecursive2(TypedDict, total=False):
    """Arguments for DataUnit"""
    include: 'DataUnitIncludeFromDataUnitRecursive3'


class DataUnitArgsFromDataUnitRecursive3(TypedDict, total=False):
    """Arguments for DataUnit"""
    include: 'DataUnitIncludeFromDataUnitRecursive4'


class DataUnitArgsFromDataUnitRecursive4(TypedDict, total=False):
    """Arguments for DataUnit"""
    
    

class FindManyDataUnitArgsFromDataUnit(TypedDict, total=False):
    """Arguments for DataUnit"""
    take: int
    skip: int
    order_by: Union['DataUnitOrderByInput', List['DataUnitOrderByInput']]
    where: 'DataUnitWhereInput'
    cursor: 'DataUnitWhereUniqueInput'
    distinct: List['DataUnitScalarFieldKeys']
    include: 'DataUnitIncludeFromDataUnitRecursive1'


class FindManyDataUnitArgsFromDataUnitRecursive1(TypedDict, total=False):
    """Arguments for DataUnit"""
    take: int
    skip: int
    order_by: Union['DataUnitOrderByInput', List['DataUnitOrderByInput']]
    where: 'DataUnitWhereInput'
    cursor: 'DataUnitWhereUniqueInput'
    distinct: List['DataUnitScalarFieldKeys']
    include: 'DataUnitIncludeFromDataUnitRecursive2'


class FindManyDataUnitArgsFromDataUnitRecursive2(TypedDict, total=False):
    """Arguments for DataUnit"""
    take: int
    skip: int
    order_by: Union['DataUnitOrderByInput', List['DataUnitOrderByInput']]
    where: 'DataUnitWhereInput'
    cursor: 'DataUnitWhereUniqueInput'
    distinct: List['DataUnitScalarFieldKeys']
    include: 'DataUnitIncludeFromDataUnitRecursive3'


class FindManyDataUnitArgsFromDataUnitRecursive3(TypedDict, total=False):
    """Arguments for DataUnit"""
    take: int
    skip: int
    order_by: Union['DataUnitOrderByInput', List['DataUnitOrderByInput']]
    where: 'DataUnitWhereInput'
    cursor: 'DataUnitWhereUniqueInput'
    distinct: List['DataUnitScalarFieldKeys']
    include: 'DataUnitIncludeFromDataUnitRecursive4'


class FindManyDataUnitArgsFromDataUnitRecursive4(TypedDict, total=False):
    """Arguments for DataUnit"""
    take: int
    skip: int
    order_by: Union['DataUnitOrderByInput', List['DataUnitOrderByInput']]
    where: 'DataUnitWhereInput'
    cursor: 'DataUnitWhereUniqueInput'
    distinct: List['DataUnitScalarFieldKeys']
    
    

class LabelRowIncludeFromDataUnit(TypedDict, total=False):
    """Relational arguments for DataUnit"""
    data_units: Union[bool, 'FindManyDataUnitArgsFromDataUnitRecursive1']


class LabelRowIncludeFromDataUnitRecursive1(TypedDict, total=False):
    """Relational arguments for DataUnit"""
    data_units: Union[bool, 'FindManyDataUnitArgsFromDataUnitRecursive2']


class LabelRowIncludeFromDataUnitRecursive2(TypedDict, total=False):
    """Relational arguments for DataUnit"""
    data_units: Union[bool, 'FindManyDataUnitArgsFromDataUnitRecursive3']


class LabelRowIncludeFromDataUnitRecursive3(TypedDict, total=False):
    """Relational arguments for DataUnit"""
    data_units: Union[bool, 'FindManyDataUnitArgsFromDataUnitRecursive4']


class LabelRowIncludeFromDataUnitRecursive4(TypedDict, total=False):
    """Relational arguments for DataUnit"""

    

class LabelRowArgsFromDataUnit(TypedDict, total=False):
    """Arguments for DataUnit"""
    include: 'LabelRowIncludeFromLabelRowRecursive1'


class LabelRowArgsFromDataUnitRecursive1(TypedDict, total=False):
    """Arguments for DataUnit"""
    include: 'LabelRowIncludeFromLabelRowRecursive2'


class LabelRowArgsFromDataUnitRecursive2(TypedDict, total=False):
    """Arguments for DataUnit"""
    include: 'LabelRowIncludeFromLabelRowRecursive3'


class LabelRowArgsFromDataUnitRecursive3(TypedDict, total=False):
    """Arguments for DataUnit"""
    include: 'LabelRowIncludeFromLabelRowRecursive4'


class LabelRowArgsFromDataUnitRecursive4(TypedDict, total=False):
    """Arguments for DataUnit"""
    
    

class FindManyLabelRowArgsFromDataUnit(TypedDict, total=False):
    """Arguments for DataUnit"""
    take: int
    skip: int
    order_by: Union['LabelRowOrderByInput', List['LabelRowOrderByInput']]
    where: 'LabelRowWhereInput'
    cursor: 'LabelRowWhereUniqueInput'
    distinct: List['LabelRowScalarFieldKeys']
    include: 'LabelRowIncludeFromLabelRowRecursive1'


class FindManyLabelRowArgsFromDataUnitRecursive1(TypedDict, total=False):
    """Arguments for DataUnit"""
    take: int
    skip: int
    order_by: Union['LabelRowOrderByInput', List['LabelRowOrderByInput']]
    where: 'LabelRowWhereInput'
    cursor: 'LabelRowWhereUniqueInput'
    distinct: List['LabelRowScalarFieldKeys']
    include: 'LabelRowIncludeFromLabelRowRecursive2'


class FindManyLabelRowArgsFromDataUnitRecursive2(TypedDict, total=False):
    """Arguments for DataUnit"""
    take: int
    skip: int
    order_by: Union['LabelRowOrderByInput', List['LabelRowOrderByInput']]
    where: 'LabelRowWhereInput'
    cursor: 'LabelRowWhereUniqueInput'
    distinct: List['LabelRowScalarFieldKeys']
    include: 'LabelRowIncludeFromLabelRowRecursive3'


class FindManyLabelRowArgsFromDataUnitRecursive3(TypedDict, total=False):
    """Arguments for DataUnit"""
    take: int
    skip: int
    order_by: Union['LabelRowOrderByInput', List['LabelRowOrderByInput']]
    where: 'LabelRowWhereInput'
    cursor: 'LabelRowWhereUniqueInput'
    distinct: List['LabelRowScalarFieldKeys']
    include: 'LabelRowIncludeFromLabelRowRecursive4'


class FindManyLabelRowArgsFromDataUnitRecursive4(TypedDict, total=False):
    """Arguments for DataUnit"""
    take: int
    skip: int
    order_by: Union['LabelRowOrderByInput', List['LabelRowOrderByInput']]
    where: 'LabelRowWhereInput'
    cursor: 'LabelRowWhereUniqueInput'
    distinct: List['LabelRowScalarFieldKeys']
    


FindManyDataUnitArgs = FindManyDataUnitArgsFromDataUnit
FindFirstDataUnitArgs = FindManyDataUnitArgsFromDataUnit


    

class DataUnitWhereInput(TypedDict, total=False):
    """DataUnit arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    data_hash: Union[_str, 'types.StringFilter']
    data_title: Union[_str, 'types.StringFilter']
    frame: Union[_int, 'types.IntFilter']
    location: Union[_str, 'types.StringFilter']
    lr_data_hash: Union[_str, 'types.StringFilter']
    label_row: 'LabelRowRelationFilter'

    # should be noted that AND and NOT should be Union['DataUnitWhereInputRecursive1', List['DataUnitWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['DataUnitWhereInputRecursive1']
    OR: List['DataUnitWhereInputRecursive1']
    NOT: List['DataUnitWhereInputRecursive1']


class DataUnitWhereInputRecursive1(TypedDict, total=False):
    """DataUnit arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    data_hash: Union[_str, 'types.StringFilter']
    data_title: Union[_str, 'types.StringFilter']
    frame: Union[_int, 'types.IntFilter']
    location: Union[_str, 'types.StringFilter']
    lr_data_hash: Union[_str, 'types.StringFilter']
    label_row: 'LabelRowRelationFilter'

    # should be noted that AND and NOT should be Union['DataUnitWhereInputRecursive2', List['DataUnitWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['DataUnitWhereInputRecursive2']
    OR: List['DataUnitWhereInputRecursive2']
    NOT: List['DataUnitWhereInputRecursive2']


class DataUnitWhereInputRecursive2(TypedDict, total=False):
    """DataUnit arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    data_hash: Union[_str, 'types.StringFilter']
    data_title: Union[_str, 'types.StringFilter']
    frame: Union[_int, 'types.IntFilter']
    location: Union[_str, 'types.StringFilter']
    lr_data_hash: Union[_str, 'types.StringFilter']
    label_row: 'LabelRowRelationFilter'

    # should be noted that AND and NOT should be Union['DataUnitWhereInputRecursive3', List['DataUnitWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['DataUnitWhereInputRecursive3']
    OR: List['DataUnitWhereInputRecursive3']
    NOT: List['DataUnitWhereInputRecursive3']


class DataUnitWhereInputRecursive3(TypedDict, total=False):
    """DataUnit arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    data_hash: Union[_str, 'types.StringFilter']
    data_title: Union[_str, 'types.StringFilter']
    frame: Union[_int, 'types.IntFilter']
    location: Union[_str, 'types.StringFilter']
    lr_data_hash: Union[_str, 'types.StringFilter']
    label_row: 'LabelRowRelationFilter'

    # should be noted that AND and NOT should be Union['DataUnitWhereInputRecursive4', List['DataUnitWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['DataUnitWhereInputRecursive4']
    OR: List['DataUnitWhereInputRecursive4']
    NOT: List['DataUnitWhereInputRecursive4']


class DataUnitWhereInputRecursive4(TypedDict, total=False):
    """DataUnit arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    data_hash: Union[_str, 'types.StringFilter']
    data_title: Union[_str, 'types.StringFilter']
    frame: Union[_int, 'types.IntFilter']
    location: Union[_str, 'types.StringFilter']
    lr_data_hash: Union[_str, 'types.StringFilter']
    label_row: 'LabelRowRelationFilter'



# aggregate DataUnit types


    

class DataUnitScalarWhereWithAggregatesInput(TypedDict, total=False):
    """DataUnit arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    data_hash: Union[_str, 'types.StringWithAggregatesFilter']
    data_title: Union[_str, 'types.StringWithAggregatesFilter']
    frame: Union[_int, 'types.IntWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']
    lr_data_hash: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['DataUnitScalarWhereWithAggregatesInputRecursive1']
    OR: List['DataUnitScalarWhereWithAggregatesInputRecursive1']
    NOT: List['DataUnitScalarWhereWithAggregatesInputRecursive1']


class DataUnitScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """DataUnit arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    data_hash: Union[_str, 'types.StringWithAggregatesFilter']
    data_title: Union[_str, 'types.StringWithAggregatesFilter']
    frame: Union[_int, 'types.IntWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']
    lr_data_hash: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['DataUnitScalarWhereWithAggregatesInputRecursive2']
    OR: List['DataUnitScalarWhereWithAggregatesInputRecursive2']
    NOT: List['DataUnitScalarWhereWithAggregatesInputRecursive2']


class DataUnitScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """DataUnit arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    data_hash: Union[_str, 'types.StringWithAggregatesFilter']
    data_title: Union[_str, 'types.StringWithAggregatesFilter']
    frame: Union[_int, 'types.IntWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']
    lr_data_hash: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['DataUnitScalarWhereWithAggregatesInputRecursive3']
    OR: List['DataUnitScalarWhereWithAggregatesInputRecursive3']
    NOT: List['DataUnitScalarWhereWithAggregatesInputRecursive3']


class DataUnitScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """DataUnit arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    data_hash: Union[_str, 'types.StringWithAggregatesFilter']
    data_title: Union[_str, 'types.StringWithAggregatesFilter']
    frame: Union[_int, 'types.IntWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']
    lr_data_hash: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['DataUnitScalarWhereWithAggregatesInputRecursive4']
    OR: List['DataUnitScalarWhereWithAggregatesInputRecursive4']
    NOT: List['DataUnitScalarWhereWithAggregatesInputRecursive4']


class DataUnitScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """DataUnit arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    data_hash: Union[_str, 'types.StringWithAggregatesFilter']
    data_title: Union[_str, 'types.StringWithAggregatesFilter']
    frame: Union[_int, 'types.IntWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']
    lr_data_hash: Union[_str, 'types.StringWithAggregatesFilter']



class DataUnitGroupByOutput(TypedDict, total=False):
    id: _int
    data_hash: _str
    data_title: _str
    frame: _int
    location: _str
    lr_data_hash: _str
    _sum: 'DataUnitSumAggregateOutput'
    _avg: 'DataUnitAvgAggregateOutput'
    _min: 'DataUnitMinAggregateOutput'
    _max: 'DataUnitMaxAggregateOutput'
    _count: 'DataUnitCountAggregateOutput'


class DataUnitAvgAggregateOutput(TypedDict, total=False):
    """DataUnit output for aggregating averages"""
    id: float
    frame: float


class DataUnitSumAggregateOutput(TypedDict, total=False):
    """DataUnit output for aggregating sums"""
    id: _int
    frame: _int


class DataUnitScalarAggregateOutput(TypedDict, total=False):
    """DataUnit output including scalar fields"""
    id: _int
    data_hash: _str
    data_title: _str
    frame: _int
    location: _str
    lr_data_hash: _str


DataUnitMinAggregateOutput = DataUnitScalarAggregateOutput
DataUnitMaxAggregateOutput = DataUnitScalarAggregateOutput


class DataUnitMaxAggregateInput(TypedDict, total=False):
    """DataUnit input for aggregating by max"""
    id: bool
    data_hash: bool
    data_title: bool
    frame: bool
    location: bool
    lr_data_hash: bool


class DataUnitMinAggregateInput(TypedDict, total=False):
    """DataUnit input for aggregating by min"""
    id: bool
    data_hash: bool
    data_title: bool
    frame: bool
    location: bool
    lr_data_hash: bool


class DataUnitNumberAggregateInput(TypedDict, total=False):
    """DataUnit input for aggregating numbers"""
    id: bool
    frame: bool


DataUnitAvgAggregateInput = DataUnitNumberAggregateInput
DataUnitSumAggregateInput = DataUnitNumberAggregateInput


DataUnitCountAggregateInput = TypedDict(
    'DataUnitCountAggregateInput',
    {
        'id': bool,
        'data_hash': bool,
        'data_title': bool,
        'frame': bool,
        'location': bool,
        'lr_data_hash': bool,
        '_all': bool,
    },
    total=False,
)

DataUnitCountAggregateOutput = TypedDict(
    'DataUnitCountAggregateOutput',
    {
        'id': int,
        'data_hash': int,
        'data_title': int,
        'frame': int,
        'location': int,
        'lr_data_hash': int,
        '_all': int,
    },
    total=False,
)


DataUnitKeys = Literal[
    'id',
    'data_hash',
    'data_title',
    'frame',
    'location',
    'lr_data_hash',
    'label_row',
]
DataUnitScalarFieldKeys = Literal[
    'id',
    'data_hash',
    'data_title',
    'frame',
    'location',
    'lr_data_hash',
]
DataUnitScalarFieldKeysT = TypeVar('DataUnitScalarFieldKeysT', bound=DataUnitScalarFieldKeys)

DataUnitRelationalFieldKeys = Literal[
        'label_row',
    ]

# LabelRow types

class LabelRowOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the LabelRow create method"""
    id: _int
    label_hash: Optional[_str]
    data_units: 'DataUnitCreateManyNestedWithoutRelationsInput'


class LabelRowCreateInput(LabelRowOptionalCreateInput):
    """Required arguments to the LabelRow create method"""
    data_hash: _str
    data_title: _str
    data_type: _str
    created_at: _str
    last_edited_at: _str
    location: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class LabelRowOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the LabelRow create method, without relations"""
    id: _int
    label_hash: Optional[_str]


class LabelRowCreateWithoutRelationsInput(LabelRowOptionalCreateWithoutRelationsInput):
    """Required arguments to the LabelRow create method, without relations"""
    data_hash: _str
    data_title: _str
    data_type: _str
    created_at: _str
    last_edited_at: _str
    location: _str


class LabelRowCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'LabelRowCreateWithoutRelationsInput'
    connect: 'LabelRowWhereUniqueInput'


class LabelRowCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['LabelRowCreateWithoutRelationsInput', List['LabelRowCreateWithoutRelationsInput']]
    connect: Union['LabelRowWhereUniqueInput', List['LabelRowWhereUniqueInput']]


_LabelRowWhereUnique_id_Input = TypedDict(
    '_LabelRowWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_LabelRowWhereUnique_label_hash_Input = TypedDict(
    '_LabelRowWhereUnique_label_hash_Input',
    {
        'label_hash': '_str',
    },
    total=True
)

_LabelRowWhereUnique_data_hash_Input = TypedDict(
    '_LabelRowWhereUnique_data_hash_Input',
    {
        'data_hash': '_str',
    },
    total=True
)

LabelRowWhereUniqueInput = Union[
    '_LabelRowWhereUnique_id_Input',
    '_LabelRowWhereUnique_label_hash_Input',
    '_LabelRowWhereUnique_data_hash_Input',
]


class LabelRowUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    label_hash: Optional[_str]
    data_hash: _str
    data_title: _str
    data_type: _str
    created_at: _str
    last_edited_at: _str
    location: _str
    data_units: 'DataUnitUpdateManyWithoutRelationsInput'


class LabelRowUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    label_hash: Optional[_str]
    data_hash: _str
    data_title: _str
    data_type: _str
    created_at: _str
    last_edited_at: _str
    location: _str


class LabelRowUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['LabelRowCreateWithoutRelationsInput']
    connect: List['LabelRowWhereUniqueInput']
    set: List['LabelRowWhereUniqueInput']
    disconnect: List['LabelRowWhereUniqueInput']
    delete: List['LabelRowWhereUniqueInput']

    # TODO
    # update: List['LabelRowUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['LabelRowUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['LabelRowScalarWhereInput']
    # upsert: List['LabelRowUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['LabelRowCreateOrConnectWithoutRelationsInput']


class LabelRowUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'LabelRowCreateWithoutRelationsInput'
    connect: 'LabelRowWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'LabelRowUpdateInput'
    # upsert: 'LabelRowUpsertWithoutRelationsInput'
    # connectOrCreate: 'LabelRowCreateOrConnectWithoutRelationsInput'


class LabelRowUpsertInput(TypedDict):
    create: 'LabelRowCreateInput'
    update: 'LabelRowUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_LabelRow_id_OrderByInput = TypedDict(
    '_LabelRow_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_LabelRow_label_hash_OrderByInput = TypedDict(
    '_LabelRow_label_hash_OrderByInput',
    {
        'label_hash': 'SortOrder',
    },
    total=True
)

_LabelRow_data_hash_OrderByInput = TypedDict(
    '_LabelRow_data_hash_OrderByInput',
    {
        'data_hash': 'SortOrder',
    },
    total=True
)

_LabelRow_data_title_OrderByInput = TypedDict(
    '_LabelRow_data_title_OrderByInput',
    {
        'data_title': 'SortOrder',
    },
    total=True
)

_LabelRow_data_type_OrderByInput = TypedDict(
    '_LabelRow_data_type_OrderByInput',
    {
        'data_type': 'SortOrder',
    },
    total=True
)

_LabelRow_created_at_OrderByInput = TypedDict(
    '_LabelRow_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_LabelRow_last_edited_at_OrderByInput = TypedDict(
    '_LabelRow_last_edited_at_OrderByInput',
    {
        'last_edited_at': 'SortOrder',
    },
    total=True
)

_LabelRow_location_OrderByInput = TypedDict(
    '_LabelRow_location_OrderByInput',
    {
        'location': 'SortOrder',
    },
    total=True
)

LabelRowOrderByInput = Union[
    '_LabelRow_id_OrderByInput',
    '_LabelRow_label_hash_OrderByInput',
    '_LabelRow_data_hash_OrderByInput',
    '_LabelRow_data_title_OrderByInput',
    '_LabelRow_data_type_OrderByInput',
    '_LabelRow_created_at_OrderByInput',
    '_LabelRow_last_edited_at_OrderByInput',
    '_LabelRow_location_OrderByInput',
]



# recursive LabelRow types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

LabelRowRelationFilter = TypedDict(
    'LabelRowRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class LabelRowListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class LabelRowInclude(TypedDict, total=False):
    """LabelRow relational arguments"""
    data_units: Union[bool, 'FindManyDataUnitArgsFromLabelRow']


    

class TagIncludeFromLabelRow(TypedDict, total=False):
    """Relational arguments for LabelRow"""
    ItemTag: Union[bool, 'FindManyItemTagArgsFromLabelRowRecursive1']


class TagIncludeFromLabelRowRecursive1(TypedDict, total=False):
    """Relational arguments for LabelRow"""
    ItemTag: Union[bool, 'FindManyItemTagArgsFromLabelRowRecursive2']


class TagIncludeFromLabelRowRecursive2(TypedDict, total=False):
    """Relational arguments for LabelRow"""
    ItemTag: Union[bool, 'FindManyItemTagArgsFromLabelRowRecursive3']


class TagIncludeFromLabelRowRecursive3(TypedDict, total=False):
    """Relational arguments for LabelRow"""
    ItemTag: Union[bool, 'FindManyItemTagArgsFromLabelRowRecursive4']


class TagIncludeFromLabelRowRecursive4(TypedDict, total=False):
    """Relational arguments for LabelRow"""

    

class TagArgsFromLabelRow(TypedDict, total=False):
    """Arguments for LabelRow"""
    include: 'TagIncludeFromTagRecursive1'


class TagArgsFromLabelRowRecursive1(TypedDict, total=False):
    """Arguments for LabelRow"""
    include: 'TagIncludeFromTagRecursive2'


class TagArgsFromLabelRowRecursive2(TypedDict, total=False):
    """Arguments for LabelRow"""
    include: 'TagIncludeFromTagRecursive3'


class TagArgsFromLabelRowRecursive3(TypedDict, total=False):
    """Arguments for LabelRow"""
    include: 'TagIncludeFromTagRecursive4'


class TagArgsFromLabelRowRecursive4(TypedDict, total=False):
    """Arguments for LabelRow"""
    
    

class FindManyTagArgsFromLabelRow(TypedDict, total=False):
    """Arguments for LabelRow"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive1'


class FindManyTagArgsFromLabelRowRecursive1(TypedDict, total=False):
    """Arguments for LabelRow"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive2'


class FindManyTagArgsFromLabelRowRecursive2(TypedDict, total=False):
    """Arguments for LabelRow"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive3'


class FindManyTagArgsFromLabelRowRecursive3(TypedDict, total=False):
    """Arguments for LabelRow"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive4'


class FindManyTagArgsFromLabelRowRecursive4(TypedDict, total=False):
    """Arguments for LabelRow"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    
    

class ItemTagIncludeFromLabelRow(TypedDict, total=False):
    """Relational arguments for LabelRow"""
    tag: Union[bool, 'TagArgsFromLabelRowRecursive1']


class ItemTagIncludeFromLabelRowRecursive1(TypedDict, total=False):
    """Relational arguments for LabelRow"""
    tag: Union[bool, 'TagArgsFromLabelRowRecursive2']


class ItemTagIncludeFromLabelRowRecursive2(TypedDict, total=False):
    """Relational arguments for LabelRow"""
    tag: Union[bool, 'TagArgsFromLabelRowRecursive3']


class ItemTagIncludeFromLabelRowRecursive3(TypedDict, total=False):
    """Relational arguments for LabelRow"""
    tag: Union[bool, 'TagArgsFromLabelRowRecursive4']


class ItemTagIncludeFromLabelRowRecursive4(TypedDict, total=False):
    """Relational arguments for LabelRow"""

    

class ItemTagArgsFromLabelRow(TypedDict, total=False):
    """Arguments for LabelRow"""
    include: 'ItemTagIncludeFromItemTagRecursive1'


class ItemTagArgsFromLabelRowRecursive1(TypedDict, total=False):
    """Arguments for LabelRow"""
    include: 'ItemTagIncludeFromItemTagRecursive2'


class ItemTagArgsFromLabelRowRecursive2(TypedDict, total=False):
    """Arguments for LabelRow"""
    include: 'ItemTagIncludeFromItemTagRecursive3'


class ItemTagArgsFromLabelRowRecursive3(TypedDict, total=False):
    """Arguments for LabelRow"""
    include: 'ItemTagIncludeFromItemTagRecursive4'


class ItemTagArgsFromLabelRowRecursive4(TypedDict, total=False):
    """Arguments for LabelRow"""
    
    

class FindManyItemTagArgsFromLabelRow(TypedDict, total=False):
    """Arguments for LabelRow"""
    take: int
    skip: int
    order_by: Union['ItemTagOrderByInput', List['ItemTagOrderByInput']]
    where: 'ItemTagWhereInput'
    cursor: 'ItemTagWhereUniqueInput'
    distinct: List['ItemTagScalarFieldKeys']
    include: 'ItemTagIncludeFromItemTagRecursive1'


class FindManyItemTagArgsFromLabelRowRecursive1(TypedDict, total=False):
    """Arguments for LabelRow"""
    take: int
    skip: int
    order_by: Union['ItemTagOrderByInput', List['ItemTagOrderByInput']]
    where: 'ItemTagWhereInput'
    cursor: 'ItemTagWhereUniqueInput'
    distinct: List['ItemTagScalarFieldKeys']
    include: 'ItemTagIncludeFromItemTagRecursive2'


class FindManyItemTagArgsFromLabelRowRecursive2(TypedDict, total=False):
    """Arguments for LabelRow"""
    take: int
    skip: int
    order_by: Union['ItemTagOrderByInput', List['ItemTagOrderByInput']]
    where: 'ItemTagWhereInput'
    cursor: 'ItemTagWhereUniqueInput'
    distinct: List['ItemTagScalarFieldKeys']
    include: 'ItemTagIncludeFromItemTagRecursive3'


class FindManyItemTagArgsFromLabelRowRecursive3(TypedDict, total=False):
    """Arguments for LabelRow"""
    take: int
    skip: int
    order_by: Union['ItemTagOrderByInput', List['ItemTagOrderByInput']]
    where: 'ItemTagWhereInput'
    cursor: 'ItemTagWhereUniqueInput'
    distinct: List['ItemTagScalarFieldKeys']
    include: 'ItemTagIncludeFromItemTagRecursive4'


class FindManyItemTagArgsFromLabelRowRecursive4(TypedDict, total=False):
    """Arguments for LabelRow"""
    take: int
    skip: int
    order_by: Union['ItemTagOrderByInput', List['ItemTagOrderByInput']]
    where: 'ItemTagWhereInput'
    cursor: 'ItemTagWhereUniqueInput'
    distinct: List['ItemTagScalarFieldKeys']
    
    

class DataUnitIncludeFromLabelRow(TypedDict, total=False):
    """Relational arguments for LabelRow"""
    label_row: Union[bool, 'LabelRowArgsFromLabelRowRecursive1']


class DataUnitIncludeFromLabelRowRecursive1(TypedDict, total=False):
    """Relational arguments for LabelRow"""
    label_row: Union[bool, 'LabelRowArgsFromLabelRowRecursive2']


class DataUnitIncludeFromLabelRowRecursive2(TypedDict, total=False):
    """Relational arguments for LabelRow"""
    label_row: Union[bool, 'LabelRowArgsFromLabelRowRecursive3']


class DataUnitIncludeFromLabelRowRecursive3(TypedDict, total=False):
    """Relational arguments for LabelRow"""
    label_row: Union[bool, 'LabelRowArgsFromLabelRowRecursive4']


class DataUnitIncludeFromLabelRowRecursive4(TypedDict, total=False):
    """Relational arguments for LabelRow"""

    

class DataUnitArgsFromLabelRow(TypedDict, total=False):
    """Arguments for LabelRow"""
    include: 'DataUnitIncludeFromDataUnitRecursive1'


class DataUnitArgsFromLabelRowRecursive1(TypedDict, total=False):
    """Arguments for LabelRow"""
    include: 'DataUnitIncludeFromDataUnitRecursive2'


class DataUnitArgsFromLabelRowRecursive2(TypedDict, total=False):
    """Arguments for LabelRow"""
    include: 'DataUnitIncludeFromDataUnitRecursive3'


class DataUnitArgsFromLabelRowRecursive3(TypedDict, total=False):
    """Arguments for LabelRow"""
    include: 'DataUnitIncludeFromDataUnitRecursive4'


class DataUnitArgsFromLabelRowRecursive4(TypedDict, total=False):
    """Arguments for LabelRow"""
    
    

class FindManyDataUnitArgsFromLabelRow(TypedDict, total=False):
    """Arguments for LabelRow"""
    take: int
    skip: int
    order_by: Union['DataUnitOrderByInput', List['DataUnitOrderByInput']]
    where: 'DataUnitWhereInput'
    cursor: 'DataUnitWhereUniqueInput'
    distinct: List['DataUnitScalarFieldKeys']
    include: 'DataUnitIncludeFromDataUnitRecursive1'


class FindManyDataUnitArgsFromLabelRowRecursive1(TypedDict, total=False):
    """Arguments for LabelRow"""
    take: int
    skip: int
    order_by: Union['DataUnitOrderByInput', List['DataUnitOrderByInput']]
    where: 'DataUnitWhereInput'
    cursor: 'DataUnitWhereUniqueInput'
    distinct: List['DataUnitScalarFieldKeys']
    include: 'DataUnitIncludeFromDataUnitRecursive2'


class FindManyDataUnitArgsFromLabelRowRecursive2(TypedDict, total=False):
    """Arguments for LabelRow"""
    take: int
    skip: int
    order_by: Union['DataUnitOrderByInput', List['DataUnitOrderByInput']]
    where: 'DataUnitWhereInput'
    cursor: 'DataUnitWhereUniqueInput'
    distinct: List['DataUnitScalarFieldKeys']
    include: 'DataUnitIncludeFromDataUnitRecursive3'


class FindManyDataUnitArgsFromLabelRowRecursive3(TypedDict, total=False):
    """Arguments for LabelRow"""
    take: int
    skip: int
    order_by: Union['DataUnitOrderByInput', List['DataUnitOrderByInput']]
    where: 'DataUnitWhereInput'
    cursor: 'DataUnitWhereUniqueInput'
    distinct: List['DataUnitScalarFieldKeys']
    include: 'DataUnitIncludeFromDataUnitRecursive4'


class FindManyDataUnitArgsFromLabelRowRecursive4(TypedDict, total=False):
    """Arguments for LabelRow"""
    take: int
    skip: int
    order_by: Union['DataUnitOrderByInput', List['DataUnitOrderByInput']]
    where: 'DataUnitWhereInput'
    cursor: 'DataUnitWhereUniqueInput'
    distinct: List['DataUnitScalarFieldKeys']
    
    

class LabelRowIncludeFromLabelRow(TypedDict, total=False):
    """Relational arguments for LabelRow"""
    data_units: Union[bool, 'FindManyDataUnitArgsFromLabelRowRecursive1']


class LabelRowIncludeFromLabelRowRecursive1(TypedDict, total=False):
    """Relational arguments for LabelRow"""
    data_units: Union[bool, 'FindManyDataUnitArgsFromLabelRowRecursive2']


class LabelRowIncludeFromLabelRowRecursive2(TypedDict, total=False):
    """Relational arguments for LabelRow"""
    data_units: Union[bool, 'FindManyDataUnitArgsFromLabelRowRecursive3']


class LabelRowIncludeFromLabelRowRecursive3(TypedDict, total=False):
    """Relational arguments for LabelRow"""
    data_units: Union[bool, 'FindManyDataUnitArgsFromLabelRowRecursive4']


class LabelRowIncludeFromLabelRowRecursive4(TypedDict, total=False):
    """Relational arguments for LabelRow"""

    

class LabelRowArgsFromLabelRow(TypedDict, total=False):
    """Arguments for LabelRow"""
    include: 'LabelRowIncludeFromLabelRowRecursive1'


class LabelRowArgsFromLabelRowRecursive1(TypedDict, total=False):
    """Arguments for LabelRow"""
    include: 'LabelRowIncludeFromLabelRowRecursive2'


class LabelRowArgsFromLabelRowRecursive2(TypedDict, total=False):
    """Arguments for LabelRow"""
    include: 'LabelRowIncludeFromLabelRowRecursive3'


class LabelRowArgsFromLabelRowRecursive3(TypedDict, total=False):
    """Arguments for LabelRow"""
    include: 'LabelRowIncludeFromLabelRowRecursive4'


class LabelRowArgsFromLabelRowRecursive4(TypedDict, total=False):
    """Arguments for LabelRow"""
    
    

class FindManyLabelRowArgsFromLabelRow(TypedDict, total=False):
    """Arguments for LabelRow"""
    take: int
    skip: int
    order_by: Union['LabelRowOrderByInput', List['LabelRowOrderByInput']]
    where: 'LabelRowWhereInput'
    cursor: 'LabelRowWhereUniqueInput'
    distinct: List['LabelRowScalarFieldKeys']
    include: 'LabelRowIncludeFromLabelRowRecursive1'


class FindManyLabelRowArgsFromLabelRowRecursive1(TypedDict, total=False):
    """Arguments for LabelRow"""
    take: int
    skip: int
    order_by: Union['LabelRowOrderByInput', List['LabelRowOrderByInput']]
    where: 'LabelRowWhereInput'
    cursor: 'LabelRowWhereUniqueInput'
    distinct: List['LabelRowScalarFieldKeys']
    include: 'LabelRowIncludeFromLabelRowRecursive2'


class FindManyLabelRowArgsFromLabelRowRecursive2(TypedDict, total=False):
    """Arguments for LabelRow"""
    take: int
    skip: int
    order_by: Union['LabelRowOrderByInput', List['LabelRowOrderByInput']]
    where: 'LabelRowWhereInput'
    cursor: 'LabelRowWhereUniqueInput'
    distinct: List['LabelRowScalarFieldKeys']
    include: 'LabelRowIncludeFromLabelRowRecursive3'


class FindManyLabelRowArgsFromLabelRowRecursive3(TypedDict, total=False):
    """Arguments for LabelRow"""
    take: int
    skip: int
    order_by: Union['LabelRowOrderByInput', List['LabelRowOrderByInput']]
    where: 'LabelRowWhereInput'
    cursor: 'LabelRowWhereUniqueInput'
    distinct: List['LabelRowScalarFieldKeys']
    include: 'LabelRowIncludeFromLabelRowRecursive4'


class FindManyLabelRowArgsFromLabelRowRecursive4(TypedDict, total=False):
    """Arguments for LabelRow"""
    take: int
    skip: int
    order_by: Union['LabelRowOrderByInput', List['LabelRowOrderByInput']]
    where: 'LabelRowWhereInput'
    cursor: 'LabelRowWhereUniqueInput'
    distinct: List['LabelRowScalarFieldKeys']
    


FindManyLabelRowArgs = FindManyLabelRowArgsFromLabelRow
FindFirstLabelRowArgs = FindManyLabelRowArgsFromLabelRow


    

class LabelRowWhereInput(TypedDict, total=False):
    """LabelRow arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    label_hash: Union[None, _str, 'types.StringFilter']
    data_hash: Union[_str, 'types.StringFilter']
    data_title: Union[_str, 'types.StringFilter']
    data_type: Union[_str, 'types.StringFilter']
    created_at: Union[_str, 'types.StringFilter']
    last_edited_at: Union[_str, 'types.StringFilter']
    location: Union[_str, 'types.StringFilter']
    data_units: 'DataUnitListRelationFilter'

    # should be noted that AND and NOT should be Union['LabelRowWhereInputRecursive1', List['LabelRowWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['LabelRowWhereInputRecursive1']
    OR: List['LabelRowWhereInputRecursive1']
    NOT: List['LabelRowWhereInputRecursive1']


class LabelRowWhereInputRecursive1(TypedDict, total=False):
    """LabelRow arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    label_hash: Union[None, _str, 'types.StringFilter']
    data_hash: Union[_str, 'types.StringFilter']
    data_title: Union[_str, 'types.StringFilter']
    data_type: Union[_str, 'types.StringFilter']
    created_at: Union[_str, 'types.StringFilter']
    last_edited_at: Union[_str, 'types.StringFilter']
    location: Union[_str, 'types.StringFilter']
    data_units: 'DataUnitListRelationFilter'

    # should be noted that AND and NOT should be Union['LabelRowWhereInputRecursive2', List['LabelRowWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['LabelRowWhereInputRecursive2']
    OR: List['LabelRowWhereInputRecursive2']
    NOT: List['LabelRowWhereInputRecursive2']


class LabelRowWhereInputRecursive2(TypedDict, total=False):
    """LabelRow arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    label_hash: Union[None, _str, 'types.StringFilter']
    data_hash: Union[_str, 'types.StringFilter']
    data_title: Union[_str, 'types.StringFilter']
    data_type: Union[_str, 'types.StringFilter']
    created_at: Union[_str, 'types.StringFilter']
    last_edited_at: Union[_str, 'types.StringFilter']
    location: Union[_str, 'types.StringFilter']
    data_units: 'DataUnitListRelationFilter'

    # should be noted that AND and NOT should be Union['LabelRowWhereInputRecursive3', List['LabelRowWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['LabelRowWhereInputRecursive3']
    OR: List['LabelRowWhereInputRecursive3']
    NOT: List['LabelRowWhereInputRecursive3']


class LabelRowWhereInputRecursive3(TypedDict, total=False):
    """LabelRow arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    label_hash: Union[None, _str, 'types.StringFilter']
    data_hash: Union[_str, 'types.StringFilter']
    data_title: Union[_str, 'types.StringFilter']
    data_type: Union[_str, 'types.StringFilter']
    created_at: Union[_str, 'types.StringFilter']
    last_edited_at: Union[_str, 'types.StringFilter']
    location: Union[_str, 'types.StringFilter']
    data_units: 'DataUnitListRelationFilter'

    # should be noted that AND and NOT should be Union['LabelRowWhereInputRecursive4', List['LabelRowWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['LabelRowWhereInputRecursive4']
    OR: List['LabelRowWhereInputRecursive4']
    NOT: List['LabelRowWhereInputRecursive4']


class LabelRowWhereInputRecursive4(TypedDict, total=False):
    """LabelRow arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    label_hash: Union[None, _str, 'types.StringFilter']
    data_hash: Union[_str, 'types.StringFilter']
    data_title: Union[_str, 'types.StringFilter']
    data_type: Union[_str, 'types.StringFilter']
    created_at: Union[_str, 'types.StringFilter']
    last_edited_at: Union[_str, 'types.StringFilter']
    location: Union[_str, 'types.StringFilter']
    data_units: 'DataUnitListRelationFilter'



# aggregate LabelRow types


    

class LabelRowScalarWhereWithAggregatesInput(TypedDict, total=False):
    """LabelRow arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    label_hash: Union[_str, 'types.StringWithAggregatesFilter']
    data_hash: Union[_str, 'types.StringWithAggregatesFilter']
    data_title: Union[_str, 'types.StringWithAggregatesFilter']
    data_type: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[_str, 'types.StringWithAggregatesFilter']
    last_edited_at: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['LabelRowScalarWhereWithAggregatesInputRecursive1']
    OR: List['LabelRowScalarWhereWithAggregatesInputRecursive1']
    NOT: List['LabelRowScalarWhereWithAggregatesInputRecursive1']


class LabelRowScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """LabelRow arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    label_hash: Union[_str, 'types.StringWithAggregatesFilter']
    data_hash: Union[_str, 'types.StringWithAggregatesFilter']
    data_title: Union[_str, 'types.StringWithAggregatesFilter']
    data_type: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[_str, 'types.StringWithAggregatesFilter']
    last_edited_at: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['LabelRowScalarWhereWithAggregatesInputRecursive2']
    OR: List['LabelRowScalarWhereWithAggregatesInputRecursive2']
    NOT: List['LabelRowScalarWhereWithAggregatesInputRecursive2']


class LabelRowScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """LabelRow arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    label_hash: Union[_str, 'types.StringWithAggregatesFilter']
    data_hash: Union[_str, 'types.StringWithAggregatesFilter']
    data_title: Union[_str, 'types.StringWithAggregatesFilter']
    data_type: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[_str, 'types.StringWithAggregatesFilter']
    last_edited_at: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['LabelRowScalarWhereWithAggregatesInputRecursive3']
    OR: List['LabelRowScalarWhereWithAggregatesInputRecursive3']
    NOT: List['LabelRowScalarWhereWithAggregatesInputRecursive3']


class LabelRowScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """LabelRow arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    label_hash: Union[_str, 'types.StringWithAggregatesFilter']
    data_hash: Union[_str, 'types.StringWithAggregatesFilter']
    data_title: Union[_str, 'types.StringWithAggregatesFilter']
    data_type: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[_str, 'types.StringWithAggregatesFilter']
    last_edited_at: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['LabelRowScalarWhereWithAggregatesInputRecursive4']
    OR: List['LabelRowScalarWhereWithAggregatesInputRecursive4']
    NOT: List['LabelRowScalarWhereWithAggregatesInputRecursive4']


class LabelRowScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """LabelRow arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    label_hash: Union[_str, 'types.StringWithAggregatesFilter']
    data_hash: Union[_str, 'types.StringWithAggregatesFilter']
    data_title: Union[_str, 'types.StringWithAggregatesFilter']
    data_type: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[_str, 'types.StringWithAggregatesFilter']
    last_edited_at: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']



class LabelRowGroupByOutput(TypedDict, total=False):
    id: _int
    label_hash: _str
    data_hash: _str
    data_title: _str
    data_type: _str
    created_at: _str
    last_edited_at: _str
    location: _str
    _sum: 'LabelRowSumAggregateOutput'
    _avg: 'LabelRowAvgAggregateOutput'
    _min: 'LabelRowMinAggregateOutput'
    _max: 'LabelRowMaxAggregateOutput'
    _count: 'LabelRowCountAggregateOutput'


class LabelRowAvgAggregateOutput(TypedDict, total=False):
    """LabelRow output for aggregating averages"""
    id: float


class LabelRowSumAggregateOutput(TypedDict, total=False):
    """LabelRow output for aggregating sums"""
    id: _int


class LabelRowScalarAggregateOutput(TypedDict, total=False):
    """LabelRow output including scalar fields"""
    id: _int
    label_hash: _str
    data_hash: _str
    data_title: _str
    data_type: _str
    created_at: _str
    last_edited_at: _str
    location: _str


LabelRowMinAggregateOutput = LabelRowScalarAggregateOutput
LabelRowMaxAggregateOutput = LabelRowScalarAggregateOutput


class LabelRowMaxAggregateInput(TypedDict, total=False):
    """LabelRow input for aggregating by max"""
    id: bool
    label_hash: bool
    data_hash: bool
    data_title: bool
    data_type: bool
    created_at: bool
    last_edited_at: bool
    location: bool


class LabelRowMinAggregateInput(TypedDict, total=False):
    """LabelRow input for aggregating by min"""
    id: bool
    label_hash: bool
    data_hash: bool
    data_title: bool
    data_type: bool
    created_at: bool
    last_edited_at: bool
    location: bool


class LabelRowNumberAggregateInput(TypedDict, total=False):
    """LabelRow input for aggregating numbers"""
    id: bool


LabelRowAvgAggregateInput = LabelRowNumberAggregateInput
LabelRowSumAggregateInput = LabelRowNumberAggregateInput


LabelRowCountAggregateInput = TypedDict(
    'LabelRowCountAggregateInput',
    {
        'id': bool,
        'label_hash': bool,
        'data_hash': bool,
        'data_title': bool,
        'data_type': bool,
        'created_at': bool,
        'last_edited_at': bool,
        'location': bool,
        '_all': bool,
    },
    total=False,
)

LabelRowCountAggregateOutput = TypedDict(
    'LabelRowCountAggregateOutput',
    {
        'id': int,
        'label_hash': int,
        'data_hash': int,
        'data_title': int,
        'data_type': int,
        'created_at': int,
        'last_edited_at': int,
        'location': int,
        '_all': int,
    },
    total=False,
)


LabelRowKeys = Literal[
    'id',
    'label_hash',
    'data_hash',
    'data_title',
    'data_type',
    'created_at',
    'last_edited_at',
    'location',
    'data_units',
]
LabelRowScalarFieldKeys = Literal[
    'id',
    'label_hash',
    'data_hash',
    'data_title',
    'data_type',
    'created_at',
    'last_edited_at',
    'location',
]
LabelRowScalarFieldKeysT = TypeVar('LabelRowScalarFieldKeysT', bound=LabelRowScalarFieldKeys)

LabelRowRelationalFieldKeys = Literal[
        'data_units',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields