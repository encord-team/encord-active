# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template actions.py.jinja --
from typing import TypeVar
import warnings

from . import types, errors, bases

if TYPE_CHECKING:
    from .client import Client
    from .bases import _PrismaModel


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class TagActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Tag]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = Tag.prisma().query_raw(
            'SELECT * FROM Tag WHERE id = ?',
            1103527590,
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Tag
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = Tag.prisma().query_first(
            'SELECT * FROM Tag WHERE name = ?',
            'dhheabfhf',
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.TagCreateInput,
        include: Optional[types.TagInclude] = None
    ) -> _PrismaModelT:
        """Create a new Tag record.

        Parameters
        ----------
        data
            Tag record data
        include
            Specifies which relations should be loaded on the returned Tag model

        Returns
        -------
        prisma.models.Tag
            The created Tag record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Tag record from just the required fields
        tag = Tag.prisma().create(
            data={
                # data to create a Tag record
                'name': 'ggciceaie',
                'scope': 'bbehjachib',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='createOne',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    def create_many(
        self,
        data: List[types.TagCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Tag records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Tag record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = Tag.prisma().create_many(
            data=[
                {
                    # data to create a Tag record
                    'name': 'cadfabfehe',
                    'scope': 'dgiiaaijj',
                },
                {
                    # data to create a Tag record
                    'name': 'bfaiacjjfc',
                    'scope': 'eigcfgbif',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = self._client._execute(
            operation='mutation',
            method='createMany',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    def delete(
        self,
        where: types.TagWhereUniqueInput,
        include: Optional[types.TagInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Tag record.

        Parameters
        ----------
        where
            Tag filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Tag model

        Returns
        -------
        prisma.models.Tag
            The deleted Tag record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        tag = Tag.prisma().delete(
            where={
                'id': 1062517886,
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                operation='mutation',
                method='deleteOne',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    def find_unique(
        self,
        where: types.TagWhereUniqueInput,
        include: Optional[types.TagInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Tag record.

        Parameters
        ----------
        where
            Tag filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Tag model

        Returns
        -------
        prisma.models.Tag
            The found Tag record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        tag = Tag.prisma().find_unique(
            where={
                'id': 267834847,
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='query',
            method='findUnique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.TagWhereInput] = None,
        cursor: Optional[types.TagWhereUniqueInput] = None,
        include: Optional[types.TagInclude] = None,
        order: Optional[Union[types.TagOrderByInput, List[types.TagOrderByInput]]] = None,
        distinct: Optional[List[types.TagScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Tag records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Tag records returned
        skip
            Ignore the first N results
        where
            Tag filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Tag model
        order
            Order the returned Tag records by any field
        distinct
            Filter Tag records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Tag]
            The list of all Tag records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Tag records
        tags = Tag.prisma().find_many(take=10)

        # find the first 5 Tag records ordered by the scope field
        tags = Tag.prisma().find_many(
            take=5,
            order={
                'scope': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='query',
            method='findMany',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [self._model.parse_obj(r) for r in resp['data']['result']]

    def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.TagWhereInput] = None,
        cursor: Optional[types.TagWhereUniqueInput] = None,
        include: Optional[types.TagInclude] = None,
        order: Optional[Union[types.TagOrderByInput, List[types.TagOrderByInput]]] = None,
        distinct: Optional[List[types.TagScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Tag record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Tag filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Tag model
        order
            Order the returned Tag records by any field
        distinct
            Filter Tag records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Tag
            The first Tag record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Tag record ordered by the id field
        tag = Tag.prisma().find_first(
            skip=1,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='query',
            method='findFirst',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    def update(
        self,
        data: types.TagUpdateInput,
        where: types.TagWhereUniqueInput,
        include: Optional[types.TagInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Tag record.

        Parameters
        ----------
        data
            Tag record data specifying what to update
        where
            Tag filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Tag model

        Returns
        -------
        prisma.models.Tag
            The updated Tag record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        tag = Tag.prisma().update(
            where={
                'id': 180171308,
            },
            data={
                # data to update the Tag record to
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                operation='mutation',
                method='updateOne',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    def upsert(
        self,
        where: types.TagWhereUniqueInput,
        data: types.TagUpsertInput,
        include: Optional[types.TagInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Tag filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Tag model

        Returns
        -------
        prisma.models.Tag
            The created or updated Tag record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        tag = Tag.prisma().upsert(
            where={
                'id': 836760821,
            },
            data={
                'create': {
                    'id': 836760821,
                    'name': 'bfaiacjjfc',
                    'scope': 'eigcfgbif',
                },
                'update': {
                    'name': 'bfaiacjjfc',
                    'scope': 'eigcfgbif',
                },
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='upsertOne',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    def update_many(
        self,
        data: types.TagUpdateManyMutationInput,
        where: types.TagWhereInput,
    ) -> int:
        """Update multiple Tag records

        Parameters
        ----------
        data
            Tag data to update the selected Tag records to
        where
            Filter to select the Tag records to update

        Returns
        -------
        int
            The total number of Tag records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Tag records
        total = Tag.prisma().update_many(
            data={
                'name': 'fjfddhigg'
            },
            where={}
        )
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='updateMany',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.TagWhereInput] = None,
        cursor: Optional[types.TagWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Tag records present in the database

        Parameters
        ----------
        select
            Select the Tag fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Tag filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.TagCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = Tag.prisma().count()

        # results: prisma.types.TagCountAggregateOutput
        results = Tag.prisma().count(
            select={
                '_all': True,
                'scope': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.TagCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.TagWhereInput] = None,
        cursor: Optional[types.TagWhereUniqueInput] = None,
    ) -> types.TagCountAggregateOutput:
        ...

    def count(
        self,
        select: Optional[types.TagCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.TagWhereInput] = None,
        cursor: Optional[types.TagWhereUniqueInput] = None,
    ) -> Union[int, types.TagCountAggregateOutput]:
        """Count the number of Tag records present in the database

        Parameters
        ----------
        select
            Select the Tag fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Tag filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.TagCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = Tag.prisma().count()

        # results: prisma.types.TagCountAggregateOutput
        results = Tag.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = self._client._execute(
            operation='query',
            method='aggregate',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.TagCountAggregateOutput, resp['data']['result']['_count'])

    def delete_many(
        self,
        where: Optional[types.TagWhereInput] = None
    ) -> int:
        """Delete multiple Tag records.

        Parameters
        ----------
        where
            Optional Tag filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Tag records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Tag records
        total = Tag.prisma().delete_many()
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='deleteMany',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: List['types.TagScalarFieldKeys'],
        *,
        where: Optional['types.TagWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.TagAvgAggregateInput'] = None,
        sum: Optional['types.TagSumAggregateInput'] = None,
        min: Optional['types.TagMinAggregateInput'] = None,
        max: Optional['types.TagMaxAggregateInput'] = None,
        having: Optional['types.TagScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.TagCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.TagScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.TagScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.TagGroupByOutput']:
        """Group Tag records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Tag fields to group records by
        where
            Tag filter to select records
        take
            Limit the maximum number of Tag records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.TagGroupByOutput]
            A list of dictionaries representing the Tag record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Tag records by name values
        # and count how many records are in each group
        results = Tag.prisma().group_by(
            ['name'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = self._client._execute(
            operation='query',
            method='groupBy',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class ItemTagActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.ItemTag]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = ItemTag.prisma().query_raw(
            'SELECT * FROM ItemTag WHERE label_hash = ?',
            'hjaecfifb',
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.ItemTag
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = ItemTag.prisma().query_first(
            'SELECT * FROM ItemTag WHERE data_hash = ?',
            'cbbbjbfcii',
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.ItemTagCreateInput,
        include: Optional[types.ItemTagInclude] = None
    ) -> _PrismaModelT:
        """Create a new ItemTag record.

        Parameters
        ----------
        data
            ItemTag record data
        include
            Specifies which relations should be loaded on the returned ItemTag model

        Returns
        -------
        prisma.models.ItemTag
            The created ItemTag record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a ItemTag record from just the required fields
        itemtag = ItemTag.prisma().create(
            data={
                # data to create a ItemTag record
                'label_hash': 'bbejhfidcb',
                'data_hash': 'bgeecijdgg',
                'frame': 1388290519,
                'object_hash': 'bgehebiafc',
                'tag_id': 1675546029,
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='createOne',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    def create_many(
        self,
        data: List[types.ItemTagCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple ItemTag records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of ItemTag record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = ItemTag.prisma().create_many(
            data=[
                {
                    # data to create a ItemTag record
                    'label_hash': 'bhghchehcc',
                    'data_hash': 'dcgchcbbf',
                    'frame': 1343201072,
                    'object_hash': 'ghfhiafcb',
                    'tag_id': 744964398,
                },
                {
                    # data to create a ItemTag record
                    'label_hash': 'bjgjgibgbf',
                    'data_hash': 'bbbgbhfjge',
                    'frame': 861472101,
                    'object_hash': 'bdadaadhag',
                    'tag_id': 1686638315,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = self._client._execute(
            operation='mutation',
            method='createMany',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    def delete(
        self,
        where: types.ItemTagWhereUniqueInput,
        include: Optional[types.ItemTagInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single ItemTag record.

        Parameters
        ----------
        where
            ItemTag filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned ItemTag model

        Returns
        -------
        prisma.models.ItemTag
            The deleted ItemTag record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        itemtag = ItemTag.prisma().delete(
            where={
                # ItemTag where unique filter

            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                operation='mutation',
                method='deleteOne',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    def find_unique(
        self,
        where: types.ItemTagWhereUniqueInput,
        include: Optional[types.ItemTagInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique ItemTag record.

        Parameters
        ----------
        where
            ItemTag filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned ItemTag model

        Returns
        -------
        prisma.models.ItemTag
            The found ItemTag record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        itemtag = ItemTag.prisma().find_unique(
            where={
                # ItemTag where unique filter

            },
        )
        ```
        """
        resp = self._client._execute(
            operation='query',
            method='findUnique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ItemTagWhereInput] = None,
        cursor: Optional[types.ItemTagWhereUniqueInput] = None,
        include: Optional[types.ItemTagInclude] = None,
        order: Optional[Union[types.ItemTagOrderByInput, List[types.ItemTagOrderByInput]]] = None,
        distinct: Optional[List[types.ItemTagScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple ItemTag records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of ItemTag records returned
        skip
            Ignore the first N results
        where
            ItemTag filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned ItemTag model
        order
            Order the returned ItemTag records by any field
        distinct
            Filter ItemTag records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.ItemTag]
            The list of all ItemTag records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 ItemTag records
        itemtags = ItemTag.prisma().find_many(take=10)

        # find the first 5 ItemTag records ordered by the frame field
        itemtags = ItemTag.prisma().find_many(
            take=5,
            order={
                'frame': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='query',
            method='findMany',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [self._model.parse_obj(r) for r in resp['data']['result']]

    def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ItemTagWhereInput] = None,
        cursor: Optional[types.ItemTagWhereUniqueInput] = None,
        include: Optional[types.ItemTagInclude] = None,
        order: Optional[Union[types.ItemTagOrderByInput, List[types.ItemTagOrderByInput]]] = None,
        distinct: Optional[List[types.ItemTagScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single ItemTag record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            ItemTag filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned ItemTag model
        order
            Order the returned ItemTag records by any field
        distinct
            Filter ItemTag records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.ItemTag
            The first ItemTag record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second ItemTag record ordered by the object_hash field
        itemtag = ItemTag.prisma().find_first(
            skip=1,
            order={
                'object_hash': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='query',
            method='findFirst',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    def update(
        self,
        data: types.ItemTagUpdateInput,
        where: types.ItemTagWhereUniqueInput,
        include: Optional[types.ItemTagInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single ItemTag record.

        Parameters
        ----------
        data
            ItemTag record data specifying what to update
        where
            ItemTag filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned ItemTag model

        Returns
        -------
        prisma.models.ItemTag
            The updated ItemTag record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        itemtag = ItemTag.prisma().update(
            where={
                # ItemTag where unique filter

            },
            data={
                # data to update the ItemTag record to
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                operation='mutation',
                method='updateOne',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    def upsert(
        self,
        where: types.ItemTagWhereUniqueInput,
        data: types.ItemTagUpsertInput,
        include: Optional[types.ItemTagInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            ItemTag filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned ItemTag model

        Returns
        -------
        prisma.models.ItemTag
            The created or updated ItemTag record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        itemtag = ItemTag.prisma().upsert(
            where={
                # ItemTag where unique filter
            },
            data={
                'create': {
                    # ItemTag data to be set if the record does not exist
                },
                'update': {
                    # ItemTag data to be set if the record does exist
                },
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='upsertOne',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    def update_many(
        self,
        data: types.ItemTagUpdateManyMutationInput,
        where: types.ItemTagWhereInput,
    ) -> int:
        """Update multiple ItemTag records

        Parameters
        ----------
        data
            ItemTag data to update the selected ItemTag records to
        where
            Filter to select the ItemTag records to update

        Returns
        -------
        int
            The total number of ItemTag records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all ItemTag records
        total = ItemTag.prisma().update_many(
            data={
                'tag_id': 2000430152
            },
            where={}
        )
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='updateMany',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ItemTagWhereInput] = None,
        cursor: Optional[types.ItemTagWhereUniqueInput] = None,
    ) -> int:
        """Count the number of ItemTag records present in the database

        Parameters
        ----------
        select
            Select the ItemTag fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            ItemTag filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ItemTagCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = ItemTag.prisma().count()

        # results: prisma.types.ItemTagCountAggregateOutput
        results = ItemTag.prisma().count(
            select={
                '_all': True,
                'label_hash': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.ItemTagCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ItemTagWhereInput] = None,
        cursor: Optional[types.ItemTagWhereUniqueInput] = None,
    ) -> types.ItemTagCountAggregateOutput:
        ...

    def count(
        self,
        select: Optional[types.ItemTagCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ItemTagWhereInput] = None,
        cursor: Optional[types.ItemTagWhereUniqueInput] = None,
    ) -> Union[int, types.ItemTagCountAggregateOutput]:
        """Count the number of ItemTag records present in the database

        Parameters
        ----------
        select
            Select the ItemTag fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            ItemTag filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ItemTagCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = ItemTag.prisma().count()

        # results: prisma.types.ItemTagCountAggregateOutput
        results = ItemTag.prisma().count(
            select={
                '_all': True,
                'data_hash': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = self._client._execute(
            operation='query',
            method='aggregate',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.ItemTagCountAggregateOutput, resp['data']['result']['_count'])

    def delete_many(
        self,
        where: Optional[types.ItemTagWhereInput] = None
    ) -> int:
        """Delete multiple ItemTag records.

        Parameters
        ----------
        where
            Optional ItemTag filter to find the records to be deleted

        Returns
        -------
        int
            The total number of ItemTag records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all ItemTag records
        total = ItemTag.prisma().delete_many()
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='deleteMany',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: List['types.ItemTagScalarFieldKeys'],
        *,
        where: Optional['types.ItemTagWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.ItemTagAvgAggregateInput'] = None,
        sum: Optional['types.ItemTagSumAggregateInput'] = None,
        min: Optional['types.ItemTagMinAggregateInput'] = None,
        max: Optional['types.ItemTagMaxAggregateInput'] = None,
        having: Optional['types.ItemTagScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.ItemTagCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.ItemTagScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.ItemTagScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.ItemTagGroupByOutput']:
        """Group ItemTag records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar ItemTag fields to group records by
        where
            ItemTag filter to select records
        take
            Limit the maximum number of ItemTag records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.ItemTagGroupByOutput]
            A list of dictionaries representing the ItemTag record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group ItemTag records by frame values
        # and count how many records are in each group
        results = ItemTag.prisma().group_by(
            ['frame'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = self._client._execute(
            operation='query',
            method='groupBy',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class DataUnitActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.DataUnit]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = DataUnit.prisma().query_raw(
            'SELECT * FROM DataUnit WHERE id = ?',
            1868141281,
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.DataUnit
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = DataUnit.prisma().query_first(
            'SELECT * FROM DataUnit WHERE data_hash = ?',
            'bigaiehgcc',
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.DataUnitCreateInput,
        include: Optional[types.DataUnitInclude] = None
    ) -> _PrismaModelT:
        """Create a new DataUnit record.

        Parameters
        ----------
        data
            DataUnit record data
        include
            Specifies which relations should be loaded on the returned DataUnit model

        Returns
        -------
        prisma.models.DataUnit
            The created DataUnit record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a DataUnit record from just the required fields
        dataunit = DataUnit.prisma().create(
            data={
                # data to create a DataUnit record
                'data_hash': 'beeifcbebf',
                'data_title': 'bgcigfahea',
                'frame': 1249606685,
                'location': 'idfjadbcc',
                'lr_data_hash': 'hgdhbjhhj',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='createOne',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    def create_many(
        self,
        data: List[types.DataUnitCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple DataUnit records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of DataUnit record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = DataUnit.prisma().create_many(
            data=[
                {
                    # data to create a DataUnit record
                    'data_hash': 'ecjjjfbae',
                    'data_title': 'bhhfibbigf',
                    'frame': 893145566,
                    'location': 'jjfeafhfj',
                    'lr_data_hash': 'cbachdgfce',
                },
                {
                    # data to create a DataUnit record
                    'data_hash': 'chbfcacbd',
                    'data_title': 'efggddide',
                    'frame': 2058258651,
                    'location': 'bfidgijfjc',
                    'lr_data_hash': 'ihieecagf',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = self._client._execute(
            operation='mutation',
            method='createMany',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    def delete(
        self,
        where: types.DataUnitWhereUniqueInput,
        include: Optional[types.DataUnitInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single DataUnit record.

        Parameters
        ----------
        where
            DataUnit filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned DataUnit model

        Returns
        -------
        prisma.models.DataUnit
            The deleted DataUnit record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        dataunit = DataUnit.prisma().delete(
            where={
                'id': 1675280054,
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                operation='mutation',
                method='deleteOne',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    def find_unique(
        self,
        where: types.DataUnitWhereUniqueInput,
        include: Optional[types.DataUnitInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique DataUnit record.

        Parameters
        ----------
        where
            DataUnit filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned DataUnit model

        Returns
        -------
        prisma.models.DataUnit
            The found DataUnit record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        dataunit = DataUnit.prisma().find_unique(
            where={
                'id': 1627576247,
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='query',
            method='findUnique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DataUnitWhereInput] = None,
        cursor: Optional[types.DataUnitWhereUniqueInput] = None,
        include: Optional[types.DataUnitInclude] = None,
        order: Optional[Union[types.DataUnitOrderByInput, List[types.DataUnitOrderByInput]]] = None,
        distinct: Optional[List[types.DataUnitScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple DataUnit records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of DataUnit records returned
        skip
            Ignore the first N results
        where
            DataUnit filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned DataUnit model
        order
            Order the returned DataUnit records by any field
        distinct
            Filter DataUnit records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.DataUnit]
            The list of all DataUnit records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 DataUnit records
        dataunits = DataUnit.prisma().find_many(take=10)

        # find the first 5 DataUnit records ordered by the data_title field
        dataunits = DataUnit.prisma().find_many(
            take=5,
            order={
                'data_title': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='query',
            method='findMany',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [self._model.parse_obj(r) for r in resp['data']['result']]

    def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.DataUnitWhereInput] = None,
        cursor: Optional[types.DataUnitWhereUniqueInput] = None,
        include: Optional[types.DataUnitInclude] = None,
        order: Optional[Union[types.DataUnitOrderByInput, List[types.DataUnitOrderByInput]]] = None,
        distinct: Optional[List[types.DataUnitScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single DataUnit record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            DataUnit filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned DataUnit model
        order
            Order the returned DataUnit records by any field
        distinct
            Filter DataUnit records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.DataUnit
            The first DataUnit record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second DataUnit record ordered by the frame field
        dataunit = DataUnit.prisma().find_first(
            skip=1,
            order={
                'frame': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='query',
            method='findFirst',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    def update(
        self,
        data: types.DataUnitUpdateInput,
        where: types.DataUnitWhereUniqueInput,
        include: Optional[types.DataUnitInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single DataUnit record.

        Parameters
        ----------
        data
            DataUnit record data specifying what to update
        where
            DataUnit filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned DataUnit model

        Returns
        -------
        prisma.models.DataUnit
            The updated DataUnit record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        dataunit = DataUnit.prisma().update(
            where={
                'id': 2054802212,
            },
            data={
                # data to update the DataUnit record to
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                operation='mutation',
                method='updateOne',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    def upsert(
        self,
        where: types.DataUnitWhereUniqueInput,
        data: types.DataUnitUpsertInput,
        include: Optional[types.DataUnitInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            DataUnit filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned DataUnit model

        Returns
        -------
        prisma.models.DataUnit
            The created or updated DataUnit record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        dataunit = DataUnit.prisma().upsert(
            where={
                'id': 60335757,
            },
            data={
                'create': {
                    'id': 60335757,
                    'data_hash': 'chbfcacbd',
                    'data_title': 'efggddide',
                    'frame': 2058258651,
                    'location': 'bfidgijfjc',
                    'lr_data_hash': 'ihieecagf',
                },
                'update': {
                    'data_hash': 'chbfcacbd',
                    'data_title': 'efggddide',
                    'frame': 2058258651,
                    'location': 'bfidgijfjc',
                    'lr_data_hash': 'ihieecagf',
                },
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='upsertOne',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    def update_many(
        self,
        data: types.DataUnitUpdateManyMutationInput,
        where: types.DataUnitWhereInput,
    ) -> int:
        """Update multiple DataUnit records

        Parameters
        ----------
        data
            DataUnit data to update the selected DataUnit records to
        where
            Filter to select the DataUnit records to update

        Returns
        -------
        int
            The total number of DataUnit records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all DataUnit records
        total = DataUnit.prisma().update_many(
            data={
                'location': 'gieegcbeg'
            },
            where={}
        )
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='updateMany',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DataUnitWhereInput] = None,
        cursor: Optional[types.DataUnitWhereUniqueInput] = None,
    ) -> int:
        """Count the number of DataUnit records present in the database

        Parameters
        ----------
        select
            Select the DataUnit fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            DataUnit filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.DataUnitCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = DataUnit.prisma().count()

        # results: prisma.types.DataUnitCountAggregateOutput
        results = DataUnit.prisma().count(
            select={
                '_all': True,
                'lr_data_hash': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.DataUnitCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DataUnitWhereInput] = None,
        cursor: Optional[types.DataUnitWhereUniqueInput] = None,
    ) -> types.DataUnitCountAggregateOutput:
        ...

    def count(
        self,
        select: Optional[types.DataUnitCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DataUnitWhereInput] = None,
        cursor: Optional[types.DataUnitWhereUniqueInput] = None,
    ) -> Union[int, types.DataUnitCountAggregateOutput]:
        """Count the number of DataUnit records present in the database

        Parameters
        ----------
        select
            Select the DataUnit fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            DataUnit filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.DataUnitCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = DataUnit.prisma().count()

        # results: prisma.types.DataUnitCountAggregateOutput
        results = DataUnit.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = self._client._execute(
            operation='query',
            method='aggregate',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.DataUnitCountAggregateOutput, resp['data']['result']['_count'])

    def delete_many(
        self,
        where: Optional[types.DataUnitWhereInput] = None
    ) -> int:
        """Delete multiple DataUnit records.

        Parameters
        ----------
        where
            Optional DataUnit filter to find the records to be deleted

        Returns
        -------
        int
            The total number of DataUnit records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all DataUnit records
        total = DataUnit.prisma().delete_many()
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='deleteMany',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: List['types.DataUnitScalarFieldKeys'],
        *,
        where: Optional['types.DataUnitWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.DataUnitAvgAggregateInput'] = None,
        sum: Optional['types.DataUnitSumAggregateInput'] = None,
        min: Optional['types.DataUnitMinAggregateInput'] = None,
        max: Optional['types.DataUnitMaxAggregateInput'] = None,
        having: Optional['types.DataUnitScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.DataUnitCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.DataUnitScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.DataUnitScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.DataUnitGroupByOutput']:
        """Group DataUnit records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar DataUnit fields to group records by
        where
            DataUnit filter to select records
        take
            Limit the maximum number of DataUnit records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.DataUnitGroupByOutput]
            A list of dictionaries representing the DataUnit record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group DataUnit records by data_hash values
        # and count how many records are in each group
        results = DataUnit.prisma().group_by(
            ['data_hash'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = self._client._execute(
            operation='query',
            method='groupBy',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class LabelRowActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.LabelRow]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = LabelRow.prisma().query_raw(
            'SELECT * FROM LabelRow WHERE id = ?',
            1625503827,
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.LabelRow
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = LabelRow.prisma().query_first(
            'SELECT * FROM LabelRow WHERE label_hash = ?',
            'fcbichhci',
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.LabelRowCreateInput,
        include: Optional[types.LabelRowInclude] = None
    ) -> _PrismaModelT:
        """Create a new LabelRow record.

        Parameters
        ----------
        data
            LabelRow record data
        include
            Specifies which relations should be loaded on the returned LabelRow model

        Returns
        -------
        prisma.models.LabelRow
            The created LabelRow record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a LabelRow record from just the required fields
        labelrow = LabelRow.prisma().create(
            data={
                # data to create a LabelRow record
                'data_hash': 'bcggadccgf',
                'data_title': 'jdcfdcgc',
                'data_type': 'cafdaehjid',
                'created_at': 'gifdddbia',
                'last_edited_at': 'bchehecef',
                'location': 'jeijcbhfe',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='createOne',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    def create_many(
        self,
        data: List[types.LabelRowCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple LabelRow records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of LabelRow record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = LabelRow.prisma().create_many(
            data=[
                {
                    # data to create a LabelRow record
                    'data_hash': 'bjgejjabff',
                    'data_title': 'bcciijbibg',
                    'data_type': 'cffcachfd',
                    'created_at': 'bccdfhdigc',
                    'last_edited_at': 'febcgjbfj',
                    'location': 'bageiegghg',
                },
                {
                    # data to create a LabelRow record
                    'data_hash': 'faidicegb',
                    'data_title': 'bacecgfhbe',
                    'data_type': 'ihcahiead',
                    'created_at': 'biheheiajg',
                    'last_edited_at': 'jbgijghgb',
                    'location': 'hgjcghfbi',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = self._client._execute(
            operation='mutation',
            method='createMany',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    def delete(
        self,
        where: types.LabelRowWhereUniqueInput,
        include: Optional[types.LabelRowInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single LabelRow record.

        Parameters
        ----------
        where
            LabelRow filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned LabelRow model

        Returns
        -------
        prisma.models.LabelRow
            The deleted LabelRow record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        labelrow = LabelRow.prisma().delete(
            where={
                'id': 820312479,
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                operation='mutation',
                method='deleteOne',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    def find_unique(
        self,
        where: types.LabelRowWhereUniqueInput,
        include: Optional[types.LabelRowInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique LabelRow record.

        Parameters
        ----------
        where
            LabelRow filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned LabelRow model

        Returns
        -------
        prisma.models.LabelRow
            The found LabelRow record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        labelrow = LabelRow.prisma().find_unique(
            where={
                'id': 92728044,
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='query',
            method='findUnique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.LabelRowWhereInput] = None,
        cursor: Optional[types.LabelRowWhereUniqueInput] = None,
        include: Optional[types.LabelRowInclude] = None,
        order: Optional[Union[types.LabelRowOrderByInput, List[types.LabelRowOrderByInput]]] = None,
        distinct: Optional[List[types.LabelRowScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple LabelRow records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of LabelRow records returned
        skip
            Ignore the first N results
        where
            LabelRow filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned LabelRow model
        order
            Order the returned LabelRow records by any field
        distinct
            Filter LabelRow records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.LabelRow]
            The list of all LabelRow records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 LabelRow records
        labelrows = LabelRow.prisma().find_many(take=10)

        # find the first 5 LabelRow records ordered by the data_hash field
        labelrows = LabelRow.prisma().find_many(
            take=5,
            order={
                'data_hash': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='query',
            method='findMany',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [self._model.parse_obj(r) for r in resp['data']['result']]

    def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.LabelRowWhereInput] = None,
        cursor: Optional[types.LabelRowWhereUniqueInput] = None,
        include: Optional[types.LabelRowInclude] = None,
        order: Optional[Union[types.LabelRowOrderByInput, List[types.LabelRowOrderByInput]]] = None,
        distinct: Optional[List[types.LabelRowScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single LabelRow record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            LabelRow filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned LabelRow model
        order
            Order the returned LabelRow records by any field
        distinct
            Filter LabelRow records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.LabelRow
            The first LabelRow record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second LabelRow record ordered by the data_title field
        labelrow = LabelRow.prisma().find_first(
            skip=1,
            order={
                'data_title': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='query',
            method='findFirst',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    def update(
        self,
        data: types.LabelRowUpdateInput,
        where: types.LabelRowWhereUniqueInput,
        include: Optional[types.LabelRowInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single LabelRow record.

        Parameters
        ----------
        data
            LabelRow record data specifying what to update
        where
            LabelRow filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned LabelRow model

        Returns
        -------
        prisma.models.LabelRow
            The updated LabelRow record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        labelrow = LabelRow.prisma().update(
            where={
                'id': 344858293,
            },
            data={
                # data to update the LabelRow record to
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                operation='mutation',
                method='updateOne',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    def upsert(
        self,
        where: types.LabelRowWhereUniqueInput,
        data: types.LabelRowUpsertInput,
        include: Optional[types.LabelRowInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            LabelRow filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned LabelRow model

        Returns
        -------
        prisma.models.LabelRow
            The created or updated LabelRow record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        labelrow = LabelRow.prisma().upsert(
            where={
                'id': 1121741130,
            },
            data={
                'create': {
                    'id': 1121741130,
                    'data_hash': 'faidicegb',
                    'data_title': 'bacecgfhbe',
                    'data_type': 'ihcahiead',
                    'created_at': 'biheheiajg',
                    'last_edited_at': 'jbgijghgb',
                    'location': 'hgjcghfbi',
                },
                'update': {
                    'data_hash': 'faidicegb',
                    'data_title': 'bacecgfhbe',
                    'data_type': 'ihcahiead',
                    'created_at': 'biheheiajg',
                    'last_edited_at': 'jbgijghgb',
                    'location': 'hgjcghfbi',
                },
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='upsertOne',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    def update_many(
        self,
        data: types.LabelRowUpdateManyMutationInput,
        where: types.LabelRowWhereInput,
    ) -> int:
        """Update multiple LabelRow records

        Parameters
        ----------
        data
            LabelRow data to update the selected LabelRow records to
        where
            Filter to select the LabelRow records to update

        Returns
        -------
        int
            The total number of LabelRow records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all LabelRow records
        total = LabelRow.prisma().update_many(
            data={
                'data_type': 'bejfijgcfb'
            },
            where={}
        )
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='updateMany',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.LabelRowWhereInput] = None,
        cursor: Optional[types.LabelRowWhereUniqueInput] = None,
    ) -> int:
        """Count the number of LabelRow records present in the database

        Parameters
        ----------
        select
            Select the LabelRow fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            LabelRow filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.LabelRowCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = LabelRow.prisma().count()

        # results: prisma.types.LabelRowCountAggregateOutput
        results = LabelRow.prisma().count(
            select={
                '_all': True,
                'created_at': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.LabelRowCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.LabelRowWhereInput] = None,
        cursor: Optional[types.LabelRowWhereUniqueInput] = None,
    ) -> types.LabelRowCountAggregateOutput:
        ...

    def count(
        self,
        select: Optional[types.LabelRowCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.LabelRowWhereInput] = None,
        cursor: Optional[types.LabelRowWhereUniqueInput] = None,
    ) -> Union[int, types.LabelRowCountAggregateOutput]:
        """Count the number of LabelRow records present in the database

        Parameters
        ----------
        select
            Select the LabelRow fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            LabelRow filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.LabelRowCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = LabelRow.prisma().count()

        # results: prisma.types.LabelRowCountAggregateOutput
        results = LabelRow.prisma().count(
            select={
                '_all': True,
                'last_edited_at': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = self._client._execute(
            operation='query',
            method='aggregate',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.LabelRowCountAggregateOutput, resp['data']['result']['_count'])

    def delete_many(
        self,
        where: Optional[types.LabelRowWhereInput] = None
    ) -> int:
        """Delete multiple LabelRow records.

        Parameters
        ----------
        where
            Optional LabelRow filter to find the records to be deleted

        Returns
        -------
        int
            The total number of LabelRow records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all LabelRow records
        total = LabelRow.prisma().delete_many()
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='deleteMany',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: List['types.LabelRowScalarFieldKeys'],
        *,
        where: Optional['types.LabelRowWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.LabelRowAvgAggregateInput'] = None,
        sum: Optional['types.LabelRowSumAggregateInput'] = None,
        min: Optional['types.LabelRowMinAggregateInput'] = None,
        max: Optional['types.LabelRowMaxAggregateInput'] = None,
        having: Optional['types.LabelRowScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.LabelRowCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.LabelRowScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.LabelRowScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.LabelRowGroupByOutput']:
        """Group LabelRow records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar LabelRow fields to group records by
        where
            LabelRow filter to select records
        take
            Limit the maximum number of LabelRow records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.LabelRowGroupByOutput]
            A list of dictionaries representing the LabelRow record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group LabelRow records by location values
        # and count how many records are in each group
        results = LabelRow.prisma().group_by(
            ['location'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = self._client._execute(
            operation='query',
            method='groupBy',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]



def _select_fields(root: str, select: Mapping[str, Any]) -> str:
    """Helper to build a GraphQL selection string

    This is a work around until field selection is added to the query builder.
    """

    return root + ' {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))


from . import models
