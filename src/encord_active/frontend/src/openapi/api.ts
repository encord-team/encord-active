/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from "./base";

/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export const AnalysisBuckets = {
  NUMBER_10: 10,
  NUMBER_100: 100,
  NUMBER_1000: 1000,
} as const;

export type AnalysisBuckets =
  (typeof AnalysisBuckets)[keyof typeof AnalysisBuckets];

/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export const AnalysisDomain = {
  Data: "data",
  Annotation: "annotation",
} as const;

export type AnalysisDomain =
  (typeof AnalysisDomain)[keyof typeof AnalysisDomain];

/**
 *
 * @export
 * @interface AnalysisSearch
 */
export interface AnalysisSearch {
  /**
   *
   * @type {boolean}
   * @memberof AnalysisSearch
   */
  truncated: boolean;
  /**
   *
   * @type {Array<string>}
   * @memberof AnalysisSearch
   */
  results: Array<string>;
  /**
   *
   * @type {Array<number>}
   * @memberof AnalysisSearch
   */
  similarities?: Array<number>;
}
/**
 *
 * @export
 * @interface AnnotationEnumItem
 */
export interface AnnotationEnumItem {
  /**
   *
   * @type {string}
   * @memberof AnnotationEnumItem
   */
  feature_hash: string;
  /**
   *
   * @type {AnnotationType}
   * @memberof AnnotationEnumItem
   */
  annotation_type: AnnotationType;
  /**
   *
   * @type {boolean}
   * @memberof AnnotationEnumItem
   */
  annotation_manual: boolean;
  /**
   *
   * @type {boolean}
   * @memberof AnnotationEnumItem
   */
  annotation_invalid: boolean;
  /**
   *
   * @type {number}
   * @memberof AnnotationEnumItem
   */
  annotation_user_id: number;
}

/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export const AnnotationType = {
  CLASSIFICATION: 0,
  BOUNDING_BOX: 1,
  ROTATABLE_BOUNDING_BOX: 2,
  POINT: 3,
  POLYLINE: 4,
  POLYGON: 5,
  SKELETON: 6,
  BITMASK: 7,
} as const;

export type AnnotationType =
  (typeof AnnotationType)[keyof typeof AnnotationType];

/**
 *
 * @export
 * @interface CreateProjectSubsetPostAction
 */
export interface CreateProjectSubsetPostAction {
  /**
   *
   * @type {string}
   * @memberof CreateProjectSubsetPostAction
   */
  project_title: string;
  /**
   *
   * @type {string}
   * @memberof CreateProjectSubsetPostAction
   */
  project_description?: string;
  /**
   *
   * @type {string}
   * @memberof CreateProjectSubsetPostAction
   */
  dataset_title: string;
  /**
   *
   * @type {string}
   * @memberof CreateProjectSubsetPostAction
   */
  dataset_description?: string;
  /**
   *
   * @type {SearchFilters}
   * @memberof CreateProjectSubsetPostAction
   */
  filters: SearchFilters;
}
/**
 *
 * @export
 * @interface DataEnumItem
 */
export interface DataEnumItem {
  /**
   *
   * @type {DataType}
   * @memberof DataEnumItem
   */
  data_type: DataType;
}

/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export const DataType = {
  IMAGE: 0,
  IMG_GROUP: 1,
  IMG_SEQUENCE: 2,
  VIDEO: 3,
} as const;

export type DataType = (typeof DataType)[keyof typeof DataType];

/**
 *
 * @export
 * @interface DomainSearchFilters
 */
export interface DomainSearchFilters {
  /**
   *
   * @type {{ [key: string]: Array<number> | undefined; }}
   * @memberof DomainSearchFilters
   */
  metrics: { [key: string]: Array<number> | undefined };
  /**
   *
   * @type {{ [key: string]: Array<string> | undefined; }}
   * @memberof DomainSearchFilters
   */
  enums: { [key: string]: Array<string> | undefined };
  /**
   *
   * @type {Embedding2DFilter}
   * @memberof DomainSearchFilters
   */
  reduction?: Embedding2DFilter;
  /**
   *
   * @type {Array<string>}
   * @memberof DomainSearchFilters
   */
  tags?: Array<string>;
}
/**
 *
 * @export
 * @interface Embedding2DFilter
 */
export interface Embedding2DFilter {
  /**
   *
   * @type {string}
   * @memberof Embedding2DFilter
   */
  reduction_hash: string;
  /**
   *
   * @type {number}
   * @memberof Embedding2DFilter
   */
  x1: number;
  /**
   *
   * @type {number}
   * @memberof Embedding2DFilter
   */
  x2: number;
  /**
   *
   * @type {number}
   * @memberof Embedding2DFilter
   */
  y1: number;
  /**
   *
   * @type {number}
   * @memberof Embedding2DFilter
   */
  y2: number;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export const EmbeddingReductionType = {
  Umap: "umap",
  Pca: "pca",
} as const;

export type EmbeddingReductionType =
  (typeof EmbeddingReductionType)[keyof typeof EmbeddingReductionType];

/**
 *
 * @export
 * @interface EnumSummary
 */
export interface EnumSummary {
  /**
   *
   * @type {string}
   * @memberof EnumSummary
   */
  title: string;
  /**
   *
   * @type {{ [key: string]: string | undefined; }}
   * @memberof EnumSummary
   */
  values?: { [key: string]: string | undefined };
  /**
   *
   * @type {EnumType}
   * @memberof EnumSummary
   */
  type: EnumType;
}

/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export const EnumType = {
  Ontology: "ontology",
  UserEmail: "user_email",
  Tags: "tags",
  Enum: "enum",
} as const;

export type EnumType = (typeof EnumType)[keyof typeof EnumType];

/**
 *
 * @export
 * @interface GroupedTags
 */
export interface GroupedTags {
  /**
   *
   * @type {Array<string>}
   * @memberof GroupedTags
   */
  data: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof GroupedTags
   */
  label: Array<string>;
}
/**
 *
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
  /**
   *
   * @type {Array<ValidationError>}
   * @memberof HTTPValidationError
   */
  detail?: Array<ValidationError>;
}
/**
 *
 * @export
 * @interface ItemTags
 */
export interface ItemTags {
  /**
   *
   * @type {string}
   * @memberof ItemTags
   */
  id: string;
  /**
   *
   * @type {GroupedTags}
   * @memberof ItemTags
   */
  grouped_tags: GroupedTags;
}
/**
 *
 * @export
 * @interface ListProjectPredictionResult
 */
export interface ListProjectPredictionResult {
  /**
   *
   * @type {number}
   * @memberof ListProjectPredictionResult
   */
  total: number;
  /**
   *
   * @type {Array<ListProjectPredictionResultEntry>}
   * @memberof ListProjectPredictionResult
   */
  results: Array<ListProjectPredictionResultEntry>;
}
/**
 *
 * @export
 * @interface ListProjectPredictionResultEntry
 */
export interface ListProjectPredictionResultEntry {
  /**
   *
   * @type {string}
   * @memberof ListProjectPredictionResultEntry
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof ListProjectPredictionResultEntry
   */
  prediction_hash: string;
}
/**
 *
 * @export
 * @interface LocationInner
 */
export interface LocationInner {}
/**
 *
 * @export
 * @interface MetricDissimilarityResult
 */
export interface MetricDissimilarityResult {
  /**
   *
   * @type {{ [key: string]: number | undefined; }}
   * @memberof MetricDissimilarityResult
   */
  results: { [key: string]: number | undefined };
}
/**
 *
 * @export
 * @interface MetricSummary
 */
export interface MetricSummary {
  /**
   *
   * @type {string}
   * @memberof MetricSummary
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof MetricSummary
   */
  short_desc: string;
  /**
   *
   * @type {string}
   * @memberof MetricSummary
   */
  long_desc: string;
  /**
   *
   * @type {MetricType}
   * @memberof MetricSummary
   */
  type: MetricType;
}

/**
 * Type of the metric
 * @export
 * @enum {string}
 */

export const MetricType = {
  Normal: "normal",
  Uint: "uint",
  Ufloat: "ufloat",
} as const;

export type MetricType = (typeof MetricType)[keyof typeof MetricType];

/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export const PredictionDomain = {
  A: "a",
  P: "p",
  Tp: "tp",
  Fp: "fp",
  Fn: "fn",
} as const;

export type PredictionDomain =
  (typeof PredictionDomain)[keyof typeof PredictionDomain];

/**
 *
 * @export
 * @interface PredictionItem
 */
export interface PredictionItem {
  /**
   *
   * @type {{ [key: string]: { [key: string]: number | undefined; } | undefined; }}
   * @memberof PredictionItem
   */
  annotation_metrics: {
    [key: string]: { [key: string]: number | undefined } | undefined;
  };
  /**
   *
   * @type {{ [key: string]: AnnotationEnumItem | undefined; }}
   * @memberof PredictionItem
   */
  annotation_enums: { [key: string]: AnnotationEnumItem | undefined };
  /**
   *
   * @type {{ [key: string]: Array<number> | undefined; }}
   * @memberof PredictionItem
   */
  annotation_iou_bounds: { [key: string]: Array<number> | undefined };
  /**
   *
   * @type {Set<string>}
   * @memberof PredictionItem
   */
  annotation_feature_mismatch: Set<string>;
  /**
   *
   * @type {Array<object>}
   * @memberof PredictionItem
   */
  objects: Array<object>;
  /**
   *
   * @type {Array<object>}
   * @memberof PredictionItem
   */
  classifications: Array<object>;
  /**
   *
   * @type {{ [key: string]: object | undefined; }}
   * @memberof PredictionItem
   */
  object_answers: { [key: string]: object | undefined };
  /**
   *
   * @type {{ [key: string]: object | undefined; }}
   * @memberof PredictionItem
   */
  classification_answers: { [key: string]: object | undefined };
  /**
   *
   * @type {string}
   * @memberof PredictionItem
   */
  label_hash: string;
}
/**
 *
 * @export
 * @interface PredictionPRPoint
 */
export interface PredictionPRPoint {
  /**
   *
   * @type {number}
   * @memberof PredictionPRPoint
   */
  p: number;
  /**
   *
   * @type {number}
   * @memberof PredictionPRPoint
   */
  r: number;
}
/**
 *
 * @export
 * @interface PredictionQuery2DEmbedding
 */
export interface PredictionQuery2DEmbedding {
  /**
   *
   * @type {number}
   * @memberof PredictionQuery2DEmbedding
   */
  count: number;
  /**
   *
   * @type {Array<PredictionQueryScatterPoint>}
   * @memberof PredictionQuery2DEmbedding
   */
  reductions: Array<PredictionQueryScatterPoint>;
}
/**
 *
 * @export
 * @interface PredictionQueryScatterPoint
 */
export interface PredictionQueryScatterPoint {
  /**
   *
   * @type {number}
   * @memberof PredictionQueryScatterPoint
   */
  x: number;
  /**
   *
   * @type {number}
   * @memberof PredictionQueryScatterPoint
   */
  y: number;
  /**
   *
   * @type {number}
   * @memberof PredictionQueryScatterPoint
   */
  n: number;
  /**
   *
   * @type {number}
   * @memberof PredictionQueryScatterPoint
   */
  tp: number;
  /**
   *
   * @type {number}
   * @memberof PredictionQueryScatterPoint
   */
  fp: number;
  /**
   *
   * @type {number}
   * @memberof PredictionQueryScatterPoint
   */
  fn: number;
}
/**
 *
 * @export
 * @interface PredictionSummaryFeatureResult
 */
export interface PredictionSummaryFeatureResult {
  /**
   *
   * @type {number}
   * @memberof PredictionSummaryFeatureResult
   */
  ap: number;
  /**
   *
   * @type {number}
   * @memberof PredictionSummaryFeatureResult
   */
  ar: number;
  /**
   *
   * @type {number}
   * @memberof PredictionSummaryFeatureResult
   */
  p: number;
  /**
   *
   * @type {number}
   * @memberof PredictionSummaryFeatureResult
   */
  r: number;
  /**
   *
   * @type {number}
   * @memberof PredictionSummaryFeatureResult
   */
  f1: number;
  /**
   *
   * @type {number}
   * @memberof PredictionSummaryFeatureResult
   */
  tp: number;
  /**
   *
   * @type {number}
   * @memberof PredictionSummaryFeatureResult
   */
  fp: number;
  /**
   *
   * @type {number}
   * @memberof PredictionSummaryFeatureResult
   */
  fn: number;
}
/**
 *
 * @export
 * @interface PredictionSummaryResult
 */
export interface PredictionSummaryResult {
  /**
   *
   * @type {boolean}
   * @memberof PredictionSummaryResult
   */
  classification_only: boolean;
  /**
   *
   * @type {number}
   * @memberof PredictionSummaryResult
   */
  classification_tTN?: number;
  /**
   *
   * @type {number}
   * @memberof PredictionSummaryResult
   */
  classification_accuracy?: number;
  /**
   *
   * @type {number}
   * @memberof PredictionSummaryResult
   */
  num_frames: number;
  /**
   *
   * @type {number}
   * @memberof PredictionSummaryResult
   */
  mAP: number;
  /**
   *
   * @type {number}
   * @memberof PredictionSummaryResult
   */
  mAR: number;
  /**
   *
   * @type {number}
   * @memberof PredictionSummaryResult
   */
  mP: number;
  /**
   *
   * @type {number}
   * @memberof PredictionSummaryResult
   */
  mR: number;
  /**
   *
   * @type {number}
   * @memberof PredictionSummaryResult
   */
  mF1: number;
  /**
   *
   * @type {number}
   * @memberof PredictionSummaryResult
   */
  tTP: number;
  /**
   *
   * @type {number}
   * @memberof PredictionSummaryResult
   */
  tFP: number;
  /**
   *
   * @type {number}
   * @memberof PredictionSummaryResult
   */
  tFN: number;
  /**
   *
   * @type {{ [key: string]: PredictionSummaryFeatureResult | undefined; }}
   * @memberof PredictionSummaryResult
   */
  feature_properties: {
    [key: string]: PredictionSummaryFeatureResult | undefined;
  };
  /**
   *
   * @type {{ [key: string]: Array<PredictionPRPoint> | undefined; }}
   * @memberof PredictionSummaryResult
   */
  prs: { [key: string]: Array<PredictionPRPoint> | undefined };
  /**
   *
   * @type {{ [key: string]: number | undefined; }}
   * @memberof PredictionSummaryResult
   */
  correlation: { [key: string]: number | undefined };
  /**
   *
   * @type {{ [key: string]: number | undefined; }}
   * @memberof PredictionSummaryResult
   */
  importance: { [key: string]: number | undefined };
}
/**
 *
 * @export
 * @interface ProjectCollaboratorEntry
 */
export interface ProjectCollaboratorEntry {
  /**
   *
   * @type {string}
   * @memberof ProjectCollaboratorEntry
   */
  email: string;
  /**
   *
   * @type {number}
   * @memberof ProjectCollaboratorEntry
   */
  id: number;
}
/**
 *
 * @export
 * @interface ProjectDomainSummary
 */
export interface ProjectDomainSummary {
  /**
   *
   * @type {{ [key: string]: MetricSummary | undefined; }}
   * @memberof ProjectDomainSummary
   */
  metrics: { [key: string]: MetricSummary | undefined };
  /**
   *
   * @type {{ [key: string]: EnumSummary | undefined; }}
   * @memberof ProjectDomainSummary
   */
  enums: { [key: string]: EnumSummary | undefined };
}
/**
 *
 * @export
 * @interface ProjectItem
 */
export interface ProjectItem {
  /**
   *
   * @type {{ [key: string]: number | undefined; }}
   * @memberof ProjectItem
   */
  data_metrics: { [key: string]: number | undefined };
  /**
   *
   * @type {{ [key: string]: { [key: string]: number | undefined; } | undefined; }}
   * @memberof ProjectItem
   */
  annotation_metrics: {
    [key: string]: { [key: string]: number | undefined } | undefined;
  };
  /**
   *
   * @type {DataEnumItem}
   * @memberof ProjectItem
   */
  data_enums: DataEnumItem;
  /**
   *
   * @type {{ [key: string]: AnnotationEnumItem | undefined; }}
   * @memberof ProjectItem
   */
  annotation_enums: { [key: string]: AnnotationEnumItem | undefined };
  /**
   *
   * @type {Array<object>}
   * @memberof ProjectItem
   */
  objects: Array<object>;
  /**
   *
   * @type {Array<object>}
   * @memberof ProjectItem
   */
  classifications: Array<object>;
  /**
   *
   * @type {{ [key: string]: object | undefined; }}
   * @memberof ProjectItem
   */
  object_answers: { [key: string]: object | undefined };
  /**
   *
   * @type {{ [key: string]: object | undefined; }}
   * @memberof ProjectItem
   */
  classification_answers: { [key: string]: object | undefined };
  /**
   *
   * @type {string}
   * @memberof ProjectItem
   */
  dataset_title: string;
  /**
   *
   * @type {string}
   * @memberof ProjectItem
   */
  dataset_hash: string;
  /**
   *
   * @type {string}
   * @memberof ProjectItem
   */
  data_title: string;
  /**
   *
   * @type {string}
   * @memberof ProjectItem
   */
  data_hash: string;
  /**
   *
   * @type {string}
   * @memberof ProjectItem
   */
  label_hash: string;
  /**
   *
   * @type {number}
   * @memberof ProjectItem
   */
  num_frames: number;
  /**
   *
   * @type {number}
   * @memberof ProjectItem
   */
  frames_per_second?: number;
  /**
   *
   * @type {string}
   * @memberof ProjectItem
   */
  data_type: string;
  /**
   *
   * @type {string}
   * @memberof ProjectItem
   */
  url: string;
  /**
   *
   * @type {number}
   * @memberof ProjectItem
   */
  timestamp?: number;
  /**
   *
   * @type {ProjectItemTags}
   * @memberof ProjectItem
   */
  tags: ProjectItemTags;
}
/**
 *
 * @export
 * @interface ProjectItemTags
 */
export interface ProjectItemTags {
  /**
   *
   * @type {Array<ProjectTag>}
   * @memberof ProjectItemTags
   */
  data: Array<ProjectTag>;
  /**
   *
   * @type {{ [key: string]: Array<ProjectTag> | undefined; }}
   * @memberof ProjectItemTags
   */
  label: { [key: string]: Array<ProjectTag> | undefined };
}
/**
 *
 * @export
 * @interface ProjectList2DEmbeddingReductionResult
 */
export interface ProjectList2DEmbeddingReductionResult {
  /**
   *
   * @type {number}
   * @memberof ProjectList2DEmbeddingReductionResult
   */
  total: number;
  /**
   *
   * @type {Array<ProjectList2DEmbeddingReductionResultEntry>}
   * @memberof ProjectList2DEmbeddingReductionResult
   */
  results: Array<ProjectList2DEmbeddingReductionResultEntry>;
}
/**
 *
 * @export
 * @interface ProjectList2DEmbeddingReductionResultEntry
 */
export interface ProjectList2DEmbeddingReductionResultEntry {
  /**
   *
   * @type {string}
   * @memberof ProjectList2DEmbeddingReductionResultEntry
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof ProjectList2DEmbeddingReductionResultEntry
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof ProjectList2DEmbeddingReductionResultEntry
   */
  hash: string;
  /**
   *
   * @type {EmbeddingReductionType}
   * @memberof ProjectList2DEmbeddingReductionResultEntry
   */
  type: EmbeddingReductionType;
}

/**
 *
 * @export
 * @interface ProjectMetadata
 */
export interface ProjectMetadata {
  /**
   *
   * @type {number}
   * @memberof ProjectMetadata
   */
  data_count: number;
  /**
   *
   * @type {number}
   * @memberof ProjectMetadata
   */
  annotation_count: number;
  /**
   *
   * @type {number}
   * @memberof ProjectMetadata
   */
  class_count: number;
}
/**
 *
 * @export
 * @interface ProjectSandboxEntry
 */
export interface ProjectSandboxEntry {
  /**
   *
   * @type {string}
   * @memberof ProjectSandboxEntry
   */
  project_hash: string;
  /**
   *
   * @type {string}
   * @memberof ProjectSandboxEntry
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof ProjectSandboxEntry
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof ProjectSandboxEntry
   */
  sandbox_url: string;
  /**
   *
   * @type {number}
   * @memberof ProjectSandboxEntry
   */
  data_count: number;
  /**
   *
   * @type {number}
   * @memberof ProjectSandboxEntry
   */
  annotation_count: number;
  /**
   *
   * @type {number}
   * @memberof ProjectSandboxEntry
   */
  class_count: number;
}
/**
 *
 * @export
 * @interface ProjectSearchEntry
 */
export interface ProjectSearchEntry {
  /**
   *
   * @type {string}
   * @memberof ProjectSearchEntry
   */
  project_hash: string;
  /**
   *
   * @type {string}
   * @memberof ProjectSearchEntry
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof ProjectSearchEntry
   */
  description: string;
  /**
   *
   * @type {boolean}
   * @memberof ProjectSearchEntry
   */
  sandbox: boolean;
}
/**
 *
 * @export
 * @interface ProjectSearchResult
 */
export interface ProjectSearchResult {
  /**
   *
   * @type {Array<ProjectSearchEntry>}
   * @memberof ProjectSearchResult
   */
  projects: Array<ProjectSearchEntry>;
  /**
   *
   * @type {Array<ProjectSandboxEntry>}
   * @memberof ProjectSearchResult
   */
  sandbox_projects: Array<ProjectSandboxEntry>;
}
/**
 *
 * @export
 * @interface ProjectSummary
 */
export interface ProjectSummary {
  /**
   *
   * @type {string}
   * @memberof ProjectSummary
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof ProjectSummary
   */
  description: string;
  /**
   *
   * @type {object}
   * @memberof ProjectSummary
   */
  ontology: object;
  /**
   *
   * @type {boolean}
   * @memberof ProjectSummary
   */
  local_project: boolean;
  /**
   *
   * @type {ProjectDomainSummary}
   * @memberof ProjectSummary
   */
  data: ProjectDomainSummary;
  /**
   *
   * @type {ProjectDomainSummary}
   * @memberof ProjectSummary
   */
  annotation: ProjectDomainSummary;
  /**
   *
   * @type {number}
   * @memberof ProjectSummary
   */
  du_count: number;
  /**
   *
   * @type {number}
   * @memberof ProjectSummary
   */
  frame_count: number;
  /**
   *
   * @type {number}
   * @memberof ProjectSummary
   */
  annotation_count: number;
  /**
   *
   * @type {number}
   * @memberof ProjectSummary
   */
  classification_count: number;
  /**
   *
   * @type {ProjectDomainSummary}
   * @memberof ProjectSummary
   */
  data_annotation: ProjectDomainSummary;
  /**
   *
   * @type {{ [key: string]: string | undefined; }}
   * @memberof ProjectSummary
   */
  tags: { [key: string]: string | undefined };
  /**
   *
   * @type {string}
   * @memberof ProjectSummary
   */
  preview?: string;
}
/**
 *
 * @export
 * @interface ProjectTag
 */
export interface ProjectTag {
  /**
   *
   * @type {string}
   * @memberof ProjectTag
   */
  tag_hash: string;
  /**
   *
   * @type {string}
   * @memberof ProjectTag
   */
  project_hash: string;
  /**
   *
   * @type {string}
   * @memberof ProjectTag
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof ProjectTag
   */
  description: string;
}
/**
 *
 * @export
 * @interface ProjectTagEntry
 */
export interface ProjectTagEntry {
  /**
   *
   * @type {string}
   * @memberof ProjectTagEntry
   */
  hash: string;
  /**
   *
   * @type {string}
   * @memberof ProjectTagEntry
   */
  name: string;
}
/**
 *
 * @export
 * @interface Query2DEmbedding
 */
export interface Query2DEmbedding {
  /**
   *
   * @type {number}
   * @memberof Query2DEmbedding
   */
  count: number;
  /**
   *
   * @type {Array<Query2DEmbeddingScatterPoint>}
   * @memberof Query2DEmbedding
   */
  reductions: Array<Query2DEmbeddingScatterPoint>;
}
/**
 *
 * @export
 * @interface Query2DEmbeddingScatterPoint
 */
export interface Query2DEmbeddingScatterPoint {
  /**
   *
   * @type {number}
   * @memberof Query2DEmbeddingScatterPoint
   */
  x: number;
  /**
   *
   * @type {number}
   * @memberof Query2DEmbeddingScatterPoint
   */
  y: number;
  /**
   *
   * @type {string}
   * @memberof Query2DEmbeddingScatterPoint
   */
  fh: string;
  /**
   *
   * @type {number}
   * @memberof Query2DEmbeddingScatterPoint
   */
  fhn: number;
  /**
   *
   * @type {number}
   * @memberof Query2DEmbeddingScatterPoint
   */
  n: number;
}
/**
 *
 * @export
 * @interface QueryDistribution
 */
export interface QueryDistribution {
  /**
   *
   * @type {Array<QueryDistributionGroup>}
   * @memberof QueryDistribution
   */
  results: Array<QueryDistributionGroup>;
}
/**
 *
 * @export
 * @interface QueryDistributionGroup
 */
export interface QueryDistributionGroup {
  /**
   *
   * @type {string}
   * @memberof QueryDistributionGroup
   */
  group: string;
  /**
   *
   * @type {number}
   * @memberof QueryDistributionGroup
   */
  count: number;
}
/**
 *
 * @export
 * @interface QueryEnumSummary
 */
export interface QueryEnumSummary {
  /**
   *
   * @type {number}
   * @memberof QueryEnumSummary
   */
  count: number;
}
/**
 *
 * @export
 * @interface QueryMetricPerformance
 */
export interface QueryMetricPerformance {
  /**
   *
   * @type {{ [key: string]: Array<QueryMetricPerformanceEntry> | undefined; }}
   * @memberof QueryMetricPerformance
   */
  precision: { [key: string]: Array<QueryMetricPerformanceEntry> | undefined };
  /**
   *
   * @type {{ [key: string]: Array<QueryMetricPerformanceEntry> | undefined; }}
   * @memberof QueryMetricPerformance
   */
  fns: { [key: string]: Array<QueryMetricPerformanceEntry> | undefined };
}
/**
 *
 * @export
 * @interface QueryMetricPerformanceEntry
 */
export interface QueryMetricPerformanceEntry {
  /**
   *
   * @type {number}
   * @memberof QueryMetricPerformanceEntry
   */
  m: number;
  /**
   *
   * @type {number}
   * @memberof QueryMetricPerformanceEntry
   */
  a: number;
  /**
   *
   * @type {number}
   * @memberof QueryMetricPerformanceEntry
   */
  n: number;
}
/**
 *
 * @export
 * @interface QueryMetricSummary
 */
export interface QueryMetricSummary {
  /**
   *
   * @type {number}
   * @memberof QueryMetricSummary
   */
  min: number;
  /**
   *
   * @type {number}
   * @memberof QueryMetricSummary
   */
  q1: number;
  /**
   *
   * @type {number}
   * @memberof QueryMetricSummary
   */
  median: number;
  /**
   *
   * @type {number}
   * @memberof QueryMetricSummary
   */
  q3: number;
  /**
   *
   * @type {number}
   * @memberof QueryMetricSummary
   */
  max: number;
  /**
   *
   * @type {number}
   * @memberof QueryMetricSummary
   */
  count: number;
  /**
   *
   * @type {number}
   * @memberof QueryMetricSummary
   */
  moderate: number;
  /**
   *
   * @type {number}
   * @memberof QueryMetricSummary
   */
  severe: number;
}
/**
 *
 * @export
 * @interface QueryScatter
 */
export interface QueryScatter {
  /**
   *
   * @type {Array<QueryScatterPoint>}
   * @memberof QueryScatter
   */
  samples: Array<QueryScatterPoint>;
}
/**
 *
 * @export
 * @interface QueryScatterPoint
 */
export interface QueryScatterPoint {
  /**
   *
   * @type {number}
   * @memberof QueryScatterPoint
   */
  x: number;
  /**
   *
   * @type {number}
   * @memberof QueryScatterPoint
   */
  y: number;
  /**
   *
   * @type {number}
   * @memberof QueryScatterPoint
   */
  n: number;
}
/**
 *
 * @export
 * @interface QuerySummary
 */
export interface QuerySummary {
  /**
   *
   * @type {number}
   * @memberof QuerySummary
   */
  count: number;
  /**
   *
   * @type {{ [key: string]: QueryMetricSummary | undefined; }}
   * @memberof QuerySummary
   */
  metrics: { [key: string]: QueryMetricSummary | undefined };
  /**
   *
   * @type {{ [key: string]: QueryEnumSummary | undefined; }}
   * @memberof QuerySummary
   */
  enums: { [key: string]: QueryEnumSummary | undefined };
}
/**
 *
 * @export
 * @interface SearchFilters
 */
export interface SearchFilters {
  /**
   *
   * @type {DomainSearchFilters}
   * @memberof SearchFilters
   */
  data?: DomainSearchFilters;
  /**
   *
   * @type {DomainSearchFilters}
   * @memberof SearchFilters
   */
  annotation?: DomainSearchFilters;
}
/**
 *
 * @export
 * @interface UploadProjectToEncordPostAction
 */
export interface UploadProjectToEncordPostAction {
  /**
   *
   * @type {string}
   * @memberof UploadProjectToEncordPostAction
   */
  project_title: string;
  /**
   *
   * @type {string}
   * @memberof UploadProjectToEncordPostAction
   */
  project_description?: string;
  /**
   *
   * @type {string}
   * @memberof UploadProjectToEncordPostAction
   */
  dataset_title: string;
  /**
   *
   * @type {string}
   * @memberof UploadProjectToEncordPostAction
   */
  dataset_description?: string;
  /**
   *
   * @type {string}
   * @memberof UploadProjectToEncordPostAction
   */
  ontology_title: string;
  /**
   *
   * @type {string}
   * @memberof UploadProjectToEncordPostAction
   */
  ontology_description?: string;
}
/**
 *
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
  /**
   *
   * @type {Array<LocationInner>}
   * @memberof ValidationError
   */
  loc: Array<LocationInner>;
  /**
   *
   * @type {string}
   * @memberof ValidationError
   */
  msg: string;
  /**
   *
   * @type {string}
   * @memberof ValidationError
   */
  type: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthCheckGet: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Premium Available
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    premiumAvailablePremiumAvailableGet: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/premium_available`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async healthCheckGet(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheckGet(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Premium Available
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async premiumAvailablePremiumAvailableGet(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.premiumAvailablePremiumAvailableGet(
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     *
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthCheckGet(options?: any): AxiosPromise<boolean> {
      return localVarFp
        .healthCheckGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Premium Available
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    premiumAvailablePremiumAvailableGet(options?: any): AxiosPromise<boolean> {
      return localVarFp
        .premiumAvailablePremiumAvailableGet(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @summary Health Check
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public healthCheckGet(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .healthCheckGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Premium Available
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public premiumAvailablePremiumAvailableGet(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .premiumAvailablePremiumAvailableGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PredictionApi - axios parameter creator
 * @export
 */
export const PredictionApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Route List Tags
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeListTagsApiProjectsV2ProjectHashTagsGet: async (
      projectHash: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectHash' is not null or undefined
      assertParamExists(
        "routeListTagsApiProjectsV2ProjectHashTagsGet",
        "projectHash",
        projectHash
      );
      const localVarPath = `/api/projects_v2/{project_hash}/tags/`.replace(
        `{${"project_hash"}}`,
        encodeURIComponent(String(projectHash))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2PasswordBearer",
        [],
        configuration
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Prediction Data Item
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {string} dataItem
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routePredictionDataItemApiProjectsV2ProjectHashPredictionsPredictionHashPreviewDataItemGet:
      async (
        projectHash: string,
        predictionHash: string,
        dataItem: string,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "routePredictionDataItemApiProjectsV2ProjectHashPredictionsPredictionHashPreviewDataItemGet",
          "projectHash",
          projectHash
        );
        // verify required parameter 'predictionHash' is not null or undefined
        assertParamExists(
          "routePredictionDataItemApiProjectsV2ProjectHashPredictionsPredictionHashPreviewDataItemGet",
          "predictionHash",
          predictionHash
        );
        // verify required parameter 'dataItem' is not null or undefined
        assertParamExists(
          "routePredictionDataItemApiProjectsV2ProjectHashPredictionsPredictionHashPreviewDataItemGet",
          "dataItem",
          dataItem
        );
        const localVarPath =
          `/api/projects_v2/{project_hash}/predictions/{prediction_hash}/preview/{data_item}`
            .replace(
              `{${"project_hash"}}`,
              encodeURIComponent(String(projectHash))
            )
            .replace(
              `{${"prediction_hash"}}`,
              encodeURIComponent(String(predictionHash))
            )
            .replace(`{${"data_item"}}`, encodeURIComponent(String(dataItem)));
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "GET",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication OAuth2PasswordBearer required
        // oauth required
        await setOAuthToObject(
          localVarHeaderParameter,
          "OAuth2PasswordBearer",
          [],
          configuration
        );

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Route Prediction Distribution
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {PredictionDomain} domain
     * @param {number} iou
     * @param {string} group
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routePredictionDistributionApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainDistributionGet:
      async (
        projectHash: string,
        predictionHash: string,
        domain: PredictionDomain,
        iou: number,
        group: string,
        buckets?: AnalysisBuckets,
        filters?: string,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "routePredictionDistributionApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainDistributionGet",
          "projectHash",
          projectHash
        );
        // verify required parameter 'predictionHash' is not null or undefined
        assertParamExists(
          "routePredictionDistributionApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainDistributionGet",
          "predictionHash",
          predictionHash
        );
        // verify required parameter 'domain' is not null or undefined
        assertParamExists(
          "routePredictionDistributionApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainDistributionGet",
          "domain",
          domain
        );
        // verify required parameter 'iou' is not null or undefined
        assertParamExists(
          "routePredictionDistributionApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainDistributionGet",
          "iou",
          iou
        );
        // verify required parameter 'group' is not null or undefined
        assertParamExists(
          "routePredictionDistributionApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainDistributionGet",
          "group",
          group
        );
        const localVarPath =
          `/api/projects_v2/{project_hash}/predictions/{prediction_hash}/analytics/{domain}/distribution`
            .replace(
              `{${"project_hash"}}`,
              encodeURIComponent(String(projectHash))
            )
            .replace(
              `{${"prediction_hash"}}`,
              encodeURIComponent(String(predictionHash))
            )
            .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "GET",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication OAuth2PasswordBearer required
        // oauth required
        await setOAuthToObject(
          localVarHeaderParameter,
          "OAuth2PasswordBearer",
          [],
          configuration
        );

        if (iou !== undefined) {
          localVarQueryParameter["iou"] = iou;
        }

        if (group !== undefined) {
          localVarQueryParameter["group"] = group;
        }

        if (buckets !== undefined) {
          localVarQueryParameter["buckets"] = buckets;
        }

        if (filters !== undefined) {
          localVarQueryParameter["filters"] = filters;
        }

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Route Prediction Distribution
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {PredictionDomain} domain
     * @param {number} iou
     * @param {string} group
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routePredictionDistributionApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainDistributionGet_1:
      async (
        projectHash: string,
        predictionHash: string,
        domain: PredictionDomain,
        iou: number,
        group: string,
        buckets?: AnalysisBuckets,
        filters?: string,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "routePredictionDistributionApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainDistributionGet_1",
          "projectHash",
          projectHash
        );
        // verify required parameter 'predictionHash' is not null or undefined
        assertParamExists(
          "routePredictionDistributionApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainDistributionGet_1",
          "predictionHash",
          predictionHash
        );
        // verify required parameter 'domain' is not null or undefined
        assertParamExists(
          "routePredictionDistributionApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainDistributionGet_1",
          "domain",
          domain
        );
        // verify required parameter 'iou' is not null or undefined
        assertParamExists(
          "routePredictionDistributionApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainDistributionGet_1",
          "iou",
          iou
        );
        // verify required parameter 'group' is not null or undefined
        assertParamExists(
          "routePredictionDistributionApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainDistributionGet_1",
          "group",
          group
        );
        const localVarPath =
          `/api/projects_v2/{project_hash}/predictions/{prediction_hash}/analytics/{domain}/distribution`
            .replace(
              `{${"project_hash"}}`,
              encodeURIComponent(String(projectHash))
            )
            .replace(
              `{${"prediction_hash"}}`,
              encodeURIComponent(String(predictionHash))
            )
            .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "GET",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication OAuth2PasswordBearer required
        // oauth required
        await setOAuthToObject(
          localVarHeaderParameter,
          "OAuth2PasswordBearer",
          [],
          configuration
        );

        if (iou !== undefined) {
          localVarQueryParameter["iou"] = iou;
        }

        if (group !== undefined) {
          localVarQueryParameter["group"] = group;
        }

        if (buckets !== undefined) {
          localVarQueryParameter["buckets"] = buckets;
        }

        if (filters !== undefined) {
          localVarQueryParameter["filters"] = filters;
        }

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Route Prediction Metric Performance
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {number} iou
     * @param {string} metricName
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routePredictionMetricPerformanceApiProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGet:
      async (
        projectHash: string,
        predictionHash: string,
        iou: number,
        metricName: string,
        buckets?: AnalysisBuckets,
        filters?: string,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "routePredictionMetricPerformanceApiProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGet",
          "projectHash",
          projectHash
        );
        // verify required parameter 'predictionHash' is not null or undefined
        assertParamExists(
          "routePredictionMetricPerformanceApiProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGet",
          "predictionHash",
          predictionHash
        );
        // verify required parameter 'iou' is not null or undefined
        assertParamExists(
          "routePredictionMetricPerformanceApiProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGet",
          "iou",
          iou
        );
        // verify required parameter 'metricName' is not null or undefined
        assertParamExists(
          "routePredictionMetricPerformanceApiProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGet",
          "metricName",
          metricName
        );
        const localVarPath =
          `/api/projects_v2/{project_hash}/predictions/{prediction_hash}/metric_performance`
            .replace(
              `{${"project_hash"}}`,
              encodeURIComponent(String(projectHash))
            )
            .replace(
              `{${"prediction_hash"}}`,
              encodeURIComponent(String(predictionHash))
            );
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "GET",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication OAuth2PasswordBearer required
        // oauth required
        await setOAuthToObject(
          localVarHeaderParameter,
          "OAuth2PasswordBearer",
          [],
          configuration
        );

        if (iou !== undefined) {
          localVarQueryParameter["iou"] = iou;
        }

        if (metricName !== undefined) {
          localVarQueryParameter["metric_name"] = metricName;
        }

        if (buckets !== undefined) {
          localVarQueryParameter["buckets"] = buckets;
        }

        if (filters !== undefined) {
          localVarQueryParameter["filters"] = filters;
        }

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Route Prediction Reduction Scatter
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {PredictionDomain} domain
     * @param {string} reductionHash
     * @param {number} iou
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routePredictionReductionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainReductionsReductionHashSummaryGet:
      async (
        projectHash: string,
        predictionHash: string,
        domain: PredictionDomain,
        reductionHash: string,
        iou: number,
        buckets?: AnalysisBuckets,
        filters?: string,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "routePredictionReductionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainReductionsReductionHashSummaryGet",
          "projectHash",
          projectHash
        );
        // verify required parameter 'predictionHash' is not null or undefined
        assertParamExists(
          "routePredictionReductionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainReductionsReductionHashSummaryGet",
          "predictionHash",
          predictionHash
        );
        // verify required parameter 'domain' is not null or undefined
        assertParamExists(
          "routePredictionReductionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainReductionsReductionHashSummaryGet",
          "domain",
          domain
        );
        // verify required parameter 'reductionHash' is not null or undefined
        assertParamExists(
          "routePredictionReductionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainReductionsReductionHashSummaryGet",
          "reductionHash",
          reductionHash
        );
        // verify required parameter 'iou' is not null or undefined
        assertParamExists(
          "routePredictionReductionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainReductionsReductionHashSummaryGet",
          "iou",
          iou
        );
        const localVarPath =
          `/api/projects_v2/{project_hash}/predictions/{prediction_hash}/analytics/{domain}/reductions/{reduction_hash}/summary`
            .replace(
              `{${"project_hash"}}`,
              encodeURIComponent(String(projectHash))
            )
            .replace(
              `{${"prediction_hash"}}`,
              encodeURIComponent(String(predictionHash))
            )
            .replace(`{${"domain"}}`, encodeURIComponent(String(domain)))
            .replace(
              `{${"reduction_hash"}}`,
              encodeURIComponent(String(reductionHash))
            );
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "GET",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication OAuth2PasswordBearer required
        // oauth required
        await setOAuthToObject(
          localVarHeaderParameter,
          "OAuth2PasswordBearer",
          [],
          configuration
        );

        if (iou !== undefined) {
          localVarQueryParameter["iou"] = iou;
        }

        if (buckets !== undefined) {
          localVarQueryParameter["buckets"] = buckets;
        }

        if (filters !== undefined) {
          localVarQueryParameter["filters"] = filters;
        }

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Route Prediction Reduction Scatter
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {PredictionDomain} domain
     * @param {string} reductionHash
     * @param {number} iou
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routePredictionReductionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainReductionsReductionHashSummaryGet_2:
      async (
        projectHash: string,
        predictionHash: string,
        domain: PredictionDomain,
        reductionHash: string,
        iou: number,
        buckets?: AnalysisBuckets,
        filters?: string,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "routePredictionReductionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainReductionsReductionHashSummaryGet_2",
          "projectHash",
          projectHash
        );
        // verify required parameter 'predictionHash' is not null or undefined
        assertParamExists(
          "routePredictionReductionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainReductionsReductionHashSummaryGet_2",
          "predictionHash",
          predictionHash
        );
        // verify required parameter 'domain' is not null or undefined
        assertParamExists(
          "routePredictionReductionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainReductionsReductionHashSummaryGet_2",
          "domain",
          domain
        );
        // verify required parameter 'reductionHash' is not null or undefined
        assertParamExists(
          "routePredictionReductionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainReductionsReductionHashSummaryGet_2",
          "reductionHash",
          reductionHash
        );
        // verify required parameter 'iou' is not null or undefined
        assertParamExists(
          "routePredictionReductionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainReductionsReductionHashSummaryGet_2",
          "iou",
          iou
        );
        const localVarPath =
          `/api/projects_v2/{project_hash}/predictions/{prediction_hash}/analytics/{domain}/reductions/{reduction_hash}/summary`
            .replace(
              `{${"project_hash"}}`,
              encodeURIComponent(String(projectHash))
            )
            .replace(
              `{${"prediction_hash"}}`,
              encodeURIComponent(String(predictionHash))
            )
            .replace(`{${"domain"}}`, encodeURIComponent(String(domain)))
            .replace(
              `{${"reduction_hash"}}`,
              encodeURIComponent(String(reductionHash))
            );
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "GET",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication OAuth2PasswordBearer required
        // oauth required
        await setOAuthToObject(
          localVarHeaderParameter,
          "OAuth2PasswordBearer",
          [],
          configuration
        );

        if (iou !== undefined) {
          localVarQueryParameter["iou"] = iou;
        }

        if (buckets !== undefined) {
          localVarQueryParameter["buckets"] = buckets;
        }

        if (filters !== undefined) {
          localVarQueryParameter["filters"] = filters;
        }

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Route Prediction Scatter
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {PredictionDomain} domain
     * @param {number} iou
     * @param {string} xMetric
     * @param {string} yMetric
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routePredictionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainScatterGet:
      async (
        projectHash: string,
        predictionHash: string,
        domain: PredictionDomain,
        iou: number,
        xMetric: string,
        yMetric: string,
        buckets?: AnalysisBuckets,
        filters?: string,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "routePredictionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainScatterGet",
          "projectHash",
          projectHash
        );
        // verify required parameter 'predictionHash' is not null or undefined
        assertParamExists(
          "routePredictionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainScatterGet",
          "predictionHash",
          predictionHash
        );
        // verify required parameter 'domain' is not null or undefined
        assertParamExists(
          "routePredictionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainScatterGet",
          "domain",
          domain
        );
        // verify required parameter 'iou' is not null or undefined
        assertParamExists(
          "routePredictionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainScatterGet",
          "iou",
          iou
        );
        // verify required parameter 'xMetric' is not null or undefined
        assertParamExists(
          "routePredictionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainScatterGet",
          "xMetric",
          xMetric
        );
        // verify required parameter 'yMetric' is not null or undefined
        assertParamExists(
          "routePredictionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainScatterGet",
          "yMetric",
          yMetric
        );
        const localVarPath =
          `/api/projects_v2/{project_hash}/predictions/{prediction_hash}/analytics/{domain}/scatter`
            .replace(
              `{${"project_hash"}}`,
              encodeURIComponent(String(projectHash))
            )
            .replace(
              `{${"prediction_hash"}}`,
              encodeURIComponent(String(predictionHash))
            )
            .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "GET",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication OAuth2PasswordBearer required
        // oauth required
        await setOAuthToObject(
          localVarHeaderParameter,
          "OAuth2PasswordBearer",
          [],
          configuration
        );

        if (iou !== undefined) {
          localVarQueryParameter["iou"] = iou;
        }

        if (xMetric !== undefined) {
          localVarQueryParameter["x_metric"] = xMetric;
        }

        if (yMetric !== undefined) {
          localVarQueryParameter["y_metric"] = yMetric;
        }

        if (buckets !== undefined) {
          localVarQueryParameter["buckets"] = buckets;
        }

        if (filters !== undefined) {
          localVarQueryParameter["filters"] = filters;
        }

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Route Prediction Scatter
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {PredictionDomain} domain
     * @param {number} iou
     * @param {string} xMetric
     * @param {string} yMetric
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routePredictionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainScatterGet_3:
      async (
        projectHash: string,
        predictionHash: string,
        domain: PredictionDomain,
        iou: number,
        xMetric: string,
        yMetric: string,
        buckets?: AnalysisBuckets,
        filters?: string,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "routePredictionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainScatterGet_3",
          "projectHash",
          projectHash
        );
        // verify required parameter 'predictionHash' is not null or undefined
        assertParamExists(
          "routePredictionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainScatterGet_3",
          "predictionHash",
          predictionHash
        );
        // verify required parameter 'domain' is not null or undefined
        assertParamExists(
          "routePredictionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainScatterGet_3",
          "domain",
          domain
        );
        // verify required parameter 'iou' is not null or undefined
        assertParamExists(
          "routePredictionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainScatterGet_3",
          "iou",
          iou
        );
        // verify required parameter 'xMetric' is not null or undefined
        assertParamExists(
          "routePredictionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainScatterGet_3",
          "xMetric",
          xMetric
        );
        // verify required parameter 'yMetric' is not null or undefined
        assertParamExists(
          "routePredictionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainScatterGet_3",
          "yMetric",
          yMetric
        );
        const localVarPath =
          `/api/projects_v2/{project_hash}/predictions/{prediction_hash}/analytics/{domain}/scatter`
            .replace(
              `{${"project_hash"}}`,
              encodeURIComponent(String(projectHash))
            )
            .replace(
              `{${"prediction_hash"}}`,
              encodeURIComponent(String(predictionHash))
            )
            .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "GET",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication OAuth2PasswordBearer required
        // oauth required
        await setOAuthToObject(
          localVarHeaderParameter,
          "OAuth2PasswordBearer",
          [],
          configuration
        );

        if (iou !== undefined) {
          localVarQueryParameter["iou"] = iou;
        }

        if (xMetric !== undefined) {
          localVarQueryParameter["x_metric"] = xMetric;
        }

        if (yMetric !== undefined) {
          localVarQueryParameter["y_metric"] = yMetric;
        }

        if (buckets !== undefined) {
          localVarQueryParameter["buckets"] = buckets;
        }

        if (filters !== undefined) {
          localVarQueryParameter["filters"] = filters;
        }

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Route Prediction Search
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {PredictionDomain} domain
     * @param {number} iou
     * @param {boolean} desc
     * @param {string} [filters] Search Filters
     * @param {string} [orderBy]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {string} [text]
     * @param {File} [image]
     * @param {string} [item]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routePredictionSearchApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainSearchPost:
      async (
        projectHash: string,
        predictionHash: string,
        domain: PredictionDomain,
        iou: number,
        desc: boolean,
        filters?: string,
        orderBy?: string,
        offset?: number,
        limit?: number,
        text?: string,
        image?: File,
        item?: string,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "routePredictionSearchApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainSearchPost",
          "projectHash",
          projectHash
        );
        // verify required parameter 'predictionHash' is not null or undefined
        assertParamExists(
          "routePredictionSearchApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainSearchPost",
          "predictionHash",
          predictionHash
        );
        // verify required parameter 'domain' is not null or undefined
        assertParamExists(
          "routePredictionSearchApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainSearchPost",
          "domain",
          domain
        );
        // verify required parameter 'iou' is not null or undefined
        assertParamExists(
          "routePredictionSearchApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainSearchPost",
          "iou",
          iou
        );
        // verify required parameter 'desc' is not null or undefined
        assertParamExists(
          "routePredictionSearchApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainSearchPost",
          "desc",
          desc
        );
        const localVarPath =
          `/api/projects_v2/{project_hash}/predictions/{prediction_hash}/analytics/{domain}/search`
            .replace(
              `{${"project_hash"}}`,
              encodeURIComponent(String(projectHash))
            )
            .replace(
              `{${"prediction_hash"}}`,
              encodeURIComponent(String(predictionHash))
            )
            .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "POST",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;
        const localVarFormParams = new ((configuration &&
          configuration.formDataCtor) ||
          FormData)();

        // authentication OAuth2PasswordBearer required
        // oauth required
        await setOAuthToObject(
          localVarHeaderParameter,
          "OAuth2PasswordBearer",
          [],
          configuration
        );

        if (filters !== undefined) {
          localVarQueryParameter["filters"] = filters;
        }

        if (iou !== undefined) {
          localVarFormParams.append("iou", iou as any);
        }

        if (orderBy !== undefined) {
          localVarFormParams.append("order_by", orderBy as any);
        }

        if (desc !== undefined) {
          localVarFormParams.append("desc", desc as any);
        }

        if (offset !== undefined) {
          localVarFormParams.append("offset", offset as any);
        }

        if (limit !== undefined) {
          localVarFormParams.append("limit", limit as any);
        }

        if (text !== undefined) {
          localVarFormParams.append("text", text as any);
        }

        if (image !== undefined) {
          localVarFormParams.append("image", image as any);
        }

        if (item !== undefined) {
          localVarFormParams.append("item", item as any);
        }

        localVarHeaderParameter["Content-Type"] = "multipart/form-data";

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };
        localVarRequestOptions.data = localVarFormParams;

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Route Prediction Search
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {PredictionDomain} domain
     * @param {number} iou
     * @param {boolean} desc
     * @param {string} [filters] Search Filters
     * @param {string} [orderBy]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {string} [text]
     * @param {File} [image]
     * @param {string} [item]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routePredictionSearchApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainSearchPost_4:
      async (
        projectHash: string,
        predictionHash: string,
        domain: PredictionDomain,
        iou: number,
        desc: boolean,
        filters?: string,
        orderBy?: string,
        offset?: number,
        limit?: number,
        text?: string,
        image?: File,
        item?: string,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "routePredictionSearchApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainSearchPost_4",
          "projectHash",
          projectHash
        );
        // verify required parameter 'predictionHash' is not null or undefined
        assertParamExists(
          "routePredictionSearchApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainSearchPost_4",
          "predictionHash",
          predictionHash
        );
        // verify required parameter 'domain' is not null or undefined
        assertParamExists(
          "routePredictionSearchApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainSearchPost_4",
          "domain",
          domain
        );
        // verify required parameter 'iou' is not null or undefined
        assertParamExists(
          "routePredictionSearchApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainSearchPost_4",
          "iou",
          iou
        );
        // verify required parameter 'desc' is not null or undefined
        assertParamExists(
          "routePredictionSearchApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainSearchPost_4",
          "desc",
          desc
        );
        const localVarPath =
          `/api/projects_v2/{project_hash}/predictions/{prediction_hash}/analytics/{domain}/search`
            .replace(
              `{${"project_hash"}}`,
              encodeURIComponent(String(projectHash))
            )
            .replace(
              `{${"prediction_hash"}}`,
              encodeURIComponent(String(predictionHash))
            )
            .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "POST",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;
        const localVarFormParams = new ((configuration &&
          configuration.formDataCtor) ||
          FormData)();

        // authentication OAuth2PasswordBearer required
        // oauth required
        await setOAuthToObject(
          localVarHeaderParameter,
          "OAuth2PasswordBearer",
          [],
          configuration
        );

        if (filters !== undefined) {
          localVarQueryParameter["filters"] = filters;
        }

        if (iou !== undefined) {
          localVarFormParams.append("iou", iou as any);
        }

        if (orderBy !== undefined) {
          localVarFormParams.append("order_by", orderBy as any);
        }

        if (desc !== undefined) {
          localVarFormParams.append("desc", desc as any);
        }

        if (offset !== undefined) {
          localVarFormParams.append("offset", offset as any);
        }

        if (limit !== undefined) {
          localVarFormParams.append("limit", limit as any);
        }

        if (text !== undefined) {
          localVarFormParams.append("text", text as any);
        }

        if (image !== undefined) {
          localVarFormParams.append("image", image as any);
        }

        if (item !== undefined) {
          localVarFormParams.append("item", item as any);
        }

        localVarHeaderParameter["Content-Type"] = "multipart/form-data";

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };
        localVarRequestOptions.data = localVarFormParams;

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Route Prediction Summary
     * @param {string} predictionHash
     * @param {string} projectHash
     * @param {number} iou
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routePredictionSummaryApiProjectsV2ProjectHashPredictionsPredictionHashSummaryGet:
      async (
        predictionHash: string,
        projectHash: string,
        iou: number,
        filters?: string,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'predictionHash' is not null or undefined
        assertParamExists(
          "routePredictionSummaryApiProjectsV2ProjectHashPredictionsPredictionHashSummaryGet",
          "predictionHash",
          predictionHash
        );
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "routePredictionSummaryApiProjectsV2ProjectHashPredictionsPredictionHashSummaryGet",
          "projectHash",
          projectHash
        );
        // verify required parameter 'iou' is not null or undefined
        assertParamExists(
          "routePredictionSummaryApiProjectsV2ProjectHashPredictionsPredictionHashSummaryGet",
          "iou",
          iou
        );
        const localVarPath =
          `/api/projects_v2/{project_hash}/predictions/{prediction_hash}/summary`
            .replace(
              `{${"prediction_hash"}}`,
              encodeURIComponent(String(predictionHash))
            )
            .replace(
              `{${"project_hash"}}`,
              encodeURIComponent(String(projectHash))
            );
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "GET",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication OAuth2PasswordBearer required
        // oauth required
        await setOAuthToObject(
          localVarHeaderParameter,
          "OAuth2PasswordBearer",
          [],
          configuration
        );

        if (iou !== undefined) {
          localVarQueryParameter["iou"] = iou;
        }

        if (filters !== undefined) {
          localVarQueryParameter["filters"] = filters;
        }

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Route Tag Items
     * @param {string} projectHash
     * @param {Array<ItemTags>} itemTags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeTagItemsApiProjectsV2ProjectHashTagsTagItemsPut: async (
      projectHash: string,
      itemTags: Array<ItemTags>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectHash' is not null or undefined
      assertParamExists(
        "routeTagItemsApiProjectsV2ProjectHashTagsTagItemsPut",
        "projectHash",
        projectHash
      );
      // verify required parameter 'itemTags' is not null or undefined
      assertParamExists(
        "routeTagItemsApiProjectsV2ProjectHashTagsTagItemsPut",
        "itemTags",
        itemTags
      );
      const localVarPath =
        `/api/projects_v2/{project_hash}/tags/tag_items`.replace(
          `{${"project_hash"}}`,
          encodeURIComponent(String(projectHash))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2PasswordBearer",
        [],
        configuration
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        itemTags,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Tagged Items
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeTaggedItemsApiProjectsV2ProjectHashTagsTaggedItemsGet: async (
      projectHash: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectHash' is not null or undefined
      assertParamExists(
        "routeTaggedItemsApiProjectsV2ProjectHashTagsTaggedItemsGet",
        "projectHash",
        projectHash
      );
      const localVarPath =
        `/api/projects_v2/{project_hash}/tags/tagged_items`.replace(
          `{${"project_hash"}}`,
          encodeURIComponent(String(projectHash))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2PasswordBearer",
        [],
        configuration
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PredictionApi - functional programming interface
 * @export
 */
export const PredictionApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    PredictionApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Route List Tags
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeListTagsApiProjectsV2ProjectHashTagsGet(
      projectHash: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<ProjectTagEntry>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeListTagsApiProjectsV2ProjectHashTagsGet(
          projectHash,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Prediction Data Item
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {string} dataItem
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routePredictionDataItemApiProjectsV2ProjectHashPredictionsPredictionHashPreviewDataItemGet(
      projectHash: string,
      predictionHash: string,
      dataItem: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PredictionItem>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routePredictionDataItemApiProjectsV2ProjectHashPredictionsPredictionHashPreviewDataItemGet(
          projectHash,
          predictionHash,
          dataItem,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Prediction Distribution
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {PredictionDomain} domain
     * @param {number} iou
     * @param {string} group
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routePredictionDistributionApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainDistributionGet(
      projectHash: string,
      predictionHash: string,
      domain: PredictionDomain,
      iou: number,
      group: string,
      buckets?: AnalysisBuckets,
      filters?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<QueryDistribution>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routePredictionDistributionApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainDistributionGet(
          projectHash,
          predictionHash,
          domain,
          iou,
          group,
          buckets,
          filters,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Prediction Distribution
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {PredictionDomain} domain
     * @param {number} iou
     * @param {string} group
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routePredictionDistributionApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainDistributionGet_1(
      projectHash: string,
      predictionHash: string,
      domain: PredictionDomain,
      iou: number,
      group: string,
      buckets?: AnalysisBuckets,
      filters?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<QueryDistribution>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routePredictionDistributionApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainDistributionGet_1(
          projectHash,
          predictionHash,
          domain,
          iou,
          group,
          buckets,
          filters,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Prediction Metric Performance
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {number} iou
     * @param {string} metricName
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routePredictionMetricPerformanceApiProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGet(
      projectHash: string,
      predictionHash: string,
      iou: number,
      metricName: string,
      buckets?: AnalysisBuckets,
      filters?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<QueryMetricPerformance>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routePredictionMetricPerformanceApiProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGet(
          projectHash,
          predictionHash,
          iou,
          metricName,
          buckets,
          filters,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Prediction Reduction Scatter
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {PredictionDomain} domain
     * @param {string} reductionHash
     * @param {number} iou
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routePredictionReductionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainReductionsReductionHashSummaryGet(
      projectHash: string,
      predictionHash: string,
      domain: PredictionDomain,
      reductionHash: string,
      iou: number,
      buckets?: AnalysisBuckets,
      filters?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PredictionQuery2DEmbedding>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routePredictionReductionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainReductionsReductionHashSummaryGet(
          projectHash,
          predictionHash,
          domain,
          reductionHash,
          iou,
          buckets,
          filters,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Prediction Reduction Scatter
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {PredictionDomain} domain
     * @param {string} reductionHash
     * @param {number} iou
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routePredictionReductionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainReductionsReductionHashSummaryGet_2(
      projectHash: string,
      predictionHash: string,
      domain: PredictionDomain,
      reductionHash: string,
      iou: number,
      buckets?: AnalysisBuckets,
      filters?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PredictionQuery2DEmbedding>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routePredictionReductionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainReductionsReductionHashSummaryGet_2(
          projectHash,
          predictionHash,
          domain,
          reductionHash,
          iou,
          buckets,
          filters,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Prediction Scatter
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {PredictionDomain} domain
     * @param {number} iou
     * @param {string} xMetric
     * @param {string} yMetric
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routePredictionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainScatterGet(
      projectHash: string,
      predictionHash: string,
      domain: PredictionDomain,
      iou: number,
      xMetric: string,
      yMetric: string,
      buckets?: AnalysisBuckets,
      filters?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryScatter>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routePredictionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainScatterGet(
          projectHash,
          predictionHash,
          domain,
          iou,
          xMetric,
          yMetric,
          buckets,
          filters,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Prediction Scatter
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {PredictionDomain} domain
     * @param {number} iou
     * @param {string} xMetric
     * @param {string} yMetric
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routePredictionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainScatterGet_3(
      projectHash: string,
      predictionHash: string,
      domain: PredictionDomain,
      iou: number,
      xMetric: string,
      yMetric: string,
      buckets?: AnalysisBuckets,
      filters?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryScatter>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routePredictionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainScatterGet_3(
          projectHash,
          predictionHash,
          domain,
          iou,
          xMetric,
          yMetric,
          buckets,
          filters,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Prediction Search
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {PredictionDomain} domain
     * @param {number} iou
     * @param {boolean} desc
     * @param {string} [filters] Search Filters
     * @param {string} [orderBy]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {string} [text]
     * @param {File} [image]
     * @param {string} [item]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routePredictionSearchApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainSearchPost(
      projectHash: string,
      predictionHash: string,
      domain: PredictionDomain,
      iou: number,
      desc: boolean,
      filters?: string,
      orderBy?: string,
      offset?: number,
      limit?: number,
      text?: string,
      image?: File,
      item?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnalysisSearch>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routePredictionSearchApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainSearchPost(
          projectHash,
          predictionHash,
          domain,
          iou,
          desc,
          filters,
          orderBy,
          offset,
          limit,
          text,
          image,
          item,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Prediction Search
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {PredictionDomain} domain
     * @param {number} iou
     * @param {boolean} desc
     * @param {string} [filters] Search Filters
     * @param {string} [orderBy]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {string} [text]
     * @param {File} [image]
     * @param {string} [item]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routePredictionSearchApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainSearchPost_4(
      projectHash: string,
      predictionHash: string,
      domain: PredictionDomain,
      iou: number,
      desc: boolean,
      filters?: string,
      orderBy?: string,
      offset?: number,
      limit?: number,
      text?: string,
      image?: File,
      item?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnalysisSearch>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routePredictionSearchApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainSearchPost_4(
          projectHash,
          predictionHash,
          domain,
          iou,
          desc,
          filters,
          orderBy,
          offset,
          limit,
          text,
          image,
          item,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Prediction Summary
     * @param {string} predictionHash
     * @param {string} projectHash
     * @param {number} iou
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routePredictionSummaryApiProjectsV2ProjectHashPredictionsPredictionHashSummaryGet(
      predictionHash: string,
      projectHash: string,
      iou: number,
      filters?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PredictionSummaryResult>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routePredictionSummaryApiProjectsV2ProjectHashPredictionsPredictionHashSummaryGet(
          predictionHash,
          projectHash,
          iou,
          filters,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Tag Items
     * @param {string} projectHash
     * @param {Array<ItemTags>} itemTags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeTagItemsApiProjectsV2ProjectHashTagsTagItemsPut(
      projectHash: string,
      itemTags: Array<ItemTags>,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeTagItemsApiProjectsV2ProjectHashTagsTagItemsPut(
          projectHash,
          itemTags,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Tagged Items
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeTaggedItemsApiProjectsV2ProjectHashTagsTaggedItemsGet(
      projectHash: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<{ [key: string]: GroupedTags | undefined }>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeTaggedItemsApiProjectsV2ProjectHashTagsTaggedItemsGet(
          projectHash,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * PredictionApi - factory interface
 * @export
 */
export const PredictionApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = PredictionApiFp(configuration);
  return {
    /**
     *
     * @summary Route List Tags
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeListTagsApiProjectsV2ProjectHashTagsGet(
      projectHash: string,
      options?: any
    ): AxiosPromise<Array<ProjectTagEntry>> {
      return localVarFp
        .routeListTagsApiProjectsV2ProjectHashTagsGet(projectHash, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Prediction Data Item
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {string} dataItem
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routePredictionDataItemApiProjectsV2ProjectHashPredictionsPredictionHashPreviewDataItemGet(
      projectHash: string,
      predictionHash: string,
      dataItem: string,
      options?: any
    ): AxiosPromise<PredictionItem> {
      return localVarFp
        .routePredictionDataItemApiProjectsV2ProjectHashPredictionsPredictionHashPreviewDataItemGet(
          projectHash,
          predictionHash,
          dataItem,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Prediction Distribution
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {PredictionDomain} domain
     * @param {number} iou
     * @param {string} group
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routePredictionDistributionApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainDistributionGet(
      projectHash: string,
      predictionHash: string,
      domain: PredictionDomain,
      iou: number,
      group: string,
      buckets?: AnalysisBuckets,
      filters?: string,
      options?: any
    ): AxiosPromise<QueryDistribution> {
      return localVarFp
        .routePredictionDistributionApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainDistributionGet(
          projectHash,
          predictionHash,
          domain,
          iou,
          group,
          buckets,
          filters,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Prediction Distribution
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {PredictionDomain} domain
     * @param {number} iou
     * @param {string} group
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routePredictionDistributionApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainDistributionGet_1(
      projectHash: string,
      predictionHash: string,
      domain: PredictionDomain,
      iou: number,
      group: string,
      buckets?: AnalysisBuckets,
      filters?: string,
      options?: any
    ): AxiosPromise<QueryDistribution> {
      return localVarFp
        .routePredictionDistributionApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainDistributionGet_1(
          projectHash,
          predictionHash,
          domain,
          iou,
          group,
          buckets,
          filters,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Prediction Metric Performance
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {number} iou
     * @param {string} metricName
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routePredictionMetricPerformanceApiProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGet(
      projectHash: string,
      predictionHash: string,
      iou: number,
      metricName: string,
      buckets?: AnalysisBuckets,
      filters?: string,
      options?: any
    ): AxiosPromise<QueryMetricPerformance> {
      return localVarFp
        .routePredictionMetricPerformanceApiProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGet(
          projectHash,
          predictionHash,
          iou,
          metricName,
          buckets,
          filters,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Prediction Reduction Scatter
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {PredictionDomain} domain
     * @param {string} reductionHash
     * @param {number} iou
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routePredictionReductionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainReductionsReductionHashSummaryGet(
      projectHash: string,
      predictionHash: string,
      domain: PredictionDomain,
      reductionHash: string,
      iou: number,
      buckets?: AnalysisBuckets,
      filters?: string,
      options?: any
    ): AxiosPromise<PredictionQuery2DEmbedding> {
      return localVarFp
        .routePredictionReductionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainReductionsReductionHashSummaryGet(
          projectHash,
          predictionHash,
          domain,
          reductionHash,
          iou,
          buckets,
          filters,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Prediction Reduction Scatter
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {PredictionDomain} domain
     * @param {string} reductionHash
     * @param {number} iou
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routePredictionReductionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainReductionsReductionHashSummaryGet_2(
      projectHash: string,
      predictionHash: string,
      domain: PredictionDomain,
      reductionHash: string,
      iou: number,
      buckets?: AnalysisBuckets,
      filters?: string,
      options?: any
    ): AxiosPromise<PredictionQuery2DEmbedding> {
      return localVarFp
        .routePredictionReductionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainReductionsReductionHashSummaryGet_2(
          projectHash,
          predictionHash,
          domain,
          reductionHash,
          iou,
          buckets,
          filters,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Prediction Scatter
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {PredictionDomain} domain
     * @param {number} iou
     * @param {string} xMetric
     * @param {string} yMetric
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routePredictionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainScatterGet(
      projectHash: string,
      predictionHash: string,
      domain: PredictionDomain,
      iou: number,
      xMetric: string,
      yMetric: string,
      buckets?: AnalysisBuckets,
      filters?: string,
      options?: any
    ): AxiosPromise<QueryScatter> {
      return localVarFp
        .routePredictionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainScatterGet(
          projectHash,
          predictionHash,
          domain,
          iou,
          xMetric,
          yMetric,
          buckets,
          filters,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Prediction Scatter
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {PredictionDomain} domain
     * @param {number} iou
     * @param {string} xMetric
     * @param {string} yMetric
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routePredictionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainScatterGet_3(
      projectHash: string,
      predictionHash: string,
      domain: PredictionDomain,
      iou: number,
      xMetric: string,
      yMetric: string,
      buckets?: AnalysisBuckets,
      filters?: string,
      options?: any
    ): AxiosPromise<QueryScatter> {
      return localVarFp
        .routePredictionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainScatterGet_3(
          projectHash,
          predictionHash,
          domain,
          iou,
          xMetric,
          yMetric,
          buckets,
          filters,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Prediction Search
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {PredictionDomain} domain
     * @param {number} iou
     * @param {boolean} desc
     * @param {string} [filters] Search Filters
     * @param {string} [orderBy]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {string} [text]
     * @param {File} [image]
     * @param {string} [item]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routePredictionSearchApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainSearchPost(
      projectHash: string,
      predictionHash: string,
      domain: PredictionDomain,
      iou: number,
      desc: boolean,
      filters?: string,
      orderBy?: string,
      offset?: number,
      limit?: number,
      text?: string,
      image?: File,
      item?: string,
      options?: any
    ): AxiosPromise<AnalysisSearch> {
      return localVarFp
        .routePredictionSearchApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainSearchPost(
          projectHash,
          predictionHash,
          domain,
          iou,
          desc,
          filters,
          orderBy,
          offset,
          limit,
          text,
          image,
          item,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Prediction Search
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {PredictionDomain} domain
     * @param {number} iou
     * @param {boolean} desc
     * @param {string} [filters] Search Filters
     * @param {string} [orderBy]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {string} [text]
     * @param {File} [image]
     * @param {string} [item]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routePredictionSearchApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainSearchPost_4(
      projectHash: string,
      predictionHash: string,
      domain: PredictionDomain,
      iou: number,
      desc: boolean,
      filters?: string,
      orderBy?: string,
      offset?: number,
      limit?: number,
      text?: string,
      image?: File,
      item?: string,
      options?: any
    ): AxiosPromise<AnalysisSearch> {
      return localVarFp
        .routePredictionSearchApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainSearchPost_4(
          projectHash,
          predictionHash,
          domain,
          iou,
          desc,
          filters,
          orderBy,
          offset,
          limit,
          text,
          image,
          item,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Prediction Summary
     * @param {string} predictionHash
     * @param {string} projectHash
     * @param {number} iou
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routePredictionSummaryApiProjectsV2ProjectHashPredictionsPredictionHashSummaryGet(
      predictionHash: string,
      projectHash: string,
      iou: number,
      filters?: string,
      options?: any
    ): AxiosPromise<PredictionSummaryResult> {
      return localVarFp
        .routePredictionSummaryApiProjectsV2ProjectHashPredictionsPredictionHashSummaryGet(
          predictionHash,
          projectHash,
          iou,
          filters,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Tag Items
     * @param {string} projectHash
     * @param {Array<ItemTags>} itemTags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeTagItemsApiProjectsV2ProjectHashTagsTagItemsPut(
      projectHash: string,
      itemTags: Array<ItemTags>,
      options?: any
    ): AxiosPromise<any> {
      return localVarFp
        .routeTagItemsApiProjectsV2ProjectHashTagsTagItemsPut(
          projectHash,
          itemTags,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Tagged Items
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeTaggedItemsApiProjectsV2ProjectHashTagsTaggedItemsGet(
      projectHash: string,
      options?: any
    ): AxiosPromise<{ [key: string]: GroupedTags | undefined }> {
      return localVarFp
        .routeTaggedItemsApiProjectsV2ProjectHashTagsTaggedItemsGet(
          projectHash,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PredictionApi - object-oriented interface
 * @export
 * @class PredictionApi
 * @extends {BaseAPI}
 */
export class PredictionApi extends BaseAPI {
  /**
   *
   * @summary Route List Tags
   * @param {string} projectHash
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PredictionApi
   */
  public routeListTagsApiProjectsV2ProjectHashTagsGet(
    projectHash: string,
    options?: AxiosRequestConfig
  ) {
    return PredictionApiFp(this.configuration)
      .routeListTagsApiProjectsV2ProjectHashTagsGet(projectHash, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Prediction Data Item
   * @param {string} projectHash
   * @param {string} predictionHash
   * @param {string} dataItem
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PredictionApi
   */
  public routePredictionDataItemApiProjectsV2ProjectHashPredictionsPredictionHashPreviewDataItemGet(
    projectHash: string,
    predictionHash: string,
    dataItem: string,
    options?: AxiosRequestConfig
  ) {
    return PredictionApiFp(this.configuration)
      .routePredictionDataItemApiProjectsV2ProjectHashPredictionsPredictionHashPreviewDataItemGet(
        projectHash,
        predictionHash,
        dataItem,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Prediction Distribution
   * @param {string} projectHash
   * @param {string} predictionHash
   * @param {PredictionDomain} domain
   * @param {number} iou
   * @param {string} group
   * @param {AnalysisBuckets} [buckets]
   * @param {string} [filters] Search Filters
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PredictionApi
   */
  public routePredictionDistributionApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainDistributionGet(
    projectHash: string,
    predictionHash: string,
    domain: PredictionDomain,
    iou: number,
    group: string,
    buckets?: AnalysisBuckets,
    filters?: string,
    options?: AxiosRequestConfig
  ) {
    return PredictionApiFp(this.configuration)
      .routePredictionDistributionApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainDistributionGet(
        projectHash,
        predictionHash,
        domain,
        iou,
        group,
        buckets,
        filters,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Prediction Distribution
   * @param {string} projectHash
   * @param {string} predictionHash
   * @param {PredictionDomain} domain
   * @param {number} iou
   * @param {string} group
   * @param {AnalysisBuckets} [buckets]
   * @param {string} [filters] Search Filters
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PredictionApi
   */
  public routePredictionDistributionApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainDistributionGet_1(
    projectHash: string,
    predictionHash: string,
    domain: PredictionDomain,
    iou: number,
    group: string,
    buckets?: AnalysisBuckets,
    filters?: string,
    options?: AxiosRequestConfig
  ) {
    return PredictionApiFp(this.configuration)
      .routePredictionDistributionApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainDistributionGet_1(
        projectHash,
        predictionHash,
        domain,
        iou,
        group,
        buckets,
        filters,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Prediction Metric Performance
   * @param {string} projectHash
   * @param {string} predictionHash
   * @param {number} iou
   * @param {string} metricName
   * @param {AnalysisBuckets} [buckets]
   * @param {string} [filters] Search Filters
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PredictionApi
   */
  public routePredictionMetricPerformanceApiProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGet(
    projectHash: string,
    predictionHash: string,
    iou: number,
    metricName: string,
    buckets?: AnalysisBuckets,
    filters?: string,
    options?: AxiosRequestConfig
  ) {
    return PredictionApiFp(this.configuration)
      .routePredictionMetricPerformanceApiProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGet(
        projectHash,
        predictionHash,
        iou,
        metricName,
        buckets,
        filters,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Prediction Reduction Scatter
   * @param {string} projectHash
   * @param {string} predictionHash
   * @param {PredictionDomain} domain
   * @param {string} reductionHash
   * @param {number} iou
   * @param {AnalysisBuckets} [buckets]
   * @param {string} [filters] Search Filters
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PredictionApi
   */
  public routePredictionReductionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainReductionsReductionHashSummaryGet(
    projectHash: string,
    predictionHash: string,
    domain: PredictionDomain,
    reductionHash: string,
    iou: number,
    buckets?: AnalysisBuckets,
    filters?: string,
    options?: AxiosRequestConfig
  ) {
    return PredictionApiFp(this.configuration)
      .routePredictionReductionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainReductionsReductionHashSummaryGet(
        projectHash,
        predictionHash,
        domain,
        reductionHash,
        iou,
        buckets,
        filters,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Prediction Reduction Scatter
   * @param {string} projectHash
   * @param {string} predictionHash
   * @param {PredictionDomain} domain
   * @param {string} reductionHash
   * @param {number} iou
   * @param {AnalysisBuckets} [buckets]
   * @param {string} [filters] Search Filters
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PredictionApi
   */
  public routePredictionReductionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainReductionsReductionHashSummaryGet_2(
    projectHash: string,
    predictionHash: string,
    domain: PredictionDomain,
    reductionHash: string,
    iou: number,
    buckets?: AnalysisBuckets,
    filters?: string,
    options?: AxiosRequestConfig
  ) {
    return PredictionApiFp(this.configuration)
      .routePredictionReductionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainReductionsReductionHashSummaryGet_2(
        projectHash,
        predictionHash,
        domain,
        reductionHash,
        iou,
        buckets,
        filters,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Prediction Scatter
   * @param {string} projectHash
   * @param {string} predictionHash
   * @param {PredictionDomain} domain
   * @param {number} iou
   * @param {string} xMetric
   * @param {string} yMetric
   * @param {AnalysisBuckets} [buckets]
   * @param {string} [filters] Search Filters
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PredictionApi
   */
  public routePredictionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainScatterGet(
    projectHash: string,
    predictionHash: string,
    domain: PredictionDomain,
    iou: number,
    xMetric: string,
    yMetric: string,
    buckets?: AnalysisBuckets,
    filters?: string,
    options?: AxiosRequestConfig
  ) {
    return PredictionApiFp(this.configuration)
      .routePredictionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainScatterGet(
        projectHash,
        predictionHash,
        domain,
        iou,
        xMetric,
        yMetric,
        buckets,
        filters,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Prediction Scatter
   * @param {string} projectHash
   * @param {string} predictionHash
   * @param {PredictionDomain} domain
   * @param {number} iou
   * @param {string} xMetric
   * @param {string} yMetric
   * @param {AnalysisBuckets} [buckets]
   * @param {string} [filters] Search Filters
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PredictionApi
   */
  public routePredictionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainScatterGet_3(
    projectHash: string,
    predictionHash: string,
    domain: PredictionDomain,
    iou: number,
    xMetric: string,
    yMetric: string,
    buckets?: AnalysisBuckets,
    filters?: string,
    options?: AxiosRequestConfig
  ) {
    return PredictionApiFp(this.configuration)
      .routePredictionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainScatterGet_3(
        projectHash,
        predictionHash,
        domain,
        iou,
        xMetric,
        yMetric,
        buckets,
        filters,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Prediction Search
   * @param {string} projectHash
   * @param {string} predictionHash
   * @param {PredictionDomain} domain
   * @param {number} iou
   * @param {boolean} desc
   * @param {string} [filters] Search Filters
   * @param {string} [orderBy]
   * @param {number} [offset]
   * @param {number} [limit]
   * @param {string} [text]
   * @param {File} [image]
   * @param {string} [item]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PredictionApi
   */
  public routePredictionSearchApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainSearchPost(
    projectHash: string,
    predictionHash: string,
    domain: PredictionDomain,
    iou: number,
    desc: boolean,
    filters?: string,
    orderBy?: string,
    offset?: number,
    limit?: number,
    text?: string,
    image?: File,
    item?: string,
    options?: AxiosRequestConfig
  ) {
    return PredictionApiFp(this.configuration)
      .routePredictionSearchApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainSearchPost(
        projectHash,
        predictionHash,
        domain,
        iou,
        desc,
        filters,
        orderBy,
        offset,
        limit,
        text,
        image,
        item,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Prediction Search
   * @param {string} projectHash
   * @param {string} predictionHash
   * @param {PredictionDomain} domain
   * @param {number} iou
   * @param {boolean} desc
   * @param {string} [filters] Search Filters
   * @param {string} [orderBy]
   * @param {number} [offset]
   * @param {number} [limit]
   * @param {string} [text]
   * @param {File} [image]
   * @param {string} [item]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PredictionApi
   */
  public routePredictionSearchApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainSearchPost_4(
    projectHash: string,
    predictionHash: string,
    domain: PredictionDomain,
    iou: number,
    desc: boolean,
    filters?: string,
    orderBy?: string,
    offset?: number,
    limit?: number,
    text?: string,
    image?: File,
    item?: string,
    options?: AxiosRequestConfig
  ) {
    return PredictionApiFp(this.configuration)
      .routePredictionSearchApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainSearchPost_4(
        projectHash,
        predictionHash,
        domain,
        iou,
        desc,
        filters,
        orderBy,
        offset,
        limit,
        text,
        image,
        item,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Prediction Summary
   * @param {string} predictionHash
   * @param {string} projectHash
   * @param {number} iou
   * @param {string} [filters] Search Filters
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PredictionApi
   */
  public routePredictionSummaryApiProjectsV2ProjectHashPredictionsPredictionHashSummaryGet(
    predictionHash: string,
    projectHash: string,
    iou: number,
    filters?: string,
    options?: AxiosRequestConfig
  ) {
    return PredictionApiFp(this.configuration)
      .routePredictionSummaryApiProjectsV2ProjectHashPredictionsPredictionHashSummaryGet(
        predictionHash,
        projectHash,
        iou,
        filters,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Tag Items
   * @param {string} projectHash
   * @param {Array<ItemTags>} itemTags
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PredictionApi
   */
  public routeTagItemsApiProjectsV2ProjectHashTagsTagItemsPut(
    projectHash: string,
    itemTags: Array<ItemTags>,
    options?: AxiosRequestConfig
  ) {
    return PredictionApiFp(this.configuration)
      .routeTagItemsApiProjectsV2ProjectHashTagsTagItemsPut(
        projectHash,
        itemTags,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Tagged Items
   * @param {string} projectHash
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PredictionApi
   */
  public routeTaggedItemsApiProjectsV2ProjectHashTagsTaggedItemsGet(
    projectHash: string,
    options?: AxiosRequestConfig
  ) {
    return PredictionApiFp(this.configuration)
      .routeTaggedItemsApiProjectsV2ProjectHashTagsTaggedItemsGet(
        projectHash,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ProjectApi - axios parameter creator
 * @export
 */
export const ProjectApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Route Action Create Project Subset
     * @param {string} projectHash
     * @param {CreateProjectSubsetPostAction} createProjectSubsetPostAction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeActionCreateProjectSubsetApiProjectsV2ProjectHashActionsCreateProjectSubsetPost:
      async (
        projectHash: string,
        createProjectSubsetPostAction: CreateProjectSubsetPostAction,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "routeActionCreateProjectSubsetApiProjectsV2ProjectHashActionsCreateProjectSubsetPost",
          "projectHash",
          projectHash
        );
        // verify required parameter 'createProjectSubsetPostAction' is not null or undefined
        assertParamExists(
          "routeActionCreateProjectSubsetApiProjectsV2ProjectHashActionsCreateProjectSubsetPost",
          "createProjectSubsetPostAction",
          createProjectSubsetPostAction
        );
        const localVarPath =
          `/api/projects_v2/{project_hash}/actions/create_project_subset`.replace(
            `{${"project_hash"}}`,
            encodeURIComponent(String(projectHash))
          );
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "POST",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication OAuth2PasswordBearer required
        // oauth required
        await setOAuthToObject(
          localVarHeaderParameter,
          "OAuth2PasswordBearer",
          [],
          configuration
        );

        localVarHeaderParameter["Content-Type"] = "application/json";

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };
        localVarRequestOptions.data = serializeDataIfNeeded(
          createProjectSubsetPostAction,
          localVarRequestOptions,
          configuration
        );

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Route Action Create Project Subset
     * @param {string} projectHash
     * @param {CreateProjectSubsetPostAction} createProjectSubsetPostAction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeActionCreateProjectSubsetApiProjectsV2ProjectHashActionsCreateProjectSubsetPost_1:
      async (
        projectHash: string,
        createProjectSubsetPostAction: CreateProjectSubsetPostAction,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "routeActionCreateProjectSubsetApiProjectsV2ProjectHashActionsCreateProjectSubsetPost_1",
          "projectHash",
          projectHash
        );
        // verify required parameter 'createProjectSubsetPostAction' is not null or undefined
        assertParamExists(
          "routeActionCreateProjectSubsetApiProjectsV2ProjectHashActionsCreateProjectSubsetPost_1",
          "createProjectSubsetPostAction",
          createProjectSubsetPostAction
        );
        const localVarPath =
          `/api/projects_v2/{project_hash}/actions/create_project_subset`.replace(
            `{${"project_hash"}}`,
            encodeURIComponent(String(projectHash))
          );
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "POST",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication OAuth2PasswordBearer required
        // oauth required
        await setOAuthToObject(
          localVarHeaderParameter,
          "OAuth2PasswordBearer",
          [],
          configuration
        );

        localVarHeaderParameter["Content-Type"] = "application/json";

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };
        localVarRequestOptions.data = serializeDataIfNeeded(
          createProjectSubsetPostAction,
          localVarRequestOptions,
          configuration
        );

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Route Action Upload Project To Encord
     * @param {string} projectHash
     * @param {UploadProjectToEncordPostAction} uploadProjectToEncordPostAction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeActionUploadProjectToEncordApiProjectsV2ProjectHashActionsUploadToEncordPost:
      async (
        projectHash: string,
        uploadProjectToEncordPostAction: UploadProjectToEncordPostAction,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "routeActionUploadProjectToEncordApiProjectsV2ProjectHashActionsUploadToEncordPost",
          "projectHash",
          projectHash
        );
        // verify required parameter 'uploadProjectToEncordPostAction' is not null or undefined
        assertParamExists(
          "routeActionUploadProjectToEncordApiProjectsV2ProjectHashActionsUploadToEncordPost",
          "uploadProjectToEncordPostAction",
          uploadProjectToEncordPostAction
        );
        const localVarPath =
          `/api/projects_v2/{project_hash}/actions/upload_to_encord`.replace(
            `{${"project_hash"}}`,
            encodeURIComponent(String(projectHash))
          );
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "POST",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication OAuth2PasswordBearer required
        // oauth required
        await setOAuthToObject(
          localVarHeaderParameter,
          "OAuth2PasswordBearer",
          [],
          configuration
        );

        localVarHeaderParameter["Content-Type"] = "application/json";

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };
        localVarRequestOptions.data = serializeDataIfNeeded(
          uploadProjectToEncordPostAction,
          localVarRequestOptions,
          configuration
        );

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Route Action Upload Project To Encord
     * @param {string} projectHash
     * @param {UploadProjectToEncordPostAction} uploadProjectToEncordPostAction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeActionUploadProjectToEncordApiProjectsV2ProjectHashActionsUploadToEncordPost_2:
      async (
        projectHash: string,
        uploadProjectToEncordPostAction: UploadProjectToEncordPostAction,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "routeActionUploadProjectToEncordApiProjectsV2ProjectHashActionsUploadToEncordPost_2",
          "projectHash",
          projectHash
        );
        // verify required parameter 'uploadProjectToEncordPostAction' is not null or undefined
        assertParamExists(
          "routeActionUploadProjectToEncordApiProjectsV2ProjectHashActionsUploadToEncordPost_2",
          "uploadProjectToEncordPostAction",
          uploadProjectToEncordPostAction
        );
        const localVarPath =
          `/api/projects_v2/{project_hash}/actions/upload_to_encord`.replace(
            `{${"project_hash"}}`,
            encodeURIComponent(String(projectHash))
          );
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "POST",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication OAuth2PasswordBearer required
        // oauth required
        await setOAuthToObject(
          localVarHeaderParameter,
          "OAuth2PasswordBearer",
          [],
          configuration
        );

        localVarHeaderParameter["Content-Type"] = "application/json";

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };
        localVarRequestOptions.data = serializeDataIfNeeded(
          uploadProjectToEncordPostAction,
          localVarRequestOptions,
          configuration
        );

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Route List Projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeListProjectsApiProjectsV2Get: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/projects_v2`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2PasswordBearer",
        [],
        configuration
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route List Tags
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeListTagsApiProjectsV2ProjectHashTagsGet: async (
      projectHash: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectHash' is not null or undefined
      assertParamExists(
        "routeListTagsApiProjectsV2ProjectHashTagsGet",
        "projectHash",
        projectHash
      );
      const localVarPath = `/api/projects_v2/{project_hash}/tags/`.replace(
        `{${"project_hash"}}`,
        encodeURIComponent(String(projectHash))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2PasswordBearer",
        [],
        configuration
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route List Tags
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeListTagsApiProjectsV2ProjectHashTagsGet_3: async (
      projectHash: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectHash' is not null or undefined
      assertParamExists(
        "routeListTagsApiProjectsV2ProjectHashTagsGet_3",
        "projectHash",
        projectHash
      );
      const localVarPath = `/api/projects_v2/{project_hash}/tags/`.replace(
        `{${"project_hash"}}`,
        encodeURIComponent(String(projectHash))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2PasswordBearer",
        [],
        configuration
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Prediction Data Item
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {string} dataItem
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routePredictionDataItemApiProjectsV2ProjectHashPredictionsPredictionHashPreviewDataItemGet:
      async (
        projectHash: string,
        predictionHash: string,
        dataItem: string,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "routePredictionDataItemApiProjectsV2ProjectHashPredictionsPredictionHashPreviewDataItemGet",
          "projectHash",
          projectHash
        );
        // verify required parameter 'predictionHash' is not null or undefined
        assertParamExists(
          "routePredictionDataItemApiProjectsV2ProjectHashPredictionsPredictionHashPreviewDataItemGet",
          "predictionHash",
          predictionHash
        );
        // verify required parameter 'dataItem' is not null or undefined
        assertParamExists(
          "routePredictionDataItemApiProjectsV2ProjectHashPredictionsPredictionHashPreviewDataItemGet",
          "dataItem",
          dataItem
        );
        const localVarPath =
          `/api/projects_v2/{project_hash}/predictions/{prediction_hash}/preview/{data_item}`
            .replace(
              `{${"project_hash"}}`,
              encodeURIComponent(String(projectHash))
            )
            .replace(
              `{${"prediction_hash"}}`,
              encodeURIComponent(String(predictionHash))
            )
            .replace(`{${"data_item"}}`, encodeURIComponent(String(dataItem)));
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "GET",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication OAuth2PasswordBearer required
        // oauth required
        await setOAuthToObject(
          localVarHeaderParameter,
          "OAuth2PasswordBearer",
          [],
          configuration
        );

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Route Prediction Distribution
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {PredictionDomain} domain
     * @param {number} iou
     * @param {string} group
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routePredictionDistributionApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainDistributionGet:
      async (
        projectHash: string,
        predictionHash: string,
        domain: PredictionDomain,
        iou: number,
        group: string,
        buckets?: AnalysisBuckets,
        filters?: string,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "routePredictionDistributionApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainDistributionGet",
          "projectHash",
          projectHash
        );
        // verify required parameter 'predictionHash' is not null or undefined
        assertParamExists(
          "routePredictionDistributionApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainDistributionGet",
          "predictionHash",
          predictionHash
        );
        // verify required parameter 'domain' is not null or undefined
        assertParamExists(
          "routePredictionDistributionApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainDistributionGet",
          "domain",
          domain
        );
        // verify required parameter 'iou' is not null or undefined
        assertParamExists(
          "routePredictionDistributionApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainDistributionGet",
          "iou",
          iou
        );
        // verify required parameter 'group' is not null or undefined
        assertParamExists(
          "routePredictionDistributionApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainDistributionGet",
          "group",
          group
        );
        const localVarPath =
          `/api/projects_v2/{project_hash}/predictions/{prediction_hash}/analytics/{domain}/distribution`
            .replace(
              `{${"project_hash"}}`,
              encodeURIComponent(String(projectHash))
            )
            .replace(
              `{${"prediction_hash"}}`,
              encodeURIComponent(String(predictionHash))
            )
            .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "GET",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication OAuth2PasswordBearer required
        // oauth required
        await setOAuthToObject(
          localVarHeaderParameter,
          "OAuth2PasswordBearer",
          [],
          configuration
        );

        if (iou !== undefined) {
          localVarQueryParameter["iou"] = iou;
        }

        if (group !== undefined) {
          localVarQueryParameter["group"] = group;
        }

        if (buckets !== undefined) {
          localVarQueryParameter["buckets"] = buckets;
        }

        if (filters !== undefined) {
          localVarQueryParameter["filters"] = filters;
        }

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Route Prediction Metric Performance
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {number} iou
     * @param {string} metricName
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routePredictionMetricPerformanceApiProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGet:
      async (
        projectHash: string,
        predictionHash: string,
        iou: number,
        metricName: string,
        buckets?: AnalysisBuckets,
        filters?: string,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "routePredictionMetricPerformanceApiProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGet",
          "projectHash",
          projectHash
        );
        // verify required parameter 'predictionHash' is not null or undefined
        assertParamExists(
          "routePredictionMetricPerformanceApiProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGet",
          "predictionHash",
          predictionHash
        );
        // verify required parameter 'iou' is not null or undefined
        assertParamExists(
          "routePredictionMetricPerformanceApiProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGet",
          "iou",
          iou
        );
        // verify required parameter 'metricName' is not null or undefined
        assertParamExists(
          "routePredictionMetricPerformanceApiProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGet",
          "metricName",
          metricName
        );
        const localVarPath =
          `/api/projects_v2/{project_hash}/predictions/{prediction_hash}/metric_performance`
            .replace(
              `{${"project_hash"}}`,
              encodeURIComponent(String(projectHash))
            )
            .replace(
              `{${"prediction_hash"}}`,
              encodeURIComponent(String(predictionHash))
            );
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "GET",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication OAuth2PasswordBearer required
        // oauth required
        await setOAuthToObject(
          localVarHeaderParameter,
          "OAuth2PasswordBearer",
          [],
          configuration
        );

        if (iou !== undefined) {
          localVarQueryParameter["iou"] = iou;
        }

        if (metricName !== undefined) {
          localVarQueryParameter["metric_name"] = metricName;
        }

        if (buckets !== undefined) {
          localVarQueryParameter["buckets"] = buckets;
        }

        if (filters !== undefined) {
          localVarQueryParameter["filters"] = filters;
        }

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Route Prediction Reduction Scatter
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {PredictionDomain} domain
     * @param {string} reductionHash
     * @param {number} iou
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routePredictionReductionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainReductionsReductionHashSummaryGet:
      async (
        projectHash: string,
        predictionHash: string,
        domain: PredictionDomain,
        reductionHash: string,
        iou: number,
        buckets?: AnalysisBuckets,
        filters?: string,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "routePredictionReductionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainReductionsReductionHashSummaryGet",
          "projectHash",
          projectHash
        );
        // verify required parameter 'predictionHash' is not null or undefined
        assertParamExists(
          "routePredictionReductionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainReductionsReductionHashSummaryGet",
          "predictionHash",
          predictionHash
        );
        // verify required parameter 'domain' is not null or undefined
        assertParamExists(
          "routePredictionReductionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainReductionsReductionHashSummaryGet",
          "domain",
          domain
        );
        // verify required parameter 'reductionHash' is not null or undefined
        assertParamExists(
          "routePredictionReductionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainReductionsReductionHashSummaryGet",
          "reductionHash",
          reductionHash
        );
        // verify required parameter 'iou' is not null or undefined
        assertParamExists(
          "routePredictionReductionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainReductionsReductionHashSummaryGet",
          "iou",
          iou
        );
        const localVarPath =
          `/api/projects_v2/{project_hash}/predictions/{prediction_hash}/analytics/{domain}/reductions/{reduction_hash}/summary`
            .replace(
              `{${"project_hash"}}`,
              encodeURIComponent(String(projectHash))
            )
            .replace(
              `{${"prediction_hash"}}`,
              encodeURIComponent(String(predictionHash))
            )
            .replace(`{${"domain"}}`, encodeURIComponent(String(domain)))
            .replace(
              `{${"reduction_hash"}}`,
              encodeURIComponent(String(reductionHash))
            );
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "GET",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication OAuth2PasswordBearer required
        // oauth required
        await setOAuthToObject(
          localVarHeaderParameter,
          "OAuth2PasswordBearer",
          [],
          configuration
        );

        if (iou !== undefined) {
          localVarQueryParameter["iou"] = iou;
        }

        if (buckets !== undefined) {
          localVarQueryParameter["buckets"] = buckets;
        }

        if (filters !== undefined) {
          localVarQueryParameter["filters"] = filters;
        }

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Route Prediction Scatter
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {PredictionDomain} domain
     * @param {number} iou
     * @param {string} xMetric
     * @param {string} yMetric
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routePredictionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainScatterGet:
      async (
        projectHash: string,
        predictionHash: string,
        domain: PredictionDomain,
        iou: number,
        xMetric: string,
        yMetric: string,
        buckets?: AnalysisBuckets,
        filters?: string,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "routePredictionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainScatterGet",
          "projectHash",
          projectHash
        );
        // verify required parameter 'predictionHash' is not null or undefined
        assertParamExists(
          "routePredictionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainScatterGet",
          "predictionHash",
          predictionHash
        );
        // verify required parameter 'domain' is not null or undefined
        assertParamExists(
          "routePredictionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainScatterGet",
          "domain",
          domain
        );
        // verify required parameter 'iou' is not null or undefined
        assertParamExists(
          "routePredictionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainScatterGet",
          "iou",
          iou
        );
        // verify required parameter 'xMetric' is not null or undefined
        assertParamExists(
          "routePredictionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainScatterGet",
          "xMetric",
          xMetric
        );
        // verify required parameter 'yMetric' is not null or undefined
        assertParamExists(
          "routePredictionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainScatterGet",
          "yMetric",
          yMetric
        );
        const localVarPath =
          `/api/projects_v2/{project_hash}/predictions/{prediction_hash}/analytics/{domain}/scatter`
            .replace(
              `{${"project_hash"}}`,
              encodeURIComponent(String(projectHash))
            )
            .replace(
              `{${"prediction_hash"}}`,
              encodeURIComponent(String(predictionHash))
            )
            .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "GET",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication OAuth2PasswordBearer required
        // oauth required
        await setOAuthToObject(
          localVarHeaderParameter,
          "OAuth2PasswordBearer",
          [],
          configuration
        );

        if (iou !== undefined) {
          localVarQueryParameter["iou"] = iou;
        }

        if (xMetric !== undefined) {
          localVarQueryParameter["x_metric"] = xMetric;
        }

        if (yMetric !== undefined) {
          localVarQueryParameter["y_metric"] = yMetric;
        }

        if (buckets !== undefined) {
          localVarQueryParameter["buckets"] = buckets;
        }

        if (filters !== undefined) {
          localVarQueryParameter["filters"] = filters;
        }

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Route Prediction Search
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {PredictionDomain} domain
     * @param {number} iou
     * @param {boolean} desc
     * @param {string} [filters] Search Filters
     * @param {string} [orderBy]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {string} [text]
     * @param {File} [image]
     * @param {string} [item]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routePredictionSearchApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainSearchPost:
      async (
        projectHash: string,
        predictionHash: string,
        domain: PredictionDomain,
        iou: number,
        desc: boolean,
        filters?: string,
        orderBy?: string,
        offset?: number,
        limit?: number,
        text?: string,
        image?: File,
        item?: string,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "routePredictionSearchApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainSearchPost",
          "projectHash",
          projectHash
        );
        // verify required parameter 'predictionHash' is not null or undefined
        assertParamExists(
          "routePredictionSearchApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainSearchPost",
          "predictionHash",
          predictionHash
        );
        // verify required parameter 'domain' is not null or undefined
        assertParamExists(
          "routePredictionSearchApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainSearchPost",
          "domain",
          domain
        );
        // verify required parameter 'iou' is not null or undefined
        assertParamExists(
          "routePredictionSearchApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainSearchPost",
          "iou",
          iou
        );
        // verify required parameter 'desc' is not null or undefined
        assertParamExists(
          "routePredictionSearchApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainSearchPost",
          "desc",
          desc
        );
        const localVarPath =
          `/api/projects_v2/{project_hash}/predictions/{prediction_hash}/analytics/{domain}/search`
            .replace(
              `{${"project_hash"}}`,
              encodeURIComponent(String(projectHash))
            )
            .replace(
              `{${"prediction_hash"}}`,
              encodeURIComponent(String(predictionHash))
            )
            .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "POST",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;
        const localVarFormParams = new ((configuration &&
          configuration.formDataCtor) ||
          FormData)();

        // authentication OAuth2PasswordBearer required
        // oauth required
        await setOAuthToObject(
          localVarHeaderParameter,
          "OAuth2PasswordBearer",
          [],
          configuration
        );

        if (filters !== undefined) {
          localVarQueryParameter["filters"] = filters;
        }

        if (iou !== undefined) {
          localVarFormParams.append("iou", iou as any);
        }

        if (orderBy !== undefined) {
          localVarFormParams.append("order_by", orderBy as any);
        }

        if (desc !== undefined) {
          localVarFormParams.append("desc", desc as any);
        }

        if (offset !== undefined) {
          localVarFormParams.append("offset", offset as any);
        }

        if (limit !== undefined) {
          localVarFormParams.append("limit", limit as any);
        }

        if (text !== undefined) {
          localVarFormParams.append("text", text as any);
        }

        if (image !== undefined) {
          localVarFormParams.append("image", image as any);
        }

        if (item !== undefined) {
          localVarFormParams.append("item", item as any);
        }

        localVarHeaderParameter["Content-Type"] = "multipart/form-data";

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };
        localVarRequestOptions.data = localVarFormParams;

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Route Prediction Summary
     * @param {string} predictionHash
     * @param {string} projectHash
     * @param {number} iou
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routePredictionSummaryApiProjectsV2ProjectHashPredictionsPredictionHashSummaryGet:
      async (
        predictionHash: string,
        projectHash: string,
        iou: number,
        filters?: string,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'predictionHash' is not null or undefined
        assertParamExists(
          "routePredictionSummaryApiProjectsV2ProjectHashPredictionsPredictionHashSummaryGet",
          "predictionHash",
          predictionHash
        );
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "routePredictionSummaryApiProjectsV2ProjectHashPredictionsPredictionHashSummaryGet",
          "projectHash",
          projectHash
        );
        // verify required parameter 'iou' is not null or undefined
        assertParamExists(
          "routePredictionSummaryApiProjectsV2ProjectHashPredictionsPredictionHashSummaryGet",
          "iou",
          iou
        );
        const localVarPath =
          `/api/projects_v2/{project_hash}/predictions/{prediction_hash}/summary`
            .replace(
              `{${"prediction_hash"}}`,
              encodeURIComponent(String(predictionHash))
            )
            .replace(
              `{${"project_hash"}}`,
              encodeURIComponent(String(projectHash))
            );
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "GET",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication OAuth2PasswordBearer required
        // oauth required
        await setOAuthToObject(
          localVarHeaderParameter,
          "OAuth2PasswordBearer",
          [],
          configuration
        );

        if (iou !== undefined) {
          localVarQueryParameter["iou"] = iou;
        }

        if (filters !== undefined) {
          localVarQueryParameter["filters"] = filters;
        }

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Route Project Action Tag Items
     * @param {string} projectHash
     * @param {string} tagName
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectActionTagItemsApiProjectsV2ProjectHashCreateTagPost: async (
      projectHash: string,
      tagName: string,
      requestBody: Array<string>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectHash' is not null or undefined
      assertParamExists(
        "routeProjectActionTagItemsApiProjectsV2ProjectHashCreateTagPost",
        "projectHash",
        projectHash
      );
      // verify required parameter 'tagName' is not null or undefined
      assertParamExists(
        "routeProjectActionTagItemsApiProjectsV2ProjectHashCreateTagPost",
        "tagName",
        tagName
      );
      // verify required parameter 'requestBody' is not null or undefined
      assertParamExists(
        "routeProjectActionTagItemsApiProjectsV2ProjectHashCreateTagPost",
        "requestBody",
        requestBody
      );
      const localVarPath = `/api/projects_v2/{project_hash}/create/tag`.replace(
        `{${"project_hash"}}`,
        encodeURIComponent(String(projectHash))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2PasswordBearer",
        [],
        configuration
      );

      if (tagName !== undefined) {
        localVarQueryParameter["tag_name"] = tagName;
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Project Compare Metric Dissimilarity
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} compareProjectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectCompareMetricDissimilarityApiProjectsV2ProjectHashAnalysisDomainProjectCompareMetricDissimilarityGet:
      async (
        projectHash: string,
        domain: AnalysisDomain,
        compareProjectHash: string,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "routeProjectCompareMetricDissimilarityApiProjectsV2ProjectHashAnalysisDomainProjectCompareMetricDissimilarityGet",
          "projectHash",
          projectHash
        );
        // verify required parameter 'domain' is not null or undefined
        assertParamExists(
          "routeProjectCompareMetricDissimilarityApiProjectsV2ProjectHashAnalysisDomainProjectCompareMetricDissimilarityGet",
          "domain",
          domain
        );
        // verify required parameter 'compareProjectHash' is not null or undefined
        assertParamExists(
          "routeProjectCompareMetricDissimilarityApiProjectsV2ProjectHashAnalysisDomainProjectCompareMetricDissimilarityGet",
          "compareProjectHash",
          compareProjectHash
        );
        const localVarPath =
          `/api/projects_v2/{project_hash}/analysis/{domain}/project_compare/metric_dissimilarity`
            .replace(
              `{${"project_hash"}}`,
              encodeURIComponent(String(projectHash))
            )
            .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "GET",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication OAuth2PasswordBearer required
        // oauth required
        await setOAuthToObject(
          localVarHeaderParameter,
          "OAuth2PasswordBearer",
          [],
          configuration
        );

        if (compareProjectHash !== undefined) {
          localVarQueryParameter["compare_project_hash"] = compareProjectHash;
        }

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Route Project Compare Metric Dissimilarity
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} compareProjectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectCompareMetricDissimilarityApiProjectsV2ProjectHashAnalysisDomainProjectCompareMetricDissimilarityGet_4:
      async (
        projectHash: string,
        domain: AnalysisDomain,
        compareProjectHash: string,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "routeProjectCompareMetricDissimilarityApiProjectsV2ProjectHashAnalysisDomainProjectCompareMetricDissimilarityGet_4",
          "projectHash",
          projectHash
        );
        // verify required parameter 'domain' is not null or undefined
        assertParamExists(
          "routeProjectCompareMetricDissimilarityApiProjectsV2ProjectHashAnalysisDomainProjectCompareMetricDissimilarityGet_4",
          "domain",
          domain
        );
        // verify required parameter 'compareProjectHash' is not null or undefined
        assertParamExists(
          "routeProjectCompareMetricDissimilarityApiProjectsV2ProjectHashAnalysisDomainProjectCompareMetricDissimilarityGet_4",
          "compareProjectHash",
          compareProjectHash
        );
        const localVarPath =
          `/api/projects_v2/{project_hash}/analysis/{domain}/project_compare/metric_dissimilarity`
            .replace(
              `{${"project_hash"}}`,
              encodeURIComponent(String(projectHash))
            )
            .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "GET",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication OAuth2PasswordBearer required
        // oauth required
        await setOAuthToObject(
          localVarHeaderParameter,
          "OAuth2PasswordBearer",
          [],
          configuration
        );

        if (compareProjectHash !== undefined) {
          localVarQueryParameter["compare_project_hash"] = compareProjectHash;
        }

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Route Project Data Item
     * @param {string} projectHash
     * @param {string} dataItem
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectDataItemApiProjectsV2ProjectHashItemDataItemGet: async (
      projectHash: string,
      dataItem: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectHash' is not null or undefined
      assertParamExists(
        "routeProjectDataItemApiProjectsV2ProjectHashItemDataItemGet",
        "projectHash",
        projectHash
      );
      // verify required parameter 'dataItem' is not null or undefined
      assertParamExists(
        "routeProjectDataItemApiProjectsV2ProjectHashItemDataItemGet",
        "dataItem",
        dataItem
      );
      const localVarPath = `/api/projects_v2/{project_hash}/item/{data_item}/`
        .replace(`{${"project_hash"}}`, encodeURIComponent(String(projectHash)))
        .replace(`{${"data_item"}}`, encodeURIComponent(String(dataItem)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2PasswordBearer",
        [],
        configuration
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Project Distribution
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} group
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectDistributionApiProjectsV2ProjectHashAnalysisDomainDistributionGet:
      async (
        projectHash: string,
        domain: AnalysisDomain,
        group: string,
        buckets?: AnalysisBuckets,
        filters?: string,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "routeProjectDistributionApiProjectsV2ProjectHashAnalysisDomainDistributionGet",
          "projectHash",
          projectHash
        );
        // verify required parameter 'domain' is not null or undefined
        assertParamExists(
          "routeProjectDistributionApiProjectsV2ProjectHashAnalysisDomainDistributionGet",
          "domain",
          domain
        );
        // verify required parameter 'group' is not null or undefined
        assertParamExists(
          "routeProjectDistributionApiProjectsV2ProjectHashAnalysisDomainDistributionGet",
          "group",
          group
        );
        const localVarPath =
          `/api/projects_v2/{project_hash}/analysis/{domain}/distribution`
            .replace(
              `{${"project_hash"}}`,
              encodeURIComponent(String(projectHash))
            )
            .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "GET",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication OAuth2PasswordBearer required
        // oauth required
        await setOAuthToObject(
          localVarHeaderParameter,
          "OAuth2PasswordBearer",
          [],
          configuration
        );

        if (group !== undefined) {
          localVarQueryParameter["group"] = group;
        }

        if (buckets !== undefined) {
          localVarQueryParameter["buckets"] = buckets;
        }

        if (filters !== undefined) {
          localVarQueryParameter["filters"] = filters;
        }

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Route Project Distribution
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} group
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectDistributionApiProjectsV2ProjectHashAnalysisDomainDistributionGet_5:
      async (
        projectHash: string,
        domain: AnalysisDomain,
        group: string,
        buckets?: AnalysisBuckets,
        filters?: string,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "routeProjectDistributionApiProjectsV2ProjectHashAnalysisDomainDistributionGet_5",
          "projectHash",
          projectHash
        );
        // verify required parameter 'domain' is not null or undefined
        assertParamExists(
          "routeProjectDistributionApiProjectsV2ProjectHashAnalysisDomainDistributionGet_5",
          "domain",
          domain
        );
        // verify required parameter 'group' is not null or undefined
        assertParamExists(
          "routeProjectDistributionApiProjectsV2ProjectHashAnalysisDomainDistributionGet_5",
          "group",
          group
        );
        const localVarPath =
          `/api/projects_v2/{project_hash}/analysis/{domain}/distribution`
            .replace(
              `{${"project_hash"}}`,
              encodeURIComponent(String(projectHash))
            )
            .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "GET",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication OAuth2PasswordBearer required
        // oauth required
        await setOAuthToObject(
          localVarHeaderParameter,
          "OAuth2PasswordBearer",
          [],
          configuration
        );

        if (group !== undefined) {
          localVarQueryParameter["group"] = group;
        }

        if (buckets !== undefined) {
          localVarQueryParameter["buckets"] = buckets;
        }

        if (filters !== undefined) {
          localVarQueryParameter["filters"] = filters;
        }

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Route Project List Collaborators
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectListCollaboratorsApiProjectsV2ProjectHashCollaboratorsGet:
      async (
        projectHash: string,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "routeProjectListCollaboratorsApiProjectsV2ProjectHashCollaboratorsGet",
          "projectHash",
          projectHash
        );
        const localVarPath =
          `/api/projects_v2/{project_hash}/collaborators`.replace(
            `{${"project_hash"}}`,
            encodeURIComponent(String(projectHash))
          );
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "GET",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication OAuth2PasswordBearer required
        // oauth required
        await setOAuthToObject(
          localVarHeaderParameter,
          "OAuth2PasswordBearer",
          [],
          configuration
        );

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Route Project List Predictions
     * @param {string} projectHash
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {RouteProjectListPredictionsApiProjectsV2ProjectHashPredictionsGetOrderByEnum} [orderBy]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectListPredictionsApiProjectsV2ProjectHashPredictionsGet: async (
      projectHash: string,
      offset?: number,
      limit?: number,
      orderBy?: RouteProjectListPredictionsApiProjectsV2ProjectHashPredictionsGetOrderByEnum,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectHash' is not null or undefined
      assertParamExists(
        "routeProjectListPredictionsApiProjectsV2ProjectHashPredictionsGet",
        "projectHash",
        projectHash
      );
      const localVarPath =
        `/api/projects_v2/{project_hash}/predictions`.replace(
          `{${"project_hash"}}`,
          encodeURIComponent(String(projectHash))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2PasswordBearer",
        [],
        configuration
      );

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (orderBy !== undefined) {
        localVarQueryParameter["order_by"] = orderBy;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Project List Reductions
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectListReductionsApiProjectsV2ProjectHashReductionsGet: async (
      projectHash: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectHash' is not null or undefined
      assertParamExists(
        "routeProjectListReductionsApiProjectsV2ProjectHashReductionsGet",
        "projectHash",
        projectHash
      );
      const localVarPath = `/api/projects_v2/{project_hash}/reductions`.replace(
        `{${"project_hash"}}`,
        encodeURIComponent(String(projectHash))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2PasswordBearer",
        [],
        configuration
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Project Metadata
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectMetadataApiProjectsV2ProjectHashMetadataGet: async (
      projectHash: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectHash' is not null or undefined
      assertParamExists(
        "routeProjectMetadataApiProjectsV2ProjectHashMetadataGet",
        "projectHash",
        projectHash
      );
      const localVarPath = `/api/projects_v2/{project_hash}/metadata`.replace(
        `{${"project_hash"}}`,
        encodeURIComponent(String(projectHash))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2PasswordBearer",
        [],
        configuration
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Project Raw File
     * @param {string} projectHash
     * @param {string} duHash
     * @param {number} frame
     * @param {string} [ifNoneMatch]
     * @param {string} [ifModifiedSince]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectRawFileApiProjectsV2ProjectHashFilesDuHashFrameGet: async (
      projectHash: string,
      duHash: string,
      frame: number,
      ifNoneMatch?: string,
      ifModifiedSince?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectHash' is not null or undefined
      assertParamExists(
        "routeProjectRawFileApiProjectsV2ProjectHashFilesDuHashFrameGet",
        "projectHash",
        projectHash
      );
      // verify required parameter 'duHash' is not null or undefined
      assertParamExists(
        "routeProjectRawFileApiProjectsV2ProjectHashFilesDuHashFrameGet",
        "duHash",
        duHash
      );
      // verify required parameter 'frame' is not null or undefined
      assertParamExists(
        "routeProjectRawFileApiProjectsV2ProjectHashFilesDuHashFrameGet",
        "frame",
        frame
      );
      const localVarPath =
        `/api/projects_v2/{project_hash}/files/{du_hash}/{frame}`
          .replace(
            `{${"project_hash"}}`,
            encodeURIComponent(String(projectHash))
          )
          .replace(`{${"du_hash"}}`, encodeURIComponent(String(duHash)))
          .replace(`{${"frame"}}`, encodeURIComponent(String(frame)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2PasswordBearer",
        [],
        configuration
      );

      if (ifNoneMatch != null) {
        localVarHeaderParameter["if-none-match"] = String(ifNoneMatch);
      }

      if (ifModifiedSince != null) {
        localVarHeaderParameter["if-modified-since"] = String(ifModifiedSince);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Project Reduction Scatter
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} reductionHash
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectReductionScatterApiProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGet:
      async (
        projectHash: string,
        domain: AnalysisDomain,
        reductionHash: string,
        buckets?: AnalysisBuckets,
        filters?: string,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "routeProjectReductionScatterApiProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGet",
          "projectHash",
          projectHash
        );
        // verify required parameter 'domain' is not null or undefined
        assertParamExists(
          "routeProjectReductionScatterApiProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGet",
          "domain",
          domain
        );
        // verify required parameter 'reductionHash' is not null or undefined
        assertParamExists(
          "routeProjectReductionScatterApiProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGet",
          "reductionHash",
          reductionHash
        );
        const localVarPath =
          `/api/projects_v2/{project_hash}/analysis/{domain}/reductions/{reduction_hash}/summary`
            .replace(
              `{${"project_hash"}}`,
              encodeURIComponent(String(projectHash))
            )
            .replace(`{${"domain"}}`, encodeURIComponent(String(domain)))
            .replace(
              `{${"reduction_hash"}}`,
              encodeURIComponent(String(reductionHash))
            );
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "GET",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication OAuth2PasswordBearer required
        // oauth required
        await setOAuthToObject(
          localVarHeaderParameter,
          "OAuth2PasswordBearer",
          [],
          configuration
        );

        if (buckets !== undefined) {
          localVarQueryParameter["buckets"] = buckets;
        }

        if (filters !== undefined) {
          localVarQueryParameter["filters"] = filters;
        }

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Route Project Reduction Scatter
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} reductionHash
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectReductionScatterApiProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGet_6:
      async (
        projectHash: string,
        domain: AnalysisDomain,
        reductionHash: string,
        buckets?: AnalysisBuckets,
        filters?: string,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "routeProjectReductionScatterApiProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGet_6",
          "projectHash",
          projectHash
        );
        // verify required parameter 'domain' is not null or undefined
        assertParamExists(
          "routeProjectReductionScatterApiProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGet_6",
          "domain",
          domain
        );
        // verify required parameter 'reductionHash' is not null or undefined
        assertParamExists(
          "routeProjectReductionScatterApiProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGet_6",
          "reductionHash",
          reductionHash
        );
        const localVarPath =
          `/api/projects_v2/{project_hash}/analysis/{domain}/reductions/{reduction_hash}/summary`
            .replace(
              `{${"project_hash"}}`,
              encodeURIComponent(String(projectHash))
            )
            .replace(`{${"domain"}}`, encodeURIComponent(String(domain)))
            .replace(
              `{${"reduction_hash"}}`,
              encodeURIComponent(String(reductionHash))
            );
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "GET",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication OAuth2PasswordBearer required
        // oauth required
        await setOAuthToObject(
          localVarHeaderParameter,
          "OAuth2PasswordBearer",
          [],
          configuration
        );

        if (buckets !== undefined) {
          localVarQueryParameter["buckets"] = buckets;
        }

        if (filters !== undefined) {
          localVarQueryParameter["filters"] = filters;
        }

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Route Project Scatter
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} xMetric
     * @param {string} yMetric
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectScatterApiProjectsV2ProjectHashAnalysisDomainScatterGet: async (
      projectHash: string,
      domain: AnalysisDomain,
      xMetric: string,
      yMetric: string,
      buckets?: AnalysisBuckets,
      filters?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectHash' is not null or undefined
      assertParamExists(
        "routeProjectScatterApiProjectsV2ProjectHashAnalysisDomainScatterGet",
        "projectHash",
        projectHash
      );
      // verify required parameter 'domain' is not null or undefined
      assertParamExists(
        "routeProjectScatterApiProjectsV2ProjectHashAnalysisDomainScatterGet",
        "domain",
        domain
      );
      // verify required parameter 'xMetric' is not null or undefined
      assertParamExists(
        "routeProjectScatterApiProjectsV2ProjectHashAnalysisDomainScatterGet",
        "xMetric",
        xMetric
      );
      // verify required parameter 'yMetric' is not null or undefined
      assertParamExists(
        "routeProjectScatterApiProjectsV2ProjectHashAnalysisDomainScatterGet",
        "yMetric",
        yMetric
      );
      const localVarPath =
        `/api/projects_v2/{project_hash}/analysis/{domain}/scatter`
          .replace(
            `{${"project_hash"}}`,
            encodeURIComponent(String(projectHash))
          )
          .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2PasswordBearer",
        [],
        configuration
      );

      if (xMetric !== undefined) {
        localVarQueryParameter["x_metric"] = xMetric;
      }

      if (yMetric !== undefined) {
        localVarQueryParameter["y_metric"] = yMetric;
      }

      if (buckets !== undefined) {
        localVarQueryParameter["buckets"] = buckets;
      }

      if (filters !== undefined) {
        localVarQueryParameter["filters"] = filters;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Project Scatter
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} xMetric
     * @param {string} yMetric
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectScatterApiProjectsV2ProjectHashAnalysisDomainScatterGet_7:
      async (
        projectHash: string,
        domain: AnalysisDomain,
        xMetric: string,
        yMetric: string,
        buckets?: AnalysisBuckets,
        filters?: string,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "routeProjectScatterApiProjectsV2ProjectHashAnalysisDomainScatterGet_7",
          "projectHash",
          projectHash
        );
        // verify required parameter 'domain' is not null or undefined
        assertParamExists(
          "routeProjectScatterApiProjectsV2ProjectHashAnalysisDomainScatterGet_7",
          "domain",
          domain
        );
        // verify required parameter 'xMetric' is not null or undefined
        assertParamExists(
          "routeProjectScatterApiProjectsV2ProjectHashAnalysisDomainScatterGet_7",
          "xMetric",
          xMetric
        );
        // verify required parameter 'yMetric' is not null or undefined
        assertParamExists(
          "routeProjectScatterApiProjectsV2ProjectHashAnalysisDomainScatterGet_7",
          "yMetric",
          yMetric
        );
        const localVarPath =
          `/api/projects_v2/{project_hash}/analysis/{domain}/scatter`
            .replace(
              `{${"project_hash"}}`,
              encodeURIComponent(String(projectHash))
            )
            .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "GET",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication OAuth2PasswordBearer required
        // oauth required
        await setOAuthToObject(
          localVarHeaderParameter,
          "OAuth2PasswordBearer",
          [],
          configuration
        );

        if (xMetric !== undefined) {
          localVarQueryParameter["x_metric"] = xMetric;
        }

        if (yMetric !== undefined) {
          localVarQueryParameter["y_metric"] = yMetric;
        }

        if (buckets !== undefined) {
          localVarQueryParameter["buckets"] = buckets;
        }

        if (filters !== undefined) {
          localVarQueryParameter["filters"] = filters;
        }

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Route Project Search
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {boolean} desc
     * @param {string} [filters] Search Filters
     * @param {string} [orderBy]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {string} [text]
     * @param {File} [image]
     * @param {string} [item]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectSearchApiProjectsV2ProjectHashAnalysisDomainSearchPost: async (
      projectHash: string,
      domain: AnalysisDomain,
      desc: boolean,
      filters?: string,
      orderBy?: string,
      offset?: number,
      limit?: number,
      text?: string,
      image?: File,
      item?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectHash' is not null or undefined
      assertParamExists(
        "routeProjectSearchApiProjectsV2ProjectHashAnalysisDomainSearchPost",
        "projectHash",
        projectHash
      );
      // verify required parameter 'domain' is not null or undefined
      assertParamExists(
        "routeProjectSearchApiProjectsV2ProjectHashAnalysisDomainSearchPost",
        "domain",
        domain
      );
      // verify required parameter 'desc' is not null or undefined
      assertParamExists(
        "routeProjectSearchApiProjectsV2ProjectHashAnalysisDomainSearchPost",
        "desc",
        desc
      );
      const localVarPath =
        `/api/projects_v2/{project_hash}/analysis/{domain}/search`
          .replace(
            `{${"project_hash"}}`,
            encodeURIComponent(String(projectHash))
          )
          .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)();

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2PasswordBearer",
        [],
        configuration
      );

      if (filters !== undefined) {
        localVarQueryParameter["filters"] = filters;
      }

      if (orderBy !== undefined) {
        localVarFormParams.append("order_by", orderBy as any);
      }

      if (desc !== undefined) {
        localVarFormParams.append("desc", desc as any);
      }

      if (offset !== undefined) {
        localVarFormParams.append("offset", offset as any);
      }

      if (limit !== undefined) {
        localVarFormParams.append("limit", limit as any);
      }

      if (text !== undefined) {
        localVarFormParams.append("text", text as any);
      }

      if (image !== undefined) {
        localVarFormParams.append("image", image as any);
      }

      if (item !== undefined) {
        localVarFormParams.append("item", item as any);
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Project Search
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {boolean} desc
     * @param {string} [filters] Search Filters
     * @param {string} [orderBy]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {string} [text]
     * @param {File} [image]
     * @param {string} [item]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectSearchApiProjectsV2ProjectHashAnalysisDomainSearchPost_8:
      async (
        projectHash: string,
        domain: AnalysisDomain,
        desc: boolean,
        filters?: string,
        orderBy?: string,
        offset?: number,
        limit?: number,
        text?: string,
        image?: File,
        item?: string,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "routeProjectSearchApiProjectsV2ProjectHashAnalysisDomainSearchPost_8",
          "projectHash",
          projectHash
        );
        // verify required parameter 'domain' is not null or undefined
        assertParamExists(
          "routeProjectSearchApiProjectsV2ProjectHashAnalysisDomainSearchPost_8",
          "domain",
          domain
        );
        // verify required parameter 'desc' is not null or undefined
        assertParamExists(
          "routeProjectSearchApiProjectsV2ProjectHashAnalysisDomainSearchPost_8",
          "desc",
          desc
        );
        const localVarPath =
          `/api/projects_v2/{project_hash}/analysis/{domain}/search`
            .replace(
              `{${"project_hash"}}`,
              encodeURIComponent(String(projectHash))
            )
            .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "POST",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;
        const localVarFormParams = new ((configuration &&
          configuration.formDataCtor) ||
          FormData)();

        // authentication OAuth2PasswordBearer required
        // oauth required
        await setOAuthToObject(
          localVarHeaderParameter,
          "OAuth2PasswordBearer",
          [],
          configuration
        );

        if (filters !== undefined) {
          localVarQueryParameter["filters"] = filters;
        }

        if (orderBy !== undefined) {
          localVarFormParams.append("order_by", orderBy as any);
        }

        if (desc !== undefined) {
          localVarFormParams.append("desc", desc as any);
        }

        if (offset !== undefined) {
          localVarFormParams.append("offset", offset as any);
        }

        if (limit !== undefined) {
          localVarFormParams.append("limit", limit as any);
        }

        if (text !== undefined) {
          localVarFormParams.append("text", text as any);
        }

        if (image !== undefined) {
          localVarFormParams.append("image", image as any);
        }

        if (item !== undefined) {
          localVarFormParams.append("item", item as any);
        }

        localVarHeaderParameter["Content-Type"] = "multipart/form-data";

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };
        localVarRequestOptions.data = localVarFormParams;

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Route Project Summary
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectSummaryApiProjectsV2ProjectHashAnalysisDomainSummaryGet: async (
      projectHash: string,
      domain: AnalysisDomain,
      filters?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectHash' is not null or undefined
      assertParamExists(
        "routeProjectSummaryApiProjectsV2ProjectHashAnalysisDomainSummaryGet",
        "projectHash",
        projectHash
      );
      // verify required parameter 'domain' is not null or undefined
      assertParamExists(
        "routeProjectSummaryApiProjectsV2ProjectHashAnalysisDomainSummaryGet",
        "domain",
        domain
      );
      const localVarPath =
        `/api/projects_v2/{project_hash}/analysis/{domain}/summary`
          .replace(
            `{${"project_hash"}}`,
            encodeURIComponent(String(projectHash))
          )
          .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2PasswordBearer",
        [],
        configuration
      );

      if (filters !== undefined) {
        localVarQueryParameter["filters"] = filters;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Project Summary
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectSummaryApiProjectsV2ProjectHashAnalysisDomainSummaryGet_9:
      async (
        projectHash: string,
        domain: AnalysisDomain,
        filters?: string,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'projectHash' is not null or undefined
        assertParamExists(
          "routeProjectSummaryApiProjectsV2ProjectHashAnalysisDomainSummaryGet_9",
          "projectHash",
          projectHash
        );
        // verify required parameter 'domain' is not null or undefined
        assertParamExists(
          "routeProjectSummaryApiProjectsV2ProjectHashAnalysisDomainSummaryGet_9",
          "domain",
          domain
        );
        const localVarPath =
          `/api/projects_v2/{project_hash}/analysis/{domain}/summary`
            .replace(
              `{${"project_hash"}}`,
              encodeURIComponent(String(projectHash))
            )
            .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
          method: "GET",
          ...baseOptions,
          ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication OAuth2PasswordBearer required
        // oauth required
        await setOAuthToObject(
          localVarHeaderParameter,
          "OAuth2PasswordBearer",
          [],
          configuration
        );

        if (filters !== undefined) {
          localVarQueryParameter["filters"] = filters;
        }

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        };

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
    /**
     *
     * @summary Route Project Summary
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectSummaryApiProjectsV2ProjectHashSummaryGet: async (
      projectHash: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectHash' is not null or undefined
      assertParamExists(
        "routeProjectSummaryApiProjectsV2ProjectHashSummaryGet",
        "projectHash",
        projectHash
      );
      const localVarPath = `/api/projects_v2/{project_hash}/summary`.replace(
        `{${"project_hash"}}`,
        encodeURIComponent(String(projectHash))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2PasswordBearer",
        [],
        configuration
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Tag Items
     * @param {string} projectHash
     * @param {Array<ItemTags>} itemTags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeTagItemsApiProjectsV2ProjectHashTagsTagItemsPut: async (
      projectHash: string,
      itemTags: Array<ItemTags>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectHash' is not null or undefined
      assertParamExists(
        "routeTagItemsApiProjectsV2ProjectHashTagsTagItemsPut",
        "projectHash",
        projectHash
      );
      // verify required parameter 'itemTags' is not null or undefined
      assertParamExists(
        "routeTagItemsApiProjectsV2ProjectHashTagsTagItemsPut",
        "itemTags",
        itemTags
      );
      const localVarPath =
        `/api/projects_v2/{project_hash}/tags/tag_items`.replace(
          `{${"project_hash"}}`,
          encodeURIComponent(String(projectHash))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2PasswordBearer",
        [],
        configuration
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        itemTags,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Tag Items
     * @param {string} projectHash
     * @param {Array<ItemTags>} itemTags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeTagItemsApiProjectsV2ProjectHashTagsTagItemsPut_10: async (
      projectHash: string,
      itemTags: Array<ItemTags>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectHash' is not null or undefined
      assertParamExists(
        "routeTagItemsApiProjectsV2ProjectHashTagsTagItemsPut_10",
        "projectHash",
        projectHash
      );
      // verify required parameter 'itemTags' is not null or undefined
      assertParamExists(
        "routeTagItemsApiProjectsV2ProjectHashTagsTagItemsPut_10",
        "itemTags",
        itemTags
      );
      const localVarPath =
        `/api/projects_v2/{project_hash}/tags/tag_items`.replace(
          `{${"project_hash"}}`,
          encodeURIComponent(String(projectHash))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2PasswordBearer",
        [],
        configuration
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        itemTags,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Tagged Items
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeTaggedItemsApiProjectsV2ProjectHashTagsTaggedItemsGet: async (
      projectHash: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectHash' is not null or undefined
      assertParamExists(
        "routeTaggedItemsApiProjectsV2ProjectHashTagsTaggedItemsGet",
        "projectHash",
        projectHash
      );
      const localVarPath =
        `/api/projects_v2/{project_hash}/tags/tagged_items`.replace(
          `{${"project_hash"}}`,
          encodeURIComponent(String(projectHash))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2PasswordBearer",
        [],
        configuration
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Tagged Items
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeTaggedItemsApiProjectsV2ProjectHashTagsTaggedItemsGet_11: async (
      projectHash: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectHash' is not null or undefined
      assertParamExists(
        "routeTaggedItemsApiProjectsV2ProjectHashTagsTaggedItemsGet_11",
        "projectHash",
        projectHash
      );
      const localVarPath =
        `/api/projects_v2/{project_hash}/tags/tagged_items`.replace(
          `{${"project_hash"}}`,
          encodeURIComponent(String(projectHash))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2PasswordBearer",
        [],
        configuration
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ProjectApi - functional programming interface
 * @export
 */
export const ProjectApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ProjectApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Route Action Create Project Subset
     * @param {string} projectHash
     * @param {CreateProjectSubsetPostAction} createProjectSubsetPostAction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeActionCreateProjectSubsetApiProjectsV2ProjectHashActionsCreateProjectSubsetPost(
      projectHash: string,
      createProjectSubsetPostAction: CreateProjectSubsetPostAction,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeActionCreateProjectSubsetApiProjectsV2ProjectHashActionsCreateProjectSubsetPost(
          projectHash,
          createProjectSubsetPostAction,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Action Create Project Subset
     * @param {string} projectHash
     * @param {CreateProjectSubsetPostAction} createProjectSubsetPostAction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeActionCreateProjectSubsetApiProjectsV2ProjectHashActionsCreateProjectSubsetPost_1(
      projectHash: string,
      createProjectSubsetPostAction: CreateProjectSubsetPostAction,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeActionCreateProjectSubsetApiProjectsV2ProjectHashActionsCreateProjectSubsetPost_1(
          projectHash,
          createProjectSubsetPostAction,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Action Upload Project To Encord
     * @param {string} projectHash
     * @param {UploadProjectToEncordPostAction} uploadProjectToEncordPostAction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeActionUploadProjectToEncordApiProjectsV2ProjectHashActionsUploadToEncordPost(
      projectHash: string,
      uploadProjectToEncordPostAction: UploadProjectToEncordPostAction,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeActionUploadProjectToEncordApiProjectsV2ProjectHashActionsUploadToEncordPost(
          projectHash,
          uploadProjectToEncordPostAction,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Action Upload Project To Encord
     * @param {string} projectHash
     * @param {UploadProjectToEncordPostAction} uploadProjectToEncordPostAction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeActionUploadProjectToEncordApiProjectsV2ProjectHashActionsUploadToEncordPost_2(
      projectHash: string,
      uploadProjectToEncordPostAction: UploadProjectToEncordPostAction,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeActionUploadProjectToEncordApiProjectsV2ProjectHashActionsUploadToEncordPost_2(
          projectHash,
          uploadProjectToEncordPostAction,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route List Projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeListProjectsApiProjectsV2Get(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ProjectSearchResult>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeListProjectsApiProjectsV2Get(
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route List Tags
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeListTagsApiProjectsV2ProjectHashTagsGet(
      projectHash: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<ProjectTagEntry>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeListTagsApiProjectsV2ProjectHashTagsGet(
          projectHash,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route List Tags
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeListTagsApiProjectsV2ProjectHashTagsGet_3(
      projectHash: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<ProjectTagEntry>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeListTagsApiProjectsV2ProjectHashTagsGet_3(
          projectHash,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Prediction Data Item
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {string} dataItem
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routePredictionDataItemApiProjectsV2ProjectHashPredictionsPredictionHashPreviewDataItemGet(
      projectHash: string,
      predictionHash: string,
      dataItem: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PredictionItem>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routePredictionDataItemApiProjectsV2ProjectHashPredictionsPredictionHashPreviewDataItemGet(
          projectHash,
          predictionHash,
          dataItem,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Prediction Distribution
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {PredictionDomain} domain
     * @param {number} iou
     * @param {string} group
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routePredictionDistributionApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainDistributionGet(
      projectHash: string,
      predictionHash: string,
      domain: PredictionDomain,
      iou: number,
      group: string,
      buckets?: AnalysisBuckets,
      filters?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<QueryDistribution>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routePredictionDistributionApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainDistributionGet(
          projectHash,
          predictionHash,
          domain,
          iou,
          group,
          buckets,
          filters,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Prediction Metric Performance
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {number} iou
     * @param {string} metricName
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routePredictionMetricPerformanceApiProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGet(
      projectHash: string,
      predictionHash: string,
      iou: number,
      metricName: string,
      buckets?: AnalysisBuckets,
      filters?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<QueryMetricPerformance>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routePredictionMetricPerformanceApiProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGet(
          projectHash,
          predictionHash,
          iou,
          metricName,
          buckets,
          filters,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Prediction Reduction Scatter
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {PredictionDomain} domain
     * @param {string} reductionHash
     * @param {number} iou
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routePredictionReductionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainReductionsReductionHashSummaryGet(
      projectHash: string,
      predictionHash: string,
      domain: PredictionDomain,
      reductionHash: string,
      iou: number,
      buckets?: AnalysisBuckets,
      filters?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PredictionQuery2DEmbedding>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routePredictionReductionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainReductionsReductionHashSummaryGet(
          projectHash,
          predictionHash,
          domain,
          reductionHash,
          iou,
          buckets,
          filters,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Prediction Scatter
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {PredictionDomain} domain
     * @param {number} iou
     * @param {string} xMetric
     * @param {string} yMetric
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routePredictionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainScatterGet(
      projectHash: string,
      predictionHash: string,
      domain: PredictionDomain,
      iou: number,
      xMetric: string,
      yMetric: string,
      buckets?: AnalysisBuckets,
      filters?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryScatter>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routePredictionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainScatterGet(
          projectHash,
          predictionHash,
          domain,
          iou,
          xMetric,
          yMetric,
          buckets,
          filters,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Prediction Search
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {PredictionDomain} domain
     * @param {number} iou
     * @param {boolean} desc
     * @param {string} [filters] Search Filters
     * @param {string} [orderBy]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {string} [text]
     * @param {File} [image]
     * @param {string} [item]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routePredictionSearchApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainSearchPost(
      projectHash: string,
      predictionHash: string,
      domain: PredictionDomain,
      iou: number,
      desc: boolean,
      filters?: string,
      orderBy?: string,
      offset?: number,
      limit?: number,
      text?: string,
      image?: File,
      item?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnalysisSearch>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routePredictionSearchApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainSearchPost(
          projectHash,
          predictionHash,
          domain,
          iou,
          desc,
          filters,
          orderBy,
          offset,
          limit,
          text,
          image,
          item,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Prediction Summary
     * @param {string} predictionHash
     * @param {string} projectHash
     * @param {number} iou
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routePredictionSummaryApiProjectsV2ProjectHashPredictionsPredictionHashSummaryGet(
      predictionHash: string,
      projectHash: string,
      iou: number,
      filters?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PredictionSummaryResult>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routePredictionSummaryApiProjectsV2ProjectHashPredictionsPredictionHashSummaryGet(
          predictionHash,
          projectHash,
          iou,
          filters,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Project Action Tag Items
     * @param {string} projectHash
     * @param {string} tagName
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeProjectActionTagItemsApiProjectsV2ProjectHashCreateTagPost(
      projectHash: string,
      tagName: string,
      requestBody: Array<string>,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeProjectActionTagItemsApiProjectsV2ProjectHashCreateTagPost(
          projectHash,
          tagName,
          requestBody,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Project Compare Metric Dissimilarity
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} compareProjectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeProjectCompareMetricDissimilarityApiProjectsV2ProjectHashAnalysisDomainProjectCompareMetricDissimilarityGet(
      projectHash: string,
      domain: AnalysisDomain,
      compareProjectHash: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<MetricDissimilarityResult>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeProjectCompareMetricDissimilarityApiProjectsV2ProjectHashAnalysisDomainProjectCompareMetricDissimilarityGet(
          projectHash,
          domain,
          compareProjectHash,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Project Compare Metric Dissimilarity
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} compareProjectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeProjectCompareMetricDissimilarityApiProjectsV2ProjectHashAnalysisDomainProjectCompareMetricDissimilarityGet_4(
      projectHash: string,
      domain: AnalysisDomain,
      compareProjectHash: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<MetricDissimilarityResult>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeProjectCompareMetricDissimilarityApiProjectsV2ProjectHashAnalysisDomainProjectCompareMetricDissimilarityGet_4(
          projectHash,
          domain,
          compareProjectHash,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Project Data Item
     * @param {string} projectHash
     * @param {string} dataItem
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeProjectDataItemApiProjectsV2ProjectHashItemDataItemGet(
      projectHash: string,
      dataItem: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectItem>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeProjectDataItemApiProjectsV2ProjectHashItemDataItemGet(
          projectHash,
          dataItem,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Project Distribution
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} group
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeProjectDistributionApiProjectsV2ProjectHashAnalysisDomainDistributionGet(
      projectHash: string,
      domain: AnalysisDomain,
      group: string,
      buckets?: AnalysisBuckets,
      filters?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<QueryDistribution>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeProjectDistributionApiProjectsV2ProjectHashAnalysisDomainDistributionGet(
          projectHash,
          domain,
          group,
          buckets,
          filters,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Project Distribution
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} group
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeProjectDistributionApiProjectsV2ProjectHashAnalysisDomainDistributionGet_5(
      projectHash: string,
      domain: AnalysisDomain,
      group: string,
      buckets?: AnalysisBuckets,
      filters?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<QueryDistribution>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeProjectDistributionApiProjectsV2ProjectHashAnalysisDomainDistributionGet_5(
          projectHash,
          domain,
          group,
          buckets,
          filters,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Project List Collaborators
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeProjectListCollaboratorsApiProjectsV2ProjectHashCollaboratorsGet(
      projectHash: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<ProjectCollaboratorEntry>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeProjectListCollaboratorsApiProjectsV2ProjectHashCollaboratorsGet(
          projectHash,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Project List Predictions
     * @param {string} projectHash
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {RouteProjectListPredictionsApiProjectsV2ProjectHashPredictionsGetOrderByEnum} [orderBy]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeProjectListPredictionsApiProjectsV2ProjectHashPredictionsGet(
      projectHash: string,
      offset?: number,
      limit?: number,
      orderBy?: RouteProjectListPredictionsApiProjectsV2ProjectHashPredictionsGetOrderByEnum,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ListProjectPredictionResult>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeProjectListPredictionsApiProjectsV2ProjectHashPredictionsGet(
          projectHash,
          offset,
          limit,
          orderBy,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Project List Reductions
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeProjectListReductionsApiProjectsV2ProjectHashReductionsGet(
      projectHash: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ProjectList2DEmbeddingReductionResult>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeProjectListReductionsApiProjectsV2ProjectHashReductionsGet(
          projectHash,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Project Metadata
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeProjectMetadataApiProjectsV2ProjectHashMetadataGet(
      projectHash: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ProjectMetadata>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeProjectMetadataApiProjectsV2ProjectHashMetadataGet(
          projectHash,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Project Raw File
     * @param {string} projectHash
     * @param {string} duHash
     * @param {number} frame
     * @param {string} [ifNoneMatch]
     * @param {string} [ifModifiedSince]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeProjectRawFileApiProjectsV2ProjectHashFilesDuHashFrameGet(
      projectHash: string,
      duHash: string,
      frame: number,
      ifNoneMatch?: string,
      ifModifiedSince?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeProjectRawFileApiProjectsV2ProjectHashFilesDuHashFrameGet(
          projectHash,
          duHash,
          frame,
          ifNoneMatch,
          ifModifiedSince,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Project Reduction Scatter
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} reductionHash
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeProjectReductionScatterApiProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGet(
      projectHash: string,
      domain: AnalysisDomain,
      reductionHash: string,
      buckets?: AnalysisBuckets,
      filters?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Query2DEmbedding>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeProjectReductionScatterApiProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGet(
          projectHash,
          domain,
          reductionHash,
          buckets,
          filters,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Project Reduction Scatter
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} reductionHash
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeProjectReductionScatterApiProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGet_6(
      projectHash: string,
      domain: AnalysisDomain,
      reductionHash: string,
      buckets?: AnalysisBuckets,
      filters?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Query2DEmbedding>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeProjectReductionScatterApiProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGet_6(
          projectHash,
          domain,
          reductionHash,
          buckets,
          filters,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Project Scatter
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} xMetric
     * @param {string} yMetric
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeProjectScatterApiProjectsV2ProjectHashAnalysisDomainScatterGet(
      projectHash: string,
      domain: AnalysisDomain,
      xMetric: string,
      yMetric: string,
      buckets?: AnalysisBuckets,
      filters?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryScatter>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeProjectScatterApiProjectsV2ProjectHashAnalysisDomainScatterGet(
          projectHash,
          domain,
          xMetric,
          yMetric,
          buckets,
          filters,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Project Scatter
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} xMetric
     * @param {string} yMetric
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeProjectScatterApiProjectsV2ProjectHashAnalysisDomainScatterGet_7(
      projectHash: string,
      domain: AnalysisDomain,
      xMetric: string,
      yMetric: string,
      buckets?: AnalysisBuckets,
      filters?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryScatter>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeProjectScatterApiProjectsV2ProjectHashAnalysisDomainScatterGet_7(
          projectHash,
          domain,
          xMetric,
          yMetric,
          buckets,
          filters,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Project Search
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {boolean} desc
     * @param {string} [filters] Search Filters
     * @param {string} [orderBy]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {string} [text]
     * @param {File} [image]
     * @param {string} [item]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeProjectSearchApiProjectsV2ProjectHashAnalysisDomainSearchPost(
      projectHash: string,
      domain: AnalysisDomain,
      desc: boolean,
      filters?: string,
      orderBy?: string,
      offset?: number,
      limit?: number,
      text?: string,
      image?: File,
      item?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnalysisSearch>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeProjectSearchApiProjectsV2ProjectHashAnalysisDomainSearchPost(
          projectHash,
          domain,
          desc,
          filters,
          orderBy,
          offset,
          limit,
          text,
          image,
          item,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Project Search
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {boolean} desc
     * @param {string} [filters] Search Filters
     * @param {string} [orderBy]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {string} [text]
     * @param {File} [image]
     * @param {string} [item]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeProjectSearchApiProjectsV2ProjectHashAnalysisDomainSearchPost_8(
      projectHash: string,
      domain: AnalysisDomain,
      desc: boolean,
      filters?: string,
      orderBy?: string,
      offset?: number,
      limit?: number,
      text?: string,
      image?: File,
      item?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnalysisSearch>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeProjectSearchApiProjectsV2ProjectHashAnalysisDomainSearchPost_8(
          projectHash,
          domain,
          desc,
          filters,
          orderBy,
          offset,
          limit,
          text,
          image,
          item,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Project Summary
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeProjectSummaryApiProjectsV2ProjectHashAnalysisDomainSummaryGet(
      projectHash: string,
      domain: AnalysisDomain,
      filters?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuerySummary>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeProjectSummaryApiProjectsV2ProjectHashAnalysisDomainSummaryGet(
          projectHash,
          domain,
          filters,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Project Summary
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeProjectSummaryApiProjectsV2ProjectHashAnalysisDomainSummaryGet_9(
      projectHash: string,
      domain: AnalysisDomain,
      filters?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuerySummary>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeProjectSummaryApiProjectsV2ProjectHashAnalysisDomainSummaryGet_9(
          projectHash,
          domain,
          filters,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Project Summary
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeProjectSummaryApiProjectsV2ProjectHashSummaryGet(
      projectHash: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectSummary>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeProjectSummaryApiProjectsV2ProjectHashSummaryGet(
          projectHash,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Tag Items
     * @param {string} projectHash
     * @param {Array<ItemTags>} itemTags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeTagItemsApiProjectsV2ProjectHashTagsTagItemsPut(
      projectHash: string,
      itemTags: Array<ItemTags>,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeTagItemsApiProjectsV2ProjectHashTagsTagItemsPut(
          projectHash,
          itemTags,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Tag Items
     * @param {string} projectHash
     * @param {Array<ItemTags>} itemTags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeTagItemsApiProjectsV2ProjectHashTagsTagItemsPut_10(
      projectHash: string,
      itemTags: Array<ItemTags>,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeTagItemsApiProjectsV2ProjectHashTagsTagItemsPut_10(
          projectHash,
          itemTags,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Tagged Items
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeTaggedItemsApiProjectsV2ProjectHashTagsTaggedItemsGet(
      projectHash: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<{ [key: string]: GroupedTags | undefined }>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeTaggedItemsApiProjectsV2ProjectHashTagsTaggedItemsGet(
          projectHash,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Route Tagged Items
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeTaggedItemsApiProjectsV2ProjectHashTagsTaggedItemsGet_11(
      projectHash: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<{ [key: string]: GroupedTags | undefined }>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeTaggedItemsApiProjectsV2ProjectHashTagsTaggedItemsGet_11(
          projectHash,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * ProjectApi - factory interface
 * @export
 */
export const ProjectApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ProjectApiFp(configuration);
  return {
    /**
     *
     * @summary Route Action Create Project Subset
     * @param {string} projectHash
     * @param {CreateProjectSubsetPostAction} createProjectSubsetPostAction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeActionCreateProjectSubsetApiProjectsV2ProjectHashActionsCreateProjectSubsetPost(
      projectHash: string,
      createProjectSubsetPostAction: CreateProjectSubsetPostAction,
      options?: any
    ): AxiosPromise<any> {
      return localVarFp
        .routeActionCreateProjectSubsetApiProjectsV2ProjectHashActionsCreateProjectSubsetPost(
          projectHash,
          createProjectSubsetPostAction,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Action Create Project Subset
     * @param {string} projectHash
     * @param {CreateProjectSubsetPostAction} createProjectSubsetPostAction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeActionCreateProjectSubsetApiProjectsV2ProjectHashActionsCreateProjectSubsetPost_1(
      projectHash: string,
      createProjectSubsetPostAction: CreateProjectSubsetPostAction,
      options?: any
    ): AxiosPromise<any> {
      return localVarFp
        .routeActionCreateProjectSubsetApiProjectsV2ProjectHashActionsCreateProjectSubsetPost_1(
          projectHash,
          createProjectSubsetPostAction,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Action Upload Project To Encord
     * @param {string} projectHash
     * @param {UploadProjectToEncordPostAction} uploadProjectToEncordPostAction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeActionUploadProjectToEncordApiProjectsV2ProjectHashActionsUploadToEncordPost(
      projectHash: string,
      uploadProjectToEncordPostAction: UploadProjectToEncordPostAction,
      options?: any
    ): AxiosPromise<any> {
      return localVarFp
        .routeActionUploadProjectToEncordApiProjectsV2ProjectHashActionsUploadToEncordPost(
          projectHash,
          uploadProjectToEncordPostAction,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Action Upload Project To Encord
     * @param {string} projectHash
     * @param {UploadProjectToEncordPostAction} uploadProjectToEncordPostAction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeActionUploadProjectToEncordApiProjectsV2ProjectHashActionsUploadToEncordPost_2(
      projectHash: string,
      uploadProjectToEncordPostAction: UploadProjectToEncordPostAction,
      options?: any
    ): AxiosPromise<any> {
      return localVarFp
        .routeActionUploadProjectToEncordApiProjectsV2ProjectHashActionsUploadToEncordPost_2(
          projectHash,
          uploadProjectToEncordPostAction,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route List Projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeListProjectsApiProjectsV2Get(
      options?: any
    ): AxiosPromise<ProjectSearchResult> {
      return localVarFp
        .routeListProjectsApiProjectsV2Get(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route List Tags
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeListTagsApiProjectsV2ProjectHashTagsGet(
      projectHash: string,
      options?: any
    ): AxiosPromise<Array<ProjectTagEntry>> {
      return localVarFp
        .routeListTagsApiProjectsV2ProjectHashTagsGet(projectHash, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route List Tags
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeListTagsApiProjectsV2ProjectHashTagsGet_3(
      projectHash: string,
      options?: any
    ): AxiosPromise<Array<ProjectTagEntry>> {
      return localVarFp
        .routeListTagsApiProjectsV2ProjectHashTagsGet_3(projectHash, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Prediction Data Item
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {string} dataItem
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routePredictionDataItemApiProjectsV2ProjectHashPredictionsPredictionHashPreviewDataItemGet(
      projectHash: string,
      predictionHash: string,
      dataItem: string,
      options?: any
    ): AxiosPromise<PredictionItem> {
      return localVarFp
        .routePredictionDataItemApiProjectsV2ProjectHashPredictionsPredictionHashPreviewDataItemGet(
          projectHash,
          predictionHash,
          dataItem,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Prediction Distribution
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {PredictionDomain} domain
     * @param {number} iou
     * @param {string} group
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routePredictionDistributionApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainDistributionGet(
      projectHash: string,
      predictionHash: string,
      domain: PredictionDomain,
      iou: number,
      group: string,
      buckets?: AnalysisBuckets,
      filters?: string,
      options?: any
    ): AxiosPromise<QueryDistribution> {
      return localVarFp
        .routePredictionDistributionApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainDistributionGet(
          projectHash,
          predictionHash,
          domain,
          iou,
          group,
          buckets,
          filters,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Prediction Metric Performance
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {number} iou
     * @param {string} metricName
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routePredictionMetricPerformanceApiProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGet(
      projectHash: string,
      predictionHash: string,
      iou: number,
      metricName: string,
      buckets?: AnalysisBuckets,
      filters?: string,
      options?: any
    ): AxiosPromise<QueryMetricPerformance> {
      return localVarFp
        .routePredictionMetricPerformanceApiProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGet(
          projectHash,
          predictionHash,
          iou,
          metricName,
          buckets,
          filters,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Prediction Reduction Scatter
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {PredictionDomain} domain
     * @param {string} reductionHash
     * @param {number} iou
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routePredictionReductionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainReductionsReductionHashSummaryGet(
      projectHash: string,
      predictionHash: string,
      domain: PredictionDomain,
      reductionHash: string,
      iou: number,
      buckets?: AnalysisBuckets,
      filters?: string,
      options?: any
    ): AxiosPromise<PredictionQuery2DEmbedding> {
      return localVarFp
        .routePredictionReductionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainReductionsReductionHashSummaryGet(
          projectHash,
          predictionHash,
          domain,
          reductionHash,
          iou,
          buckets,
          filters,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Prediction Scatter
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {PredictionDomain} domain
     * @param {number} iou
     * @param {string} xMetric
     * @param {string} yMetric
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routePredictionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainScatterGet(
      projectHash: string,
      predictionHash: string,
      domain: PredictionDomain,
      iou: number,
      xMetric: string,
      yMetric: string,
      buckets?: AnalysisBuckets,
      filters?: string,
      options?: any
    ): AxiosPromise<QueryScatter> {
      return localVarFp
        .routePredictionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainScatterGet(
          projectHash,
          predictionHash,
          domain,
          iou,
          xMetric,
          yMetric,
          buckets,
          filters,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Prediction Search
     * @param {string} projectHash
     * @param {string} predictionHash
     * @param {PredictionDomain} domain
     * @param {number} iou
     * @param {boolean} desc
     * @param {string} [filters] Search Filters
     * @param {string} [orderBy]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {string} [text]
     * @param {File} [image]
     * @param {string} [item]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routePredictionSearchApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainSearchPost(
      projectHash: string,
      predictionHash: string,
      domain: PredictionDomain,
      iou: number,
      desc: boolean,
      filters?: string,
      orderBy?: string,
      offset?: number,
      limit?: number,
      text?: string,
      image?: File,
      item?: string,
      options?: any
    ): AxiosPromise<AnalysisSearch> {
      return localVarFp
        .routePredictionSearchApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainSearchPost(
          projectHash,
          predictionHash,
          domain,
          iou,
          desc,
          filters,
          orderBy,
          offset,
          limit,
          text,
          image,
          item,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Prediction Summary
     * @param {string} predictionHash
     * @param {string} projectHash
     * @param {number} iou
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routePredictionSummaryApiProjectsV2ProjectHashPredictionsPredictionHashSummaryGet(
      predictionHash: string,
      projectHash: string,
      iou: number,
      filters?: string,
      options?: any
    ): AxiosPromise<PredictionSummaryResult> {
      return localVarFp
        .routePredictionSummaryApiProjectsV2ProjectHashPredictionsPredictionHashSummaryGet(
          predictionHash,
          projectHash,
          iou,
          filters,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Project Action Tag Items
     * @param {string} projectHash
     * @param {string} tagName
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectActionTagItemsApiProjectsV2ProjectHashCreateTagPost(
      projectHash: string,
      tagName: string,
      requestBody: Array<string>,
      options?: any
    ): AxiosPromise<any> {
      return localVarFp
        .routeProjectActionTagItemsApiProjectsV2ProjectHashCreateTagPost(
          projectHash,
          tagName,
          requestBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Project Compare Metric Dissimilarity
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} compareProjectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectCompareMetricDissimilarityApiProjectsV2ProjectHashAnalysisDomainProjectCompareMetricDissimilarityGet(
      projectHash: string,
      domain: AnalysisDomain,
      compareProjectHash: string,
      options?: any
    ): AxiosPromise<MetricDissimilarityResult> {
      return localVarFp
        .routeProjectCompareMetricDissimilarityApiProjectsV2ProjectHashAnalysisDomainProjectCompareMetricDissimilarityGet(
          projectHash,
          domain,
          compareProjectHash,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Project Compare Metric Dissimilarity
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} compareProjectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectCompareMetricDissimilarityApiProjectsV2ProjectHashAnalysisDomainProjectCompareMetricDissimilarityGet_4(
      projectHash: string,
      domain: AnalysisDomain,
      compareProjectHash: string,
      options?: any
    ): AxiosPromise<MetricDissimilarityResult> {
      return localVarFp
        .routeProjectCompareMetricDissimilarityApiProjectsV2ProjectHashAnalysisDomainProjectCompareMetricDissimilarityGet_4(
          projectHash,
          domain,
          compareProjectHash,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Project Data Item
     * @param {string} projectHash
     * @param {string} dataItem
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectDataItemApiProjectsV2ProjectHashItemDataItemGet(
      projectHash: string,
      dataItem: string,
      options?: any
    ): AxiosPromise<ProjectItem> {
      return localVarFp
        .routeProjectDataItemApiProjectsV2ProjectHashItemDataItemGet(
          projectHash,
          dataItem,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Project Distribution
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} group
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectDistributionApiProjectsV2ProjectHashAnalysisDomainDistributionGet(
      projectHash: string,
      domain: AnalysisDomain,
      group: string,
      buckets?: AnalysisBuckets,
      filters?: string,
      options?: any
    ): AxiosPromise<QueryDistribution> {
      return localVarFp
        .routeProjectDistributionApiProjectsV2ProjectHashAnalysisDomainDistributionGet(
          projectHash,
          domain,
          group,
          buckets,
          filters,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Project Distribution
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} group
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectDistributionApiProjectsV2ProjectHashAnalysisDomainDistributionGet_5(
      projectHash: string,
      domain: AnalysisDomain,
      group: string,
      buckets?: AnalysisBuckets,
      filters?: string,
      options?: any
    ): AxiosPromise<QueryDistribution> {
      return localVarFp
        .routeProjectDistributionApiProjectsV2ProjectHashAnalysisDomainDistributionGet_5(
          projectHash,
          domain,
          group,
          buckets,
          filters,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Project List Collaborators
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectListCollaboratorsApiProjectsV2ProjectHashCollaboratorsGet(
      projectHash: string,
      options?: any
    ): AxiosPromise<Array<ProjectCollaboratorEntry>> {
      return localVarFp
        .routeProjectListCollaboratorsApiProjectsV2ProjectHashCollaboratorsGet(
          projectHash,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Project List Predictions
     * @param {string} projectHash
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {RouteProjectListPredictionsApiProjectsV2ProjectHashPredictionsGetOrderByEnum} [orderBy]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectListPredictionsApiProjectsV2ProjectHashPredictionsGet(
      projectHash: string,
      offset?: number,
      limit?: number,
      orderBy?: RouteProjectListPredictionsApiProjectsV2ProjectHashPredictionsGetOrderByEnum,
      options?: any
    ): AxiosPromise<ListProjectPredictionResult> {
      return localVarFp
        .routeProjectListPredictionsApiProjectsV2ProjectHashPredictionsGet(
          projectHash,
          offset,
          limit,
          orderBy,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Project List Reductions
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectListReductionsApiProjectsV2ProjectHashReductionsGet(
      projectHash: string,
      options?: any
    ): AxiosPromise<ProjectList2DEmbeddingReductionResult> {
      return localVarFp
        .routeProjectListReductionsApiProjectsV2ProjectHashReductionsGet(
          projectHash,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Project Metadata
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectMetadataApiProjectsV2ProjectHashMetadataGet(
      projectHash: string,
      options?: any
    ): AxiosPromise<ProjectMetadata> {
      return localVarFp
        .routeProjectMetadataApiProjectsV2ProjectHashMetadataGet(
          projectHash,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Project Raw File
     * @param {string} projectHash
     * @param {string} duHash
     * @param {number} frame
     * @param {string} [ifNoneMatch]
     * @param {string} [ifModifiedSince]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectRawFileApiProjectsV2ProjectHashFilesDuHashFrameGet(
      projectHash: string,
      duHash: string,
      frame: number,
      ifNoneMatch?: string,
      ifModifiedSince?: string,
      options?: any
    ): AxiosPromise<any> {
      return localVarFp
        .routeProjectRawFileApiProjectsV2ProjectHashFilesDuHashFrameGet(
          projectHash,
          duHash,
          frame,
          ifNoneMatch,
          ifModifiedSince,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Project Reduction Scatter
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} reductionHash
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectReductionScatterApiProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGet(
      projectHash: string,
      domain: AnalysisDomain,
      reductionHash: string,
      buckets?: AnalysisBuckets,
      filters?: string,
      options?: any
    ): AxiosPromise<Query2DEmbedding> {
      return localVarFp
        .routeProjectReductionScatterApiProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGet(
          projectHash,
          domain,
          reductionHash,
          buckets,
          filters,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Project Reduction Scatter
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} reductionHash
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectReductionScatterApiProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGet_6(
      projectHash: string,
      domain: AnalysisDomain,
      reductionHash: string,
      buckets?: AnalysisBuckets,
      filters?: string,
      options?: any
    ): AxiosPromise<Query2DEmbedding> {
      return localVarFp
        .routeProjectReductionScatterApiProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGet_6(
          projectHash,
          domain,
          reductionHash,
          buckets,
          filters,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Project Scatter
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} xMetric
     * @param {string} yMetric
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectScatterApiProjectsV2ProjectHashAnalysisDomainScatterGet(
      projectHash: string,
      domain: AnalysisDomain,
      xMetric: string,
      yMetric: string,
      buckets?: AnalysisBuckets,
      filters?: string,
      options?: any
    ): AxiosPromise<QueryScatter> {
      return localVarFp
        .routeProjectScatterApiProjectsV2ProjectHashAnalysisDomainScatterGet(
          projectHash,
          domain,
          xMetric,
          yMetric,
          buckets,
          filters,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Project Scatter
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} xMetric
     * @param {string} yMetric
     * @param {AnalysisBuckets} [buckets]
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectScatterApiProjectsV2ProjectHashAnalysisDomainScatterGet_7(
      projectHash: string,
      domain: AnalysisDomain,
      xMetric: string,
      yMetric: string,
      buckets?: AnalysisBuckets,
      filters?: string,
      options?: any
    ): AxiosPromise<QueryScatter> {
      return localVarFp
        .routeProjectScatterApiProjectsV2ProjectHashAnalysisDomainScatterGet_7(
          projectHash,
          domain,
          xMetric,
          yMetric,
          buckets,
          filters,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Project Search
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {boolean} desc
     * @param {string} [filters] Search Filters
     * @param {string} [orderBy]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {string} [text]
     * @param {File} [image]
     * @param {string} [item]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectSearchApiProjectsV2ProjectHashAnalysisDomainSearchPost(
      projectHash: string,
      domain: AnalysisDomain,
      desc: boolean,
      filters?: string,
      orderBy?: string,
      offset?: number,
      limit?: number,
      text?: string,
      image?: File,
      item?: string,
      options?: any
    ): AxiosPromise<AnalysisSearch> {
      return localVarFp
        .routeProjectSearchApiProjectsV2ProjectHashAnalysisDomainSearchPost(
          projectHash,
          domain,
          desc,
          filters,
          orderBy,
          offset,
          limit,
          text,
          image,
          item,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Project Search
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {boolean} desc
     * @param {string} [filters] Search Filters
     * @param {string} [orderBy]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {string} [text]
     * @param {File} [image]
     * @param {string} [item]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectSearchApiProjectsV2ProjectHashAnalysisDomainSearchPost_8(
      projectHash: string,
      domain: AnalysisDomain,
      desc: boolean,
      filters?: string,
      orderBy?: string,
      offset?: number,
      limit?: number,
      text?: string,
      image?: File,
      item?: string,
      options?: any
    ): AxiosPromise<AnalysisSearch> {
      return localVarFp
        .routeProjectSearchApiProjectsV2ProjectHashAnalysisDomainSearchPost_8(
          projectHash,
          domain,
          desc,
          filters,
          orderBy,
          offset,
          limit,
          text,
          image,
          item,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Project Summary
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectSummaryApiProjectsV2ProjectHashAnalysisDomainSummaryGet(
      projectHash: string,
      domain: AnalysisDomain,
      filters?: string,
      options?: any
    ): AxiosPromise<QuerySummary> {
      return localVarFp
        .routeProjectSummaryApiProjectsV2ProjectHashAnalysisDomainSummaryGet(
          projectHash,
          domain,
          filters,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Project Summary
     * @param {string} projectHash
     * @param {AnalysisDomain} domain
     * @param {string} [filters] Search Filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectSummaryApiProjectsV2ProjectHashAnalysisDomainSummaryGet_9(
      projectHash: string,
      domain: AnalysisDomain,
      filters?: string,
      options?: any
    ): AxiosPromise<QuerySummary> {
      return localVarFp
        .routeProjectSummaryApiProjectsV2ProjectHashAnalysisDomainSummaryGet_9(
          projectHash,
          domain,
          filters,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Project Summary
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeProjectSummaryApiProjectsV2ProjectHashSummaryGet(
      projectHash: string,
      options?: any
    ): AxiosPromise<ProjectSummary> {
      return localVarFp
        .routeProjectSummaryApiProjectsV2ProjectHashSummaryGet(
          projectHash,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Tag Items
     * @param {string} projectHash
     * @param {Array<ItemTags>} itemTags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeTagItemsApiProjectsV2ProjectHashTagsTagItemsPut(
      projectHash: string,
      itemTags: Array<ItemTags>,
      options?: any
    ): AxiosPromise<any> {
      return localVarFp
        .routeTagItemsApiProjectsV2ProjectHashTagsTagItemsPut(
          projectHash,
          itemTags,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Tag Items
     * @param {string} projectHash
     * @param {Array<ItemTags>} itemTags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeTagItemsApiProjectsV2ProjectHashTagsTagItemsPut_10(
      projectHash: string,
      itemTags: Array<ItemTags>,
      options?: any
    ): AxiosPromise<any> {
      return localVarFp
        .routeTagItemsApiProjectsV2ProjectHashTagsTagItemsPut_10(
          projectHash,
          itemTags,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Tagged Items
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeTaggedItemsApiProjectsV2ProjectHashTagsTaggedItemsGet(
      projectHash: string,
      options?: any
    ): AxiosPromise<{ [key: string]: GroupedTags | undefined }> {
      return localVarFp
        .routeTaggedItemsApiProjectsV2ProjectHashTagsTaggedItemsGet(
          projectHash,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Tagged Items
     * @param {string} projectHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeTaggedItemsApiProjectsV2ProjectHashTagsTaggedItemsGet_11(
      projectHash: string,
      options?: any
    ): AxiosPromise<{ [key: string]: GroupedTags | undefined }> {
      return localVarFp
        .routeTaggedItemsApiProjectsV2ProjectHashTagsTaggedItemsGet_11(
          projectHash,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ProjectApi - object-oriented interface
 * @export
 * @class ProjectApi
 * @extends {BaseAPI}
 */
export class ProjectApi extends BaseAPI {
  /**
   *
   * @summary Route Action Create Project Subset
   * @param {string} projectHash
   * @param {CreateProjectSubsetPostAction} createProjectSubsetPostAction
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public routeActionCreateProjectSubsetApiProjectsV2ProjectHashActionsCreateProjectSubsetPost(
    projectHash: string,
    createProjectSubsetPostAction: CreateProjectSubsetPostAction,
    options?: AxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .routeActionCreateProjectSubsetApiProjectsV2ProjectHashActionsCreateProjectSubsetPost(
        projectHash,
        createProjectSubsetPostAction,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Action Create Project Subset
   * @param {string} projectHash
   * @param {CreateProjectSubsetPostAction} createProjectSubsetPostAction
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public routeActionCreateProjectSubsetApiProjectsV2ProjectHashActionsCreateProjectSubsetPost_1(
    projectHash: string,
    createProjectSubsetPostAction: CreateProjectSubsetPostAction,
    options?: AxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .routeActionCreateProjectSubsetApiProjectsV2ProjectHashActionsCreateProjectSubsetPost_1(
        projectHash,
        createProjectSubsetPostAction,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Action Upload Project To Encord
   * @param {string} projectHash
   * @param {UploadProjectToEncordPostAction} uploadProjectToEncordPostAction
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public routeActionUploadProjectToEncordApiProjectsV2ProjectHashActionsUploadToEncordPost(
    projectHash: string,
    uploadProjectToEncordPostAction: UploadProjectToEncordPostAction,
    options?: AxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .routeActionUploadProjectToEncordApiProjectsV2ProjectHashActionsUploadToEncordPost(
        projectHash,
        uploadProjectToEncordPostAction,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Action Upload Project To Encord
   * @param {string} projectHash
   * @param {UploadProjectToEncordPostAction} uploadProjectToEncordPostAction
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public routeActionUploadProjectToEncordApiProjectsV2ProjectHashActionsUploadToEncordPost_2(
    projectHash: string,
    uploadProjectToEncordPostAction: UploadProjectToEncordPostAction,
    options?: AxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .routeActionUploadProjectToEncordApiProjectsV2ProjectHashActionsUploadToEncordPost_2(
        projectHash,
        uploadProjectToEncordPostAction,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route List Projects
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public routeListProjectsApiProjectsV2Get(options?: AxiosRequestConfig) {
    return ProjectApiFp(this.configuration)
      .routeListProjectsApiProjectsV2Get(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route List Tags
   * @param {string} projectHash
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public routeListTagsApiProjectsV2ProjectHashTagsGet(
    projectHash: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .routeListTagsApiProjectsV2ProjectHashTagsGet(projectHash, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route List Tags
   * @param {string} projectHash
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public routeListTagsApiProjectsV2ProjectHashTagsGet_3(
    projectHash: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .routeListTagsApiProjectsV2ProjectHashTagsGet_3(projectHash, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Prediction Data Item
   * @param {string} projectHash
   * @param {string} predictionHash
   * @param {string} dataItem
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public routePredictionDataItemApiProjectsV2ProjectHashPredictionsPredictionHashPreviewDataItemGet(
    projectHash: string,
    predictionHash: string,
    dataItem: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .routePredictionDataItemApiProjectsV2ProjectHashPredictionsPredictionHashPreviewDataItemGet(
        projectHash,
        predictionHash,
        dataItem,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Prediction Distribution
   * @param {string} projectHash
   * @param {string} predictionHash
   * @param {PredictionDomain} domain
   * @param {number} iou
   * @param {string} group
   * @param {AnalysisBuckets} [buckets]
   * @param {string} [filters] Search Filters
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public routePredictionDistributionApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainDistributionGet(
    projectHash: string,
    predictionHash: string,
    domain: PredictionDomain,
    iou: number,
    group: string,
    buckets?: AnalysisBuckets,
    filters?: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .routePredictionDistributionApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainDistributionGet(
        projectHash,
        predictionHash,
        domain,
        iou,
        group,
        buckets,
        filters,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Prediction Metric Performance
   * @param {string} projectHash
   * @param {string} predictionHash
   * @param {number} iou
   * @param {string} metricName
   * @param {AnalysisBuckets} [buckets]
   * @param {string} [filters] Search Filters
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public routePredictionMetricPerformanceApiProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGet(
    projectHash: string,
    predictionHash: string,
    iou: number,
    metricName: string,
    buckets?: AnalysisBuckets,
    filters?: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .routePredictionMetricPerformanceApiProjectsV2ProjectHashPredictionsPredictionHashMetricPerformanceGet(
        projectHash,
        predictionHash,
        iou,
        metricName,
        buckets,
        filters,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Prediction Reduction Scatter
   * @param {string} projectHash
   * @param {string} predictionHash
   * @param {PredictionDomain} domain
   * @param {string} reductionHash
   * @param {number} iou
   * @param {AnalysisBuckets} [buckets]
   * @param {string} [filters] Search Filters
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public routePredictionReductionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainReductionsReductionHashSummaryGet(
    projectHash: string,
    predictionHash: string,
    domain: PredictionDomain,
    reductionHash: string,
    iou: number,
    buckets?: AnalysisBuckets,
    filters?: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .routePredictionReductionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainReductionsReductionHashSummaryGet(
        projectHash,
        predictionHash,
        domain,
        reductionHash,
        iou,
        buckets,
        filters,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Prediction Scatter
   * @param {string} projectHash
   * @param {string} predictionHash
   * @param {PredictionDomain} domain
   * @param {number} iou
   * @param {string} xMetric
   * @param {string} yMetric
   * @param {AnalysisBuckets} [buckets]
   * @param {string} [filters] Search Filters
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public routePredictionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainScatterGet(
    projectHash: string,
    predictionHash: string,
    domain: PredictionDomain,
    iou: number,
    xMetric: string,
    yMetric: string,
    buckets?: AnalysisBuckets,
    filters?: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .routePredictionScatterApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainScatterGet(
        projectHash,
        predictionHash,
        domain,
        iou,
        xMetric,
        yMetric,
        buckets,
        filters,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Prediction Search
   * @param {string} projectHash
   * @param {string} predictionHash
   * @param {PredictionDomain} domain
   * @param {number} iou
   * @param {boolean} desc
   * @param {string} [filters] Search Filters
   * @param {string} [orderBy]
   * @param {number} [offset]
   * @param {number} [limit]
   * @param {string} [text]
   * @param {File} [image]
   * @param {string} [item]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public routePredictionSearchApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainSearchPost(
    projectHash: string,
    predictionHash: string,
    domain: PredictionDomain,
    iou: number,
    desc: boolean,
    filters?: string,
    orderBy?: string,
    offset?: number,
    limit?: number,
    text?: string,
    image?: File,
    item?: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .routePredictionSearchApiProjectsV2ProjectHashPredictionsPredictionHashAnalyticsDomainSearchPost(
        projectHash,
        predictionHash,
        domain,
        iou,
        desc,
        filters,
        orderBy,
        offset,
        limit,
        text,
        image,
        item,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Prediction Summary
   * @param {string} predictionHash
   * @param {string} projectHash
   * @param {number} iou
   * @param {string} [filters] Search Filters
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public routePredictionSummaryApiProjectsV2ProjectHashPredictionsPredictionHashSummaryGet(
    predictionHash: string,
    projectHash: string,
    iou: number,
    filters?: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .routePredictionSummaryApiProjectsV2ProjectHashPredictionsPredictionHashSummaryGet(
        predictionHash,
        projectHash,
        iou,
        filters,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Project Action Tag Items
   * @param {string} projectHash
   * @param {string} tagName
   * @param {Array<string>} requestBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public routeProjectActionTagItemsApiProjectsV2ProjectHashCreateTagPost(
    projectHash: string,
    tagName: string,
    requestBody: Array<string>,
    options?: AxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .routeProjectActionTagItemsApiProjectsV2ProjectHashCreateTagPost(
        projectHash,
        tagName,
        requestBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Project Compare Metric Dissimilarity
   * @param {string} projectHash
   * @param {AnalysisDomain} domain
   * @param {string} compareProjectHash
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public routeProjectCompareMetricDissimilarityApiProjectsV2ProjectHashAnalysisDomainProjectCompareMetricDissimilarityGet(
    projectHash: string,
    domain: AnalysisDomain,
    compareProjectHash: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .routeProjectCompareMetricDissimilarityApiProjectsV2ProjectHashAnalysisDomainProjectCompareMetricDissimilarityGet(
        projectHash,
        domain,
        compareProjectHash,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Project Compare Metric Dissimilarity
   * @param {string} projectHash
   * @param {AnalysisDomain} domain
   * @param {string} compareProjectHash
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public routeProjectCompareMetricDissimilarityApiProjectsV2ProjectHashAnalysisDomainProjectCompareMetricDissimilarityGet_4(
    projectHash: string,
    domain: AnalysisDomain,
    compareProjectHash: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .routeProjectCompareMetricDissimilarityApiProjectsV2ProjectHashAnalysisDomainProjectCompareMetricDissimilarityGet_4(
        projectHash,
        domain,
        compareProjectHash,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Project Data Item
   * @param {string} projectHash
   * @param {string} dataItem
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public routeProjectDataItemApiProjectsV2ProjectHashItemDataItemGet(
    projectHash: string,
    dataItem: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .routeProjectDataItemApiProjectsV2ProjectHashItemDataItemGet(
        projectHash,
        dataItem,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Project Distribution
   * @param {string} projectHash
   * @param {AnalysisDomain} domain
   * @param {string} group
   * @param {AnalysisBuckets} [buckets]
   * @param {string} [filters] Search Filters
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public routeProjectDistributionApiProjectsV2ProjectHashAnalysisDomainDistributionGet(
    projectHash: string,
    domain: AnalysisDomain,
    group: string,
    buckets?: AnalysisBuckets,
    filters?: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .routeProjectDistributionApiProjectsV2ProjectHashAnalysisDomainDistributionGet(
        projectHash,
        domain,
        group,
        buckets,
        filters,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Project Distribution
   * @param {string} projectHash
   * @param {AnalysisDomain} domain
   * @param {string} group
   * @param {AnalysisBuckets} [buckets]
   * @param {string} [filters] Search Filters
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public routeProjectDistributionApiProjectsV2ProjectHashAnalysisDomainDistributionGet_5(
    projectHash: string,
    domain: AnalysisDomain,
    group: string,
    buckets?: AnalysisBuckets,
    filters?: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .routeProjectDistributionApiProjectsV2ProjectHashAnalysisDomainDistributionGet_5(
        projectHash,
        domain,
        group,
        buckets,
        filters,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Project List Collaborators
   * @param {string} projectHash
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public routeProjectListCollaboratorsApiProjectsV2ProjectHashCollaboratorsGet(
    projectHash: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .routeProjectListCollaboratorsApiProjectsV2ProjectHashCollaboratorsGet(
        projectHash,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Project List Predictions
   * @param {string} projectHash
   * @param {number} [offset]
   * @param {number} [limit]
   * @param {RouteProjectListPredictionsApiProjectsV2ProjectHashPredictionsGetOrderByEnum} [orderBy]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public routeProjectListPredictionsApiProjectsV2ProjectHashPredictionsGet(
    projectHash: string,
    offset?: number,
    limit?: number,
    orderBy?: RouteProjectListPredictionsApiProjectsV2ProjectHashPredictionsGetOrderByEnum,
    options?: AxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .routeProjectListPredictionsApiProjectsV2ProjectHashPredictionsGet(
        projectHash,
        offset,
        limit,
        orderBy,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Project List Reductions
   * @param {string} projectHash
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public routeProjectListReductionsApiProjectsV2ProjectHashReductionsGet(
    projectHash: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .routeProjectListReductionsApiProjectsV2ProjectHashReductionsGet(
        projectHash,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Project Metadata
   * @param {string} projectHash
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public routeProjectMetadataApiProjectsV2ProjectHashMetadataGet(
    projectHash: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .routeProjectMetadataApiProjectsV2ProjectHashMetadataGet(
        projectHash,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Project Raw File
   * @param {string} projectHash
   * @param {string} duHash
   * @param {number} frame
   * @param {string} [ifNoneMatch]
   * @param {string} [ifModifiedSince]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public routeProjectRawFileApiProjectsV2ProjectHashFilesDuHashFrameGet(
    projectHash: string,
    duHash: string,
    frame: number,
    ifNoneMatch?: string,
    ifModifiedSince?: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .routeProjectRawFileApiProjectsV2ProjectHashFilesDuHashFrameGet(
        projectHash,
        duHash,
        frame,
        ifNoneMatch,
        ifModifiedSince,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Project Reduction Scatter
   * @param {string} projectHash
   * @param {AnalysisDomain} domain
   * @param {string} reductionHash
   * @param {AnalysisBuckets} [buckets]
   * @param {string} [filters] Search Filters
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public routeProjectReductionScatterApiProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGet(
    projectHash: string,
    domain: AnalysisDomain,
    reductionHash: string,
    buckets?: AnalysisBuckets,
    filters?: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .routeProjectReductionScatterApiProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGet(
        projectHash,
        domain,
        reductionHash,
        buckets,
        filters,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Project Reduction Scatter
   * @param {string} projectHash
   * @param {AnalysisDomain} domain
   * @param {string} reductionHash
   * @param {AnalysisBuckets} [buckets]
   * @param {string} [filters] Search Filters
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public routeProjectReductionScatterApiProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGet_6(
    projectHash: string,
    domain: AnalysisDomain,
    reductionHash: string,
    buckets?: AnalysisBuckets,
    filters?: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .routeProjectReductionScatterApiProjectsV2ProjectHashAnalysisDomainReductionsReductionHashSummaryGet_6(
        projectHash,
        domain,
        reductionHash,
        buckets,
        filters,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Project Scatter
   * @param {string} projectHash
   * @param {AnalysisDomain} domain
   * @param {string} xMetric
   * @param {string} yMetric
   * @param {AnalysisBuckets} [buckets]
   * @param {string} [filters] Search Filters
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public routeProjectScatterApiProjectsV2ProjectHashAnalysisDomainScatterGet(
    projectHash: string,
    domain: AnalysisDomain,
    xMetric: string,
    yMetric: string,
    buckets?: AnalysisBuckets,
    filters?: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .routeProjectScatterApiProjectsV2ProjectHashAnalysisDomainScatterGet(
        projectHash,
        domain,
        xMetric,
        yMetric,
        buckets,
        filters,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Project Scatter
   * @param {string} projectHash
   * @param {AnalysisDomain} domain
   * @param {string} xMetric
   * @param {string} yMetric
   * @param {AnalysisBuckets} [buckets]
   * @param {string} [filters] Search Filters
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public routeProjectScatterApiProjectsV2ProjectHashAnalysisDomainScatterGet_7(
    projectHash: string,
    domain: AnalysisDomain,
    xMetric: string,
    yMetric: string,
    buckets?: AnalysisBuckets,
    filters?: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .routeProjectScatterApiProjectsV2ProjectHashAnalysisDomainScatterGet_7(
        projectHash,
        domain,
        xMetric,
        yMetric,
        buckets,
        filters,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Project Search
   * @param {string} projectHash
   * @param {AnalysisDomain} domain
   * @param {boolean} desc
   * @param {string} [filters] Search Filters
   * @param {string} [orderBy]
   * @param {number} [offset]
   * @param {number} [limit]
   * @param {string} [text]
   * @param {File} [image]
   * @param {string} [item]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public routeProjectSearchApiProjectsV2ProjectHashAnalysisDomainSearchPost(
    projectHash: string,
    domain: AnalysisDomain,
    desc: boolean,
    filters?: string,
    orderBy?: string,
    offset?: number,
    limit?: number,
    text?: string,
    image?: File,
    item?: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .routeProjectSearchApiProjectsV2ProjectHashAnalysisDomainSearchPost(
        projectHash,
        domain,
        desc,
        filters,
        orderBy,
        offset,
        limit,
        text,
        image,
        item,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Project Search
   * @param {string} projectHash
   * @param {AnalysisDomain} domain
   * @param {boolean} desc
   * @param {string} [filters] Search Filters
   * @param {string} [orderBy]
   * @param {number} [offset]
   * @param {number} [limit]
   * @param {string} [text]
   * @param {File} [image]
   * @param {string} [item]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public routeProjectSearchApiProjectsV2ProjectHashAnalysisDomainSearchPost_8(
    projectHash: string,
    domain: AnalysisDomain,
    desc: boolean,
    filters?: string,
    orderBy?: string,
    offset?: number,
    limit?: number,
    text?: string,
    image?: File,
    item?: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .routeProjectSearchApiProjectsV2ProjectHashAnalysisDomainSearchPost_8(
        projectHash,
        domain,
        desc,
        filters,
        orderBy,
        offset,
        limit,
        text,
        image,
        item,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Project Summary
   * @param {string} projectHash
   * @param {AnalysisDomain} domain
   * @param {string} [filters] Search Filters
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public routeProjectSummaryApiProjectsV2ProjectHashAnalysisDomainSummaryGet(
    projectHash: string,
    domain: AnalysisDomain,
    filters?: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .routeProjectSummaryApiProjectsV2ProjectHashAnalysisDomainSummaryGet(
        projectHash,
        domain,
        filters,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Project Summary
   * @param {string} projectHash
   * @param {AnalysisDomain} domain
   * @param {string} [filters] Search Filters
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public routeProjectSummaryApiProjectsV2ProjectHashAnalysisDomainSummaryGet_9(
    projectHash: string,
    domain: AnalysisDomain,
    filters?: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .routeProjectSummaryApiProjectsV2ProjectHashAnalysisDomainSummaryGet_9(
        projectHash,
        domain,
        filters,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Project Summary
   * @param {string} projectHash
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public routeProjectSummaryApiProjectsV2ProjectHashSummaryGet(
    projectHash: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .routeProjectSummaryApiProjectsV2ProjectHashSummaryGet(
        projectHash,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Tag Items
   * @param {string} projectHash
   * @param {Array<ItemTags>} itemTags
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public routeTagItemsApiProjectsV2ProjectHashTagsTagItemsPut(
    projectHash: string,
    itemTags: Array<ItemTags>,
    options?: AxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .routeTagItemsApiProjectsV2ProjectHashTagsTagItemsPut(
        projectHash,
        itemTags,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Tag Items
   * @param {string} projectHash
   * @param {Array<ItemTags>} itemTags
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public routeTagItemsApiProjectsV2ProjectHashTagsTagItemsPut_10(
    projectHash: string,
    itemTags: Array<ItemTags>,
    options?: AxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .routeTagItemsApiProjectsV2ProjectHashTagsTagItemsPut_10(
        projectHash,
        itemTags,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Tagged Items
   * @param {string} projectHash
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public routeTaggedItemsApiProjectsV2ProjectHashTagsTaggedItemsGet(
    projectHash: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .routeTaggedItemsApiProjectsV2ProjectHashTagsTaggedItemsGet(
        projectHash,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Tagged Items
   * @param {string} projectHash
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public routeTaggedItemsApiProjectsV2ProjectHashTagsTaggedItemsGet_11(
    projectHash: string,
    options?: AxiosRequestConfig
  ) {
    return ProjectApiFp(this.configuration)
      .routeTaggedItemsApiProjectsV2ProjectHashTagsTaggedItemsGet_11(
        projectHash,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * @export
 */
export const RouteProjectListPredictionsApiProjectsV2ProjectHashPredictionsGetOrderByEnum =
  {
    Empty: "",
  } as const;
export type RouteProjectListPredictionsApiProjectsV2ProjectHashPredictionsGetOrderByEnum =
  (typeof RouteProjectListPredictionsApiProjectsV2ProjectHashPredictionsGetOrderByEnum)[keyof typeof RouteProjectListPredictionsApiProjectsV2ProjectHashPredictionsGetOrderByEnum];
