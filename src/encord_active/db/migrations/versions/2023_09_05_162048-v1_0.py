"""v1_0

Revision ID: 1
Revises: bcfdfc2f498a
Create Date: 2023-09-05 14:26:50.014633+01:00

"""
import math
import uuid
from datetime import datetime
import json
from typing import Callable, Dict, Union, Optional, Tuple, Set, List

import numpy as np
import sqlalchemy as sa
from alembic import op
from sqlmodel.sql.sqltypes import GUID, AutoString
from tqdm import tqdm

from encord_active.db.util.char8 import Char8
from encord_active.db.util.pgvector import PGVector
from encord_active.db.util.strdict import StrDict

# revision identifiers, used by Alembic.
revision = "20230905162048"
down_revision = "bcfdfc2f498a"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # if postgresql: ensure extension exist.
    bind = op.get_bind()
    if bind.engine.name == "postgresql":
        for ext in ["vector", "hstore", "intarray"]:
            r = bind.execute(f"SELECT extname FROM pg_extension WHERE extname = '{ext}'").all()
            if len(r) == 0:
                op.execute(f"CREATE EXTENSION {ext}")

    # if sqlite: detect partial migration
    bind = op.get_bind()
    if bind.engine.name == "sqlite":
        try:
            bind.execute(f"SELECT COUNT(*) FROM project").all()
        except Exception as e:
            # FIXME: why didn't except sqlite3.OperationalError work??
            if (
                str(e)
                == """(sqlite3.OperationalError) no such table: project
[SQL: SELECT COUNT(*) FROM project]
(Background on this error at: https://sqlalche.me/e/14/e3q8)"""
            ):
                pass
            else:
                print(f'Unknown bug"{str(e)}"')
                raise e
        else:
            # Assume that all tables have been created, but the migration failed for some reason.
            migrate_sqlite_database_to_new_schema()
            return

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "project",
        sa.Column("project_hash", GUID(), nullable=False),
        sa.Column("name", AutoString(), nullable=False),
        sa.Column("description", AutoString(), nullable=False),
        sa.Column("ontology", sa.JSON(), nullable=False),
        sa.Column("remote", sa.Boolean(), nullable=False),
        sa.Column("custom_metrics", sa.JSON(), nullable=False),
        sa.PrimaryKeyConstraint("project_hash"),
    )
    op.create_table(
        "prediction",
        sa.Column("prediction_hash", GUID(), nullable=False),
        sa.Column("project_hash", GUID(), nullable=False),
        sa.Column("external_project_hash", GUID(), nullable=True),
        sa.Column("name", AutoString(), nullable=False),
        sa.ForeignKeyConstraint(
            ["project_hash"], ["project.project_hash"], name="fk_prediction", onupdate="CASCADE", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("prediction_hash"),
    )
    op.create_index("uq_project_prediction", "prediction", ["project_hash", "prediction_hash"], unique=True)
    op.create_table(
        "project_collaborator",
        sa.Column("project_hash", GUID(), nullable=False),
        sa.Column("user_id", sa.BigInteger(), nullable=False),
        sa.Column("user_email", AutoString(), nullable=False),
        sa.ForeignKeyConstraint(
            ["project_hash"],
            ["project.project_hash"],
            name="fk_project_collaborator",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("project_hash", "user_id"),
    )
    op.create_table(
        "project_data",
        sa.Column("project_hash", GUID(), nullable=False),
        sa.Column("data_hash", GUID(), nullable=False),
        sa.Column("label_hash", GUID(), nullable=False),
        sa.Column("dataset_hash", GUID(), nullable=False),
        sa.Column("num_frames", sa.Integer(), nullable=False),
        sa.Column("frames_per_second", sa.REAL(), nullable=True),
        sa.Column("dataset_title", AutoString(), nullable=False),
        sa.Column("data_title", AutoString(), nullable=False),
        sa.Column("data_type", AutoString(), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(), nullable=False),
        sa.Column("last_edited_at", sa.TIMESTAMP(), nullable=False),
        sa.Column("object_answers", sa.JSON(), nullable=False),
        sa.Column("classification_answers", sa.JSON(), nullable=False),
        sa.CheckConstraint("num_frames > 0", name="project_data_num_frames"),
        sa.ForeignKeyConstraint(
            ["project_hash"], ["project.project_hash"], name="fk_project_data", onupdate="CASCADE", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("project_hash", "data_hash"),
    )
    op.create_table(
        "project_embedding_index",
        sa.Column("project_hash", GUID(), nullable=False),
        sa.Column("data_index_dirty", sa.Boolean(), nullable=False),
        sa.Column("data_index_name", AutoString(), nullable=True),
        sa.Column("data_index_compiled", sa.LargeBinary(), nullable=True),
        sa.Column("annotation_index_dirty", sa.Boolean(), nullable=False),
        sa.Column("annotation_index_name", AutoString(), nullable=True),
        sa.Column("annotation_index_compiled", sa.LargeBinary(), nullable=True),
        sa.ForeignKeyConstraint(
            ["project_hash"],
            ["project.project_hash"],
            name="fk_project_embedding_index",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("project_hash"),
    )
    op.create_table(
        "project_embedding_reduction",
        sa.Column("reduction_hash", GUID(), nullable=False),
        sa.Column("project_hash", GUID(), nullable=False),
        sa.Column("reduction_name", AutoString(), nullable=False),
        sa.Column("reduction_description", AutoString(), nullable=False),
        sa.Column("reduction_type", sa.Enum("UMAP", name="embeddingreductiontype"), nullable=False),
        sa.Column("reduction_bytes", sa.LargeBinary(), nullable=False),
        sa.ForeignKeyConstraint(
            ["project_hash"],
            ["project.project_hash"],
            name="fk_project_embedding_reduction",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("reduction_hash"),
    )
    op.create_index(
        "ix_project_embedding_reduction", "project_embedding_reduction", ["project_hash", "reduction_hash"], unique=True
    )
    op.create_table(
        "project_import",
        sa.Column("project_hash", GUID(), nullable=False),
        sa.Column("import_metadata", sa.JSON(), nullable=False),
        sa.Column("import_metadata_type", sa.Enum("COCO", name="importmetadatatype"), nullable=False),
        sa.ForeignKeyConstraint(
            ["project_hash"], ["project.project_hash"], name="fk_project_import", onupdate="CASCADE", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("project_hash"),
    )
    op.create_table(
        "project_tags",
        sa.Column("tag_hash", GUID(), nullable=False),
        sa.Column("project_hash", GUID(), nullable=False),
        sa.Column("name", AutoString(), nullable=False),
        sa.Column("description", AutoString(), nullable=False),
        sa.ForeignKeyConstraint(
            ["project_hash"], ["project.project_hash"], name="fk_project_tags", onupdate="CASCADE", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("tag_hash"),
    )
    op.create_table(
        "prediction_analytics",
        sa.Column("prediction_hash", GUID(), nullable=False),
        sa.Column("du_hash", GUID(), nullable=False),
        sa.Column("frame", sa.Integer(), nullable=False),
        sa.Column("annotation_hash", Char8(), nullable=False),
        sa.Column("feature_hash", Char8(), nullable=False),
        sa.Column("project_hash", GUID(), nullable=False),
        sa.Column("annotation_type", sa.SMALLINT(), nullable=False),
        sa.Column("match_annotation_hash", Char8(), nullable=True),
        sa.Column("match_feature_hash", Char8(), nullable=True),
        sa.Column("match_duplicate_iou", sa.REAL(), nullable=False),
        sa.Column("iou", sa.REAL(), nullable=False),
        sa.Column("metric_width", sa.INTEGER(), nullable=True),
        sa.Column("metric_height", sa.INTEGER(), nullable=True),
        sa.Column("metric_area", sa.INTEGER(), nullable=True),
        sa.Column("metric_area_relative", sa.REAL(), nullable=True),
        sa.Column("metric_aspect_ratio", sa.REAL(), nullable=True),
        sa.Column("metric_brightness", sa.REAL(), nullable=True),
        sa.Column("metric_contrast", sa.REAL(), nullable=True),
        sa.Column("metric_sharpness", sa.REAL(), nullable=True),
        sa.Column("metric_red", sa.REAL(), nullable=True),
        sa.Column("metric_green", sa.REAL(), nullable=True),
        sa.Column("metric_blue", sa.REAL(), nullable=True),
        sa.Column("metric_random", sa.REAL(), nullable=True),
        sa.Column("metric_annotation_quality", sa.REAL(), nullable=True),
        sa.Column("metric_max_iou", sa.REAL(), nullable=True),
        sa.Column("metric_border_relative", sa.REAL(), nullable=True),
        sa.Column("metric_polygon_similarity", sa.REAL(), nullable=True),
        sa.Column("metric_missing_or_broken_track", sa.REAL(), nullable=True),
        sa.Column("metric_inconsistent_class", sa.REAL(), nullable=True),
        sa.Column("metric_shape_outlier", sa.REAL(), nullable=True),
        sa.Column("metric_confidence", sa.REAL(), nullable=True),
        sa.Column("metric_custom0", sa.REAL(), nullable=True),
        sa.Column("metric_custom1", sa.REAL(), nullable=True),
        sa.Column("metric_custom2", sa.REAL(), nullable=True),
        sa.Column("metric_custom3", sa.REAL(), nullable=True),
        sa.CheckConstraint("frame >= 0", name="prediction_analytics_frame"),
        sa.CheckConstraint("iou BETWEEN 0.0 AND 1.0", name="prediction_analytics_iou"),
        sa.CheckConstraint(
            "match_duplicate_iou BETWEEN 0.0 AND 1.0 OR match_duplicate_iou = -1.0",
            name="prediction_analytics_duplicate_iou",
        ),
        sa.CheckConstraint(
            "metric_annotation_quality BETWEEN 0.0 AND 1.0", name="prediction_analytics_mtc_annotation_quality"
        ),
        sa.CheckConstraint("metric_area >= 0", name="prediction_analytics_mtc_area"),
        sa.CheckConstraint("metric_area_relative BETWEEN 0.0 AND 1.0", name="prediction_analytics_mtc_area_relative"),
        sa.CheckConstraint("metric_aspect_ratio >= 0.0", name="prediction_analytics_mtc_aspect_ratio"),
        sa.CheckConstraint("metric_blue BETWEEN 0.0 AND 1.0", name="prediction_analytics_mtc_blue"),
        sa.CheckConstraint(
            "metric_border_relative BETWEEN 0.0 AND 1.0", name="prediction_analytics_mtc_border_relative"
        ),
        sa.CheckConstraint("metric_brightness BETWEEN 0.0 AND 1.0", name="prediction_analytics_mtc_brightness"),
        sa.CheckConstraint("metric_confidence BETWEEN 0.0 AND 1.0", name="prediction_analytics_mtc_confidence"),
        sa.CheckConstraint("metric_contrast BETWEEN 0.0 AND 1.0", name="prediction_analytics_mtc_contrast"),
        sa.CheckConstraint("metric_green BETWEEN 0.0 AND 1.0", name="prediction_analytics_mtc_green"),
        sa.CheckConstraint("metric_height >= 0", name="prediction_analytics_mtc_height"),
        sa.CheckConstraint(
            "metric_inconsistent_class BETWEEN 0.0 AND 1.0", name="prediction_analytics_mtc_inconsistent_class"
        ),
        sa.CheckConstraint("metric_max_iou BETWEEN 0.0 AND 1.0", name="prediction_analytics_mtc_max_iou"),
        sa.CheckConstraint(
            "metric_missing_or_broken_track BETWEEN 0.0 AND 1.0",
            name="prediction_analytics_mtc_missing_or_broken_track",
        ),
        sa.CheckConstraint(
            "metric_polygon_similarity BETWEEN 0.0 AND 1.0", name="prediction_analytics_mtc_polygon_similarity"
        ),
        sa.CheckConstraint("metric_random BETWEEN 0.0 AND 1.0", name="prediction_analytics_mtc_random"),
        sa.CheckConstraint("metric_red BETWEEN 0.0 AND 1.0", name="prediction_analytics_mtc_red"),
        sa.CheckConstraint("metric_shape_outlier BETWEEN 0.0 AND 1.0", name="prediction_analytics_mtc_shape_outlier"),
        sa.CheckConstraint("metric_sharpness BETWEEN 0.0 AND 1.0", name="prediction_analytics_mtc_sharpness"),
        sa.CheckConstraint("metric_width >= 0", name="prediction_analytics_mtc_width"),
        sa.ForeignKeyConstraint(
            ["prediction_hash", "project_hash"],
            ["prediction.prediction_hash", "prediction.project_hash"],
            name="fk_prediction_analytics",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("prediction_hash", "du_hash", "frame", "annotation_hash"),
    )
    op.create_index(
        "ix_prediction_analytics_ph_fh_mtc_confidence",
        "prediction_analytics",
        ["prediction_hash", "feature_hash", "metric_confidence"],
        unique=False,
    )
    op.create_index(
        "ix_prediction_analytics_ph_mtc_annotation_quality",
        "prediction_analytics",
        ["project_hash", "metric_annotation_quality"],
        unique=False,
    )
    op.create_index(
        "ix_prediction_analytics_ph_mtc_area", "prediction_analytics", ["project_hash", "metric_area"], unique=False
    )
    op.create_index(
        "ix_prediction_analytics_ph_mtc_area_relative",
        "prediction_analytics",
        ["project_hash", "metric_area_relative"],
        unique=False,
    )
    op.create_index(
        "ix_prediction_analytics_ph_mtc_aspect_ratio",
        "prediction_analytics",
        ["project_hash", "metric_aspect_ratio"],
        unique=False,
    )
    op.create_index(
        "ix_prediction_analytics_ph_mtc_blue", "prediction_analytics", ["project_hash", "metric_blue"], unique=False
    )
    op.create_index(
        "ix_prediction_analytics_ph_mtc_border_relative",
        "prediction_analytics",
        ["project_hash", "metric_border_relative"],
        unique=False,
    )
    op.create_index(
        "ix_prediction_analytics_ph_mtc_brightness",
        "prediction_analytics",
        ["project_hash", "metric_brightness"],
        unique=False,
    )
    op.create_index(
        "ix_prediction_analytics_ph_mtc_confidence",
        "prediction_analytics",
        ["project_hash", "metric_confidence"],
        unique=False,
    )
    op.create_index(
        "ix_prediction_analytics_ph_mtc_contrast",
        "prediction_analytics",
        ["project_hash", "metric_contrast"],
        unique=False,
    )
    op.create_index(
        "ix_prediction_analytics_ph_mtc_green", "prediction_analytics", ["project_hash", "metric_green"], unique=False
    )
    op.create_index(
        "ix_prediction_analytics_ph_mtc_height", "prediction_analytics", ["project_hash", "metric_height"], unique=False
    )
    op.create_index(
        "ix_prediction_analytics_ph_mtc_inconsistent_class",
        "prediction_analytics",
        ["project_hash", "metric_inconsistent_class"],
        unique=False,
    )
    op.create_index(
        "ix_prediction_analytics_ph_mtc_max_iou",
        "prediction_analytics",
        ["project_hash", "metric_max_iou"],
        unique=False,
    )
    op.create_index(
        "ix_prediction_analytics_ph_mtc_missing_or_broken_track",
        "prediction_analytics",
        ["project_hash", "metric_missing_or_broken_track"],
        unique=False,
    )
    op.create_index(
        "ix_prediction_analytics_ph_mtc_polygon_similarity",
        "prediction_analytics",
        ["project_hash", "metric_polygon_similarity"],
        unique=False,
    )
    op.create_index(
        "ix_prediction_analytics_ph_mtc_random", "prediction_analytics", ["project_hash", "metric_random"], unique=False
    )
    op.create_index(
        "ix_prediction_analytics_ph_mtc_red", "prediction_analytics", ["project_hash", "metric_red"], unique=False
    )
    op.create_index(
        "ix_prediction_analytics_ph_mtc_shape_outlier",
        "prediction_analytics",
        ["project_hash", "metric_shape_outlier"],
        unique=False,
    )
    op.create_index(
        "ix_prediction_analytics_ph_mtc_sharpness",
        "prediction_analytics",
        ["project_hash", "metric_sharpness"],
        unique=False,
    )
    op.create_index(
        "ix_prediction_analytics_ph_mtc_width", "prediction_analytics", ["project_hash", "metric_width"], unique=False
    )
    op.create_table(
        "prediction_data",
        sa.Column("prediction_hash", GUID(), nullable=False),
        sa.Column("data_hash", GUID(), nullable=False),
        sa.Column("project_hash", GUID(), nullable=False),
        sa.Column("label_hash", GUID(), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(), nullable=False),
        sa.Column("last_edited_at", sa.TIMESTAMP(), nullable=False),
        sa.Column("object_answers", sa.JSON(), nullable=False),
        sa.Column("classification_answers", sa.JSON(), nullable=False),
        sa.ForeignKeyConstraint(
            ["prediction_hash", "project_hash"],
            ["prediction.prediction_hash", "prediction.project_hash"],
            name="fk_prediction_data",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["project_hash", "data_hash"],
            ["project_data.project_hash", "project_data.data_hash"],
            name="fk_prediction_data_project",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("prediction_hash", "data_hash"),
    )
    op.create_table(
        "project_data_units",
        sa.Column("project_hash", GUID(), nullable=False),
        sa.Column("du_hash", GUID(), nullable=False),
        sa.Column("frame", sa.Integer(), nullable=False),
        sa.Column("data_hash", GUID(), nullable=False),
        sa.Column("width", sa.Integer(), nullable=False),
        sa.Column("height", sa.Integer(), nullable=False),
        sa.Column("data_uri", AutoString(), nullable=True),
        sa.Column("data_uri_is_video", sa.Boolean(), nullable=False),
        sa.Column("data_title", AutoString(), nullable=False),
        sa.Column("data_type", AutoString(), nullable=False),
        sa.Column("objects", sa.JSON(), nullable=False),
        sa.Column("classifications", sa.JSON(), nullable=False),
        sa.CheckConstraint("frame >= 0", name="project_data_units_frame"),
        sa.ForeignKeyConstraint(
            ["project_hash", "data_hash"],
            ["project_data.project_hash", "project_data.data_hash"],
            name="fk_project_data_units",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("project_hash", "du_hash", "frame"),
    )
    op.create_table(
        "prediction_analytics_derived",
        sa.Column("prediction_hash", GUID(), nullable=False),
        sa.Column("du_hash", GUID(), nullable=False),
        sa.Column("frame", sa.Integer(), nullable=False),
        sa.Column("annotation_hash", Char8(), nullable=False),
        sa.Column("distance_metric", sa.SMALLINT(), nullable=False),
        sa.Column("distance_index", sa.SMALLINT(), nullable=False),
        sa.Column("project_hash", GUID(), nullable=False),
        sa.Column("similarity", sa.REAL(), nullable=False),
        sa.Column("dep_du_hash", GUID(), nullable=False),
        sa.Column("dep_frame", sa.Integer(), nullable=False),
        sa.Column("dep_annotation_hash", Char8(), nullable=False),
        sa.CheckConstraint("frame >= 0", name="prediction_derived_frame"),
        sa.CheckConstraint("similarity >= 0", name="prediction_derived_similarity"),
        sa.ForeignKeyConstraint(
            ["prediction_hash", "du_hash", "frame", "annotation_hash"],
            [
                "prediction_analytics.prediction_hash",
                "prediction_analytics.du_hash",
                "prediction_analytics.frame",
                "prediction_analytics.annotation_hash",
            ],
            name="fk_prediction_analytics_derived",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["prediction_hash", "project_hash"],
            ["prediction.prediction_hash", "prediction.project_hash"],
            name="fk_prediction_analytics_derive_project",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint(
            "prediction_hash", "du_hash", "frame", "annotation_hash", "distance_metric", "distance_index"
        ),
    )
    op.create_table(
        "prediction_analytics_extra",
        sa.Column("prediction_hash", GUID(), nullable=False),
        sa.Column("du_hash", GUID(), nullable=False),
        sa.Column("frame", sa.Integer(), nullable=False),
        sa.Column("annotation_hash", Char8(), nullable=False),
        sa.Column("project_hash", GUID(), nullable=False),
        sa.Column("embedding_clip", PGVector(512), nullable=True),
        sa.Column("embedding_hu", PGVector(7), nullable=True),
        sa.Column("metric_metadata", StrDict(text_type=sa.Text()), nullable=True),
        sa.CheckConstraint("frame >= 0", name="prediction_analytics_frame"),
        sa.ForeignKeyConstraint(
            ["prediction_hash", "du_hash", "frame", "annotation_hash"],
            [
                "prediction_analytics.prediction_hash",
                "prediction_analytics.du_hash",
                "prediction_analytics.frame",
                "prediction_analytics.annotation_hash",
            ],
            name="fk_prediction_analytics_extra",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["prediction_hash", "project_hash"],
            ["prediction.prediction_hash", "prediction.project_hash"],
            name="fk_prediction_analytics_extra_project",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("prediction_hash", "du_hash", "frame", "annotation_hash"),
    )
    op.create_table(
        "prediction_analytics_reduced",
        sa.Column("reduction_hash", GUID(), nullable=False),
        sa.Column("prediction_hash", GUID(), nullable=False),
        sa.Column("du_hash", GUID(), nullable=False),
        sa.Column("frame", sa.Integer(), nullable=False),
        sa.Column("annotation_hash", Char8(), nullable=False),
        sa.Column("project_hash", GUID(), nullable=False),
        sa.Column("x", sa.REAL(), nullable=False),
        sa.Column("y", sa.REAL(), nullable=False),
        sa.CheckConstraint("frame >= 0", name="prediction_analytics_reduced_frame"),
        sa.ForeignKeyConstraint(
            ["prediction_hash", "du_hash", "frame", "annotation_hash"],
            [
                "prediction_analytics.prediction_hash",
                "prediction_analytics.du_hash",
                "prediction_analytics.frame",
                "prediction_analytics.annotation_hash",
            ],
            name="fk_prediction_analytics_reduced_data",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["prediction_hash", "project_hash"],
            ["prediction.prediction_hash", "prediction.project_hash"],
            name="fk_prediction_analytics_reduced_project",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["reduction_hash", "project_hash"],
            ["project_embedding_reduction.reduction_hash", "project_embedding_reduction.project_hash"],
            name="fk_prediction_analytics_reduced",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("reduction_hash", "prediction_hash", "du_hash", "frame", "annotation_hash"),
    )
    op.create_index(
        "ix_prediction_analytics_reduced_x",
        "prediction_analytics_reduced",
        ["reduction_hash", "prediction_hash", "x", "y"],
        unique=False,
    )
    op.create_index(
        "ix_prediction_analytics_reduced_y",
        "prediction_analytics_reduced",
        ["reduction_hash", "prediction_hash", "y", "x"],
        unique=False,
    )
    op.create_table(
        "prediction_data_units",
        sa.Column("prediction_hash", GUID(), nullable=False),
        sa.Column("du_hash", GUID(), nullable=False),
        sa.Column("frame", sa.Integer(), nullable=False),
        sa.Column("project_hash", GUID(), nullable=False),
        sa.Column("data_hash", GUID(), nullable=False),
        sa.Column("objects", sa.JSON(), nullable=False),
        sa.Column("classifications", sa.JSON(), nullable=False),
        sa.CheckConstraint("frame >= 0", name="prediction_data_units_frame"),
        sa.ForeignKeyConstraint(
            ["prediction_hash", "data_hash"],
            ["prediction_data.prediction_hash", "prediction_data.data_hash"],
            name="fk_prediction_data_units",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["prediction_hash", "project_hash"],
            ["prediction.prediction_hash", "prediction.project_hash"],
            name="fk_prediction_data_units_project",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["project_hash", "du_hash", "frame"],
            ["project_data_units.project_hash", "project_data_units.du_hash", "project_data_units.frame"],
            name="fk_prediction_data_units_data",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("prediction_hash", "du_hash", "frame"),
    )
    op.create_table(
        "project_analytics_annotation",
        sa.Column("project_hash", GUID(), nullable=False),
        sa.Column("du_hash", GUID(), nullable=False),
        sa.Column("frame", sa.Integer(), nullable=False),
        sa.Column("annotation_hash", Char8(), nullable=False),
        sa.Column("feature_hash", Char8(), nullable=False),
        sa.Column("annotation_type", sa.SMALLINT(), nullable=False),
        sa.Column("annotation_user_id", sa.Integer(), nullable=True),
        sa.Column("annotation_manual", sa.Boolean(), nullable=False),
        sa.Column("metric_width", sa.INTEGER(), nullable=True),
        sa.Column("metric_height", sa.INTEGER(), nullable=True),
        sa.Column("metric_area", sa.INTEGER(), nullable=True),
        sa.Column("metric_area_relative", sa.REAL(), nullable=True),
        sa.Column("metric_aspect_ratio", sa.REAL(), nullable=True),
        sa.Column("metric_brightness", sa.REAL(), nullable=True),
        sa.Column("metric_contrast", sa.REAL(), nullable=True),
        sa.Column("metric_sharpness", sa.REAL(), nullable=True),
        sa.Column("metric_red", sa.REAL(), nullable=True),
        sa.Column("metric_green", sa.REAL(), nullable=True),
        sa.Column("metric_blue", sa.REAL(), nullable=True),
        sa.Column("metric_random", sa.REAL(), nullable=True),
        sa.Column("metric_annotation_quality", sa.REAL(), nullable=True),
        sa.Column("metric_max_iou", sa.REAL(), nullable=True),
        sa.Column("metric_border_relative", sa.REAL(), nullable=True),
        sa.Column("metric_polygon_similarity", sa.REAL(), nullable=True),
        sa.Column("metric_missing_or_broken_track", sa.REAL(), nullable=True),
        sa.Column("metric_inconsistent_class", sa.REAL(), nullable=True),
        sa.Column("metric_shape_outlier", sa.REAL(), nullable=True),
        sa.Column("metric_confidence", sa.REAL(), nullable=True),
        sa.Column("metric_custom0", sa.REAL(), nullable=True),
        sa.Column("metric_custom1", sa.REAL(), nullable=True),
        sa.Column("metric_custom2", sa.REAL(), nullable=True),
        sa.Column("metric_custom3", sa.REAL(), nullable=True),
        sa.CheckConstraint("frame >= 0", name="project_analytics_annotation_frame"),
        sa.CheckConstraint(
            "metric_annotation_quality BETWEEN 0.0 AND 1.0", name="project_analytics_annotation_mtc_annotation_quality"
        ),
        sa.CheckConstraint("metric_area >= 0", name="project_analytics_annotation_mtc_area"),
        sa.CheckConstraint(
            "metric_area_relative BETWEEN 0.0 AND 1.0", name="project_analytics_annotation_mtc_area_relative"
        ),
        sa.CheckConstraint("metric_aspect_ratio >= 0.0", name="project_analytics_annotation_mtc_aspect_ratio"),
        sa.CheckConstraint("metric_blue BETWEEN 0.0 AND 1.0", name="project_analytics_annotation_mtc_blue"),
        sa.CheckConstraint(
            "metric_border_relative BETWEEN 0.0 AND 1.0", name="project_analytics_annotation_mtc_border_relative"
        ),
        sa.CheckConstraint("metric_brightness BETWEEN 0.0 AND 1.0", name="project_analytics_annotation_mtc_brightness"),
        sa.CheckConstraint("metric_confidence BETWEEN 0.0 AND 1.0", name="project_analytics_annotation_mtc_confidence"),
        sa.CheckConstraint("metric_contrast BETWEEN 0.0 AND 1.0", name="project_analytics_annotation_mtc_contrast"),
        sa.CheckConstraint("metric_green BETWEEN 0.0 AND 1.0", name="project_analytics_annotation_mtc_green"),
        sa.CheckConstraint("metric_height >= 0", name="project_analytics_annotation_mtc_height"),
        sa.CheckConstraint(
            "metric_inconsistent_class BETWEEN 0.0 AND 1.0", name="project_analytics_annotation_mtc_inconsistent_class"
        ),
        sa.CheckConstraint("metric_max_iou BETWEEN 0.0 AND 1.0", name="project_analytics_annotation_mtc_max_iou"),
        sa.CheckConstraint(
            "metric_missing_or_broken_track BETWEEN 0.0 AND 1.0",
            name="project_analytics_annotation_mtc_missing_or_broken_track",
        ),
        sa.CheckConstraint(
            "metric_polygon_similarity BETWEEN 0.0 AND 1.0", name="project_analytics_annotation_mtc_polygon_similarity"
        ),
        sa.CheckConstraint("metric_random BETWEEN 0.0 AND 1.0", name="project_analytics_annotation_mtc_random"),
        sa.CheckConstraint("metric_red BETWEEN 0.0 AND 1.0", name="project_analytics_annotation_mtc_red"),
        sa.CheckConstraint(
            "metric_shape_outlier BETWEEN 0.0 AND 1.0", name="project_analytics_annotation_mtc_shape_outlier"
        ),
        sa.CheckConstraint("metric_sharpness BETWEEN 0.0 AND 1.0", name="project_analytics_annotation_mtc_sharpness"),
        sa.CheckConstraint("metric_width >= 0", name="project_analytics_annotation_mtc_width"),
        sa.ForeignKeyConstraint(
            ["project_hash", "annotation_user_id"],
            ["project_collaborator.project_hash", "project_collaborator.user_id"],
            name="fk_project_analytics_annotation_user_id",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["project_hash", "du_hash", "frame"],
            ["project_data_units.project_hash", "project_data_units.du_hash", "project_data_units.frame"],
            name="fk_project_analytics_annotation",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("project_hash", "du_hash", "frame", "annotation_hash"),
    )
    op.create_index(
        "ix_project_analytics_annotation_ph_mtc_annotation_quality",
        "project_analytics_annotation",
        ["project_hash", "metric_annotation_quality"],
        unique=False,
    )
    op.create_index(
        "ix_project_analytics_annotation_ph_mtc_area",
        "project_analytics_annotation",
        ["project_hash", "metric_area"],
        unique=False,
    )
    op.create_index(
        "ix_project_analytics_annotation_ph_mtc_area_relative",
        "project_analytics_annotation",
        ["project_hash", "metric_area_relative"],
        unique=False,
    )
    op.create_index(
        "ix_project_analytics_annotation_ph_mtc_aspect_ratio",
        "project_analytics_annotation",
        ["project_hash", "metric_aspect_ratio"],
        unique=False,
    )
    op.create_index(
        "ix_project_analytics_annotation_ph_mtc_blue",
        "project_analytics_annotation",
        ["project_hash", "metric_blue"],
        unique=False,
    )
    op.create_index(
        "ix_project_analytics_annotation_ph_mtc_border_relative",
        "project_analytics_annotation",
        ["project_hash", "metric_border_relative"],
        unique=False,
    )
    op.create_index(
        "ix_project_analytics_annotation_ph_mtc_brightness",
        "project_analytics_annotation",
        ["project_hash", "metric_brightness"],
        unique=False,
    )
    op.create_index(
        "ix_project_analytics_annotation_ph_mtc_confidence",
        "project_analytics_annotation",
        ["project_hash", "metric_confidence"],
        unique=False,
    )
    op.create_index(
        "ix_project_analytics_annotation_ph_mtc_contrast",
        "project_analytics_annotation",
        ["project_hash", "metric_contrast"],
        unique=False,
    )
    op.create_index(
        "ix_project_analytics_annotation_ph_mtc_green",
        "project_analytics_annotation",
        ["project_hash", "metric_green"],
        unique=False,
    )
    op.create_index(
        "ix_project_analytics_annotation_ph_mtc_height",
        "project_analytics_annotation",
        ["project_hash", "metric_height"],
        unique=False,
    )
    op.create_index(
        "ix_project_analytics_annotation_ph_mtc_inconsistent_class",
        "project_analytics_annotation",
        ["project_hash", "metric_inconsistent_class"],
        unique=False,
    )
    op.create_index(
        "ix_project_analytics_annotation_ph_mtc_max_iou",
        "project_analytics_annotation",
        ["project_hash", "metric_max_iou"],
        unique=False,
    )
    op.create_index(
        "ix_project_analytics_annotation_ph_mtc_missing_or_broken_track",
        "project_analytics_annotation",
        ["project_hash", "metric_missing_or_broken_track"],
        unique=False,
    )
    op.create_index(
        "ix_project_analytics_annotation_ph_mtc_polygon_similarity",
        "project_analytics_annotation",
        ["project_hash", "metric_polygon_similarity"],
        unique=False,
    )
    op.create_index(
        "ix_project_analytics_annotation_ph_mtc_random",
        "project_analytics_annotation",
        ["project_hash", "metric_random"],
        unique=False,
    )
    op.create_index(
        "ix_project_analytics_annotation_ph_mtc_red",
        "project_analytics_annotation",
        ["project_hash", "metric_red"],
        unique=False,
    )
    op.create_index(
        "ix_project_analytics_annotation_ph_mtc_shape_outlier",
        "project_analytics_annotation",
        ["project_hash", "metric_shape_outlier"],
        unique=False,
    )
    op.create_index(
        "ix_project_analytics_annotation_ph_mtc_sharpness",
        "project_analytics_annotation",
        ["project_hash", "metric_sharpness"],
        unique=False,
    )
    op.create_index(
        "ix_project_analytics_annotation_ph_mtc_width",
        "project_analytics_annotation",
        ["project_hash", "metric_width"],
        unique=False,
    )
    op.create_table(
        "project_analytics_data",
        sa.Column("project_hash", GUID(), nullable=False),
        sa.Column("du_hash", GUID(), nullable=False),
        sa.Column("frame", sa.Integer(), nullable=False),
        sa.Column("metric_width", sa.INTEGER(), nullable=True),
        sa.Column("metric_height", sa.INTEGER(), nullable=True),
        sa.Column("metric_area", sa.INTEGER(), nullable=True),
        sa.Column("metric_aspect_ratio", sa.REAL(), nullable=True),
        sa.Column("metric_brightness", sa.REAL(), nullable=True),
        sa.Column("metric_contrast", sa.REAL(), nullable=True),
        sa.Column("metric_sharpness", sa.REAL(), nullable=True),
        sa.Column("metric_red", sa.REAL(), nullable=True),
        sa.Column("metric_green", sa.REAL(), nullable=True),
        sa.Column("metric_blue", sa.REAL(), nullable=True),
        sa.Column("metric_random", sa.REAL(), nullable=True),
        sa.Column("metric_object_count", sa.INTEGER(), nullable=True),
        sa.Column("metric_object_density", sa.REAL(), nullable=True),
        sa.Column("metric_image_difficulty", sa.REAL(), nullable=True),
        sa.Column("metric_image_uniqueness", sa.REAL(), nullable=True),
        sa.Column("metric_custom0", sa.REAL(), nullable=True),
        sa.Column("metric_custom1", sa.REAL(), nullable=True),
        sa.Column("metric_custom2", sa.REAL(), nullable=True),
        sa.Column("metric_custom3", sa.REAL(), nullable=True),
        sa.CheckConstraint("frame >= 0", name="project_analytics_data_frame"),
        sa.CheckConstraint("metric_area >= 0", name="project_analytics_data_mtc_area"),
        sa.CheckConstraint("metric_aspect_ratio >= 0.0", name="project_analytics_data_mtc_aspect_ratio"),
        sa.CheckConstraint("metric_blue BETWEEN 0.0 AND 1.0", name="project_analytics_data_mtc_blue"),
        sa.CheckConstraint("metric_brightness BETWEEN 0.0 AND 1.0", name="project_analytics_data_mtc_brightness"),
        sa.CheckConstraint("metric_contrast BETWEEN 0.0 AND 1.0", name="project_analytics_data_mtc_contrast"),
        sa.CheckConstraint("metric_green BETWEEN 0.0 AND 1.0", name="project_analytics_data_mtc_green"),
        sa.CheckConstraint("metric_height >= 0", name="project_analytics_data_mtc_height"),
        sa.CheckConstraint(
            "metric_image_difficulty BETWEEN 0.0 AND 1.0", name="project_analytics_data_mtc_image_difficulty"
        ),
        sa.CheckConstraint(
            "metric_image_uniqueness BETWEEN 0.0 AND 1.0", name="project_analytics_data_mtc_image_uniqueness"
        ),
        sa.CheckConstraint("metric_object_count >= 0", name="project_analytics_data_mtc_object_count"),
        sa.CheckConstraint(
            "metric_object_density BETWEEN 0.0 AND 1.0", name="project_analytics_data_mtc_object_density"
        ),
        sa.CheckConstraint("metric_random BETWEEN 0.0 AND 1.0", name="project_analytics_data_mtc_random"),
        sa.CheckConstraint("metric_red BETWEEN 0.0 AND 1.0", name="project_analytics_data_mtc_red"),
        sa.CheckConstraint("metric_sharpness BETWEEN 0.0 AND 1.0", name="project_analytics_data_mtc_sharpness"),
        sa.CheckConstraint("metric_width >= 0", name="project_analytics_data_mtc_width"),
        sa.ForeignKeyConstraint(
            ["project_hash", "du_hash", "frame"],
            ["project_data_units.project_hash", "project_data_units.du_hash", "project_data_units.frame"],
            name="fk_project_analytics_data",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("project_hash", "du_hash", "frame"),
    )
    op.create_index(
        "ix_project_analytics_data_ph_mtc_area", "project_analytics_data", ["project_hash", "metric_area"], unique=False
    )
    op.create_index(
        "ix_project_analytics_data_ph_mtc_aspect_ratio",
        "project_analytics_data",
        ["project_hash", "metric_aspect_ratio"],
        unique=False,
    )
    op.create_index(
        "ix_project_analytics_data_ph_mtc_blue", "project_analytics_data", ["project_hash", "metric_blue"], unique=False
    )
    op.create_index(
        "ix_project_analytics_data_ph_mtc_brightness",
        "project_analytics_data",
        ["project_hash", "metric_brightness"],
        unique=False,
    )
    op.create_index(
        "ix_project_analytics_data_ph_mtc_contrast",
        "project_analytics_data",
        ["project_hash", "metric_contrast"],
        unique=False,
    )
    op.create_index(
        "ix_project_analytics_data_ph_mtc_green",
        "project_analytics_data",
        ["project_hash", "metric_green"],
        unique=False,
    )
    op.create_index(
        "ix_project_analytics_data_ph_mtc_height",
        "project_analytics_data",
        ["project_hash", "metric_height"],
        unique=False,
    )
    op.create_index(
        "ix_project_analytics_data_ph_mtc_image_difficulty",
        "project_analytics_data",
        ["project_hash", "metric_image_difficulty"],
        unique=False,
    )
    op.create_index(
        "ix_project_analytics_data_ph_mtc_image_uniqueness",
        "project_analytics_data",
        ["project_hash", "metric_image_uniqueness"],
        unique=False,
    )
    op.create_index(
        "ix_project_analytics_data_ph_mtc_object_count",
        "project_analytics_data",
        ["project_hash", "metric_object_count"],
        unique=False,
    )
    op.create_index(
        "ix_project_analytics_data_ph_mtc_object_density",
        "project_analytics_data",
        ["project_hash", "metric_object_density"],
        unique=False,
    )
    op.create_index(
        "ix_project_analytics_data_ph_mtc_random",
        "project_analytics_data",
        ["project_hash", "metric_random"],
        unique=False,
    )
    op.create_index(
        "ix_project_analytics_data_ph_mtc_red", "project_analytics_data", ["project_hash", "metric_red"], unique=False
    )
    op.create_index(
        "ix_project_analytics_data_ph_mtc_sharpness",
        "project_analytics_data",
        ["project_hash", "metric_sharpness"],
        unique=False,
    )
    op.create_index(
        "ix_project_analytics_data_ph_mtc_width",
        "project_analytics_data",
        ["project_hash", "metric_width"],
        unique=False,
    )
    op.create_table(
        "prediction_analytics_fn",
        sa.Column("prediction_hash", GUID(), nullable=False),
        sa.Column("du_hash", GUID(), nullable=False),
        sa.Column("frame", sa.Integer(), nullable=False),
        sa.Column("annotation_hash", Char8(), nullable=False),
        sa.Column("project_hash", GUID(), nullable=False),
        sa.Column("iou_threshold", sa.REAL(), nullable=False),
        sa.Column("feature_hash", Char8(), nullable=False),
        sa.CheckConstraint("frame >= 0", name="prediction_analytics_fn_frame"),
        sa.CheckConstraint(
            "iou_threshold BETWEEN 0.0 AND 1.0 OR iou_threshold = -1.0", name="prediction_analytics_fn_iou_threshold"
        ),
        sa.ForeignKeyConstraint(
            ["prediction_hash", "project_hash"],
            ["prediction.prediction_hash", "prediction.project_hash"],
            name="fk_prediction_analytics_fn_project",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["project_hash", "du_hash", "frame", "annotation_hash"],
            [
                "project_analytics_annotation.project_hash",
                "project_analytics_annotation.du_hash",
                "project_analytics_annotation.frame",
                "project_analytics_annotation.annotation_hash",
            ],
            name="fk_prediction_analytics_fn",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("prediction_hash", "du_hash", "frame", "annotation_hash", "feature_hash"),
    )
    op.create_index(
        "fk_prediction_analytics_fn_feature_hash",
        "prediction_analytics_fn",
        ["prediction_hash", "feature_hash"],
        unique=False,
    )
    op.create_table(
        "project_analytics_annotation_derived",
        sa.Column("project_hash", GUID(), nullable=False),
        sa.Column("du_hash", GUID(), nullable=False),
        sa.Column("frame", sa.Integer(), nullable=False),
        sa.Column("annotation_hash", Char8(), nullable=False),
        sa.Column("distance_metric", sa.SMALLINT(), nullable=False),
        sa.Column("distance_index", sa.SMALLINT(), nullable=False),
        sa.Column("similarity", sa.REAL(), nullable=True),
        sa.Column("dep_du_hash", GUID(), nullable=False),
        sa.Column("dep_frame", sa.Integer(), nullable=False),
        sa.Column("dep_annotation_hash", Char8(), nullable=False),
        sa.CheckConstraint("frame >= 0", name="project_analytics_annotation_derived_frame"),
        sa.ForeignKeyConstraint(
            ["project_hash", "du_hash", "frame", "annotation_hash"],
            [
                "project_analytics_annotation.project_hash",
                "project_analytics_annotation.du_hash",
                "project_analytics_annotation.frame",
                "project_analytics_annotation.annotation_hash",
            ],
            name="fk_project_analytics_annotation_derived",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint(
            "project_hash", "du_hash", "frame", "annotation_hash", "distance_metric", "distance_index"
        ),
    )
    op.create_table(
        "project_analytics_annotation_extra",
        sa.Column("project_hash", GUID(), nullable=False),
        sa.Column("du_hash", GUID(), nullable=False),
        sa.Column("frame", sa.Integer(), nullable=False),
        sa.Column("annotation_hash", Char8(), nullable=False),
        sa.Column("embedding_clip", PGVector(512), nullable=True),
        sa.Column("embedding_hu", PGVector(7), nullable=True),
        sa.Column("metric_metadata", StrDict(text_type=sa.Text()), nullable=True),
        sa.CheckConstraint("frame >= 0", name="project_analytics_annotation_extra_frame"),
        sa.ForeignKeyConstraint(
            ["project_hash", "du_hash", "frame", "annotation_hash"],
            [
                "project_analytics_annotation.project_hash",
                "project_analytics_annotation.du_hash",
                "project_analytics_annotation.frame",
                "project_analytics_annotation.annotation_hash",
            ],
            name="fk_project_analytics_annotation_extra",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("project_hash", "du_hash", "frame", "annotation_hash"),
    )
    op.create_table(
        "project_analytics_annotation_reduced",
        sa.Column("reduction_hash", GUID(), nullable=False),
        sa.Column("project_hash", GUID(), nullable=False),
        sa.Column("du_hash", GUID(), nullable=False),
        sa.Column("frame", sa.Integer(), nullable=False),
        sa.Column("annotation_hash", Char8(), nullable=False),
        sa.Column("x", sa.REAL(), nullable=False),
        sa.Column("y", sa.REAL(), nullable=False),
        sa.CheckConstraint("frame >= 0", name="project_analytics_annotation_reduced_frame"),
        sa.ForeignKeyConstraint(
            ["project_hash", "du_hash", "frame", "annotation_hash"],
            [
                "project_analytics_annotation.project_hash",
                "project_analytics_annotation.du_hash",
                "project_analytics_annotation.frame",
                "project_analytics_annotation.annotation_hash",
            ],
            name="fk_project_analytics_annotation_reduced",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["reduction_hash"],
            ["project_embedding_reduction.reduction_hash"],
            name="fk_project_analytics_annotation_reduced_reduction",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("reduction_hash", "project_hash", "du_hash", "frame", "annotation_hash"),
    )
    op.create_index(
        "ix_project_analytics_annotation_reduced_x",
        "project_analytics_annotation_reduced",
        ["reduction_hash", "project_hash", "x", "y"],
        unique=False,
    )
    op.create_index(
        "ix_project_analytics_annotation_reduced_y",
        "project_analytics_annotation_reduced",
        ["reduction_hash", "project_hash", "y", "x"],
        unique=False,
    )
    op.create_table(
        "project_analytics_data_derived",
        sa.Column("project_hash", GUID(), nullable=False),
        sa.Column("du_hash", GUID(), nullable=False),
        sa.Column("frame", sa.Integer(), nullable=False),
        sa.Column("distance_metric", sa.SMALLINT(), nullable=False),
        sa.Column("distance_index", sa.SMALLINT(), nullable=False),
        sa.Column("similarity", sa.REAL(), nullable=True),
        sa.Column("dep_du_hash", GUID(), nullable=False),
        sa.Column("dep_frame", sa.Integer(), nullable=False),
        sa.CheckConstraint("frame >= 0", name="project_analytics_data_derived_frame"),
        sa.ForeignKeyConstraint(
            ["project_hash", "du_hash", "frame"],
            ["project_analytics_data.project_hash", "project_analytics_data.du_hash", "project_analytics_data.frame"],
            name="fk_project_analytics_data_derived",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("project_hash", "du_hash", "frame", "distance_metric", "distance_index"),
    )
    op.create_table(
        "project_analytics_data_extra",
        sa.Column("project_hash", GUID(), nullable=False),
        sa.Column("du_hash", GUID(), nullable=False),
        sa.Column("frame", sa.Integer(), nullable=False),
        sa.Column("embedding_clip", PGVector(512), nullable=True),
        sa.Column("metric_metadata", StrDict(text_type=sa.Text()), nullable=True),
        sa.CheckConstraint("frame >= 0", name="project_analytics_data_extra_frame"),
        sa.ForeignKeyConstraint(
            ["project_hash", "du_hash", "frame"],
            ["project_analytics_data.project_hash", "project_analytics_data.du_hash", "project_analytics_data.frame"],
            name="fk_project_analytics_data_extra",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("project_hash", "du_hash", "frame"),
    )
    op.create_table(
        "project_analytics_data_reduced",
        sa.Column("reduction_hash", GUID(), nullable=False),
        sa.Column("project_hash", GUID(), nullable=False),
        sa.Column("du_hash", GUID(), nullable=False),
        sa.Column("frame", sa.Integer(), nullable=False),
        sa.Column("x", sa.REAL(), nullable=False),
        sa.Column("y", sa.REAL(), nullable=False),
        sa.CheckConstraint("frame >= 0", name="project_analytics_data_reduced_frame"),
        sa.ForeignKeyConstraint(
            ["project_hash", "du_hash", "frame"],
            ["project_analytics_data.project_hash", "project_analytics_data.du_hash", "project_analytics_data.frame"],
            name="fk_project_analytics_data_reduced",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["reduction_hash"],
            ["project_embedding_reduction.reduction_hash"],
            name="fk_project_analytics_data_reduced_reduction",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("reduction_hash", "project_hash", "du_hash", "frame"),
    )
    op.create_index(
        "ix_project_analytics_data_reduced_x",
        "project_analytics_data_reduced",
        ["reduction_hash", "project_hash", "x", "y"],
        unique=False,
    )
    op.create_index(
        "ix_project_analytics_data_reduced_y",
        "project_analytics_data_reduced",
        ["reduction_hash", "project_hash", "y", "x"],
        unique=False,
    )
    op.create_table(
        "project_tagged_annotation",
        sa.Column("project_hash", GUID(), nullable=False),
        sa.Column("du_hash", GUID(), nullable=False),
        sa.Column("frame", sa.Integer(), nullable=False),
        sa.Column("annotation_hash", Char8(), nullable=False),
        sa.Column("tag_hash", GUID(), nullable=False),
        sa.CheckConstraint("frame >= 0", name="project_tagged_annotation_frame"),
        sa.ForeignKeyConstraint(
            ["project_hash", "du_hash", "frame", "annotation_hash"],
            [
                "project_analytics_annotation.project_hash",
                "project_analytics_annotation.du_hash",
                "project_analytics_annotation.frame",
                "project_analytics_annotation.annotation_hash",
            ],
            name="fk_project_tagged_annotation",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["tag_hash"],
            ["project_tags.tag_hash"],
            name="fk_project_tagged_annotation_tag",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("project_hash", "du_hash", "frame", "annotation_hash", "tag_hash"),
    )
    op.create_table(
        "project_tagged_data",
        sa.Column("project_hash", GUID(), nullable=False),
        sa.Column("du_hash", GUID(), nullable=False),
        sa.Column("frame", sa.Integer(), nullable=False),
        sa.Column("tag_hash", GUID(), nullable=False),
        sa.CheckConstraint("frame >= 0", name="project_tagged_data_frame"),
        sa.ForeignKeyConstraint(
            ["project_hash", "du_hash", "frame"],
            ["project_analytics_data.project_hash", "project_analytics_data.du_hash", "project_analytics_data.frame"],
            name="fk_project_tagged_data",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["tag_hash"],
            ["project_tags.tag_hash"],
            name="fk_project_tagged_data_tag",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("project_hash", "du_hash", "frame", "tag_hash"),
    )
    # ### end Alembic commands ###
    bind = op.get_bind()
    if bind.engine.name == "sqlite":
        migrate_sqlite_database_to_new_schema()


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("project_tagged_data")
    op.drop_table("project_tagged_annotation")
    op.drop_index("project_prediction_unmatched_feature_hash_index", table_name="project_prediction_analytics_fn")
    op.drop_table("project_prediction_analytics_fn")
    op.drop_index("project_analytics_data_reduced_y", table_name="project_analytics_data_reduced")
    op.drop_index("project_analytics_data_reduced_x", table_name="project_analytics_data_reduced")
    op.drop_table("project_analytics_data_reduced")
    op.drop_table("project_analytics_data_extra")
    op.drop_index("project_analytics_annotation_reduced_y", table_name="project_analytics_annotation_reduced")
    op.drop_index("project_analytics_annotation_reduced_x", table_name="project_analytics_annotation_reduced")
    op.drop_table("project_analytics_annotation_reduced")
    op.drop_table("project_analytics_annotation_extra")
    op.drop_table("project_prediction_data_units")
    op.drop_index("project_analytics_prediction_reduced_y", table_name="project_prediction_analytics_reduced")
    op.drop_index("project_analytics_prediction_reduced_x", table_name="project_prediction_analytics_reduced")
    op.drop_table("project_prediction_analytics_reduced")
    op.drop_table("project_prediction_analytics_extra")
    op.drop_index("data_ph_metric_width_index", table_name="project_analytics_data")
    op.drop_index("data_ph_metric_sharpness_index", table_name="project_analytics_data")
    op.drop_index("data_ph_metric_red_index", table_name="project_analytics_data")
    op.drop_index("data_ph_metric_random_index", table_name="project_analytics_data")
    op.drop_index("data_ph_metric_object_density_index", table_name="project_analytics_data")
    op.drop_index("data_ph_metric_object_count_index", table_name="project_analytics_data")
    op.drop_index("data_ph_metric_image_uniqueness_index", table_name="project_analytics_data")
    op.drop_index("data_ph_metric_image_difficulty_index", table_name="project_analytics_data")
    op.drop_index("data_ph_metric_height_index", table_name="project_analytics_data")
    op.drop_index("data_ph_metric_green_index", table_name="project_analytics_data")
    op.drop_index("data_ph_metric_contrast_index", table_name="project_analytics_data")
    op.drop_index("data_ph_metric_brightness_index", table_name="project_analytics_data")
    op.drop_index("data_ph_metric_blue_index", table_name="project_analytics_data")
    op.drop_index("data_ph_metric_aspect_ratio_index", table_name="project_analytics_data")
    op.drop_index("data_ph_metric_area_index", table_name="project_analytics_data")
    op.drop_table("project_analytics_data")
    op.drop_index("annotate_ph_metric_width_index", table_name="project_analytics_annotation")
    op.drop_index("annotate_ph_metric_sharpness_index", table_name="project_analytics_annotation")
    op.drop_index("annotate_ph_metric_red_index", table_name="project_analytics_annotation")
    op.drop_index("annotate_ph_metric_random_index", table_name="project_analytics_annotation")
    op.drop_index("annotate_ph_metric_missing_or_broken_track_index", table_name="project_analytics_annotation")
    op.drop_index("annotate_ph_metric_max_iou_index", table_name="project_analytics_annotation")
    op.drop_index("annotate_ph_metric_label_shape_outlier_index", table_name="project_analytics_annotation")
    op.drop_index("annotate_ph_metric_label_poly_similarity_index", table_name="project_analytics_annotation")
    op.drop_index("annotate_ph_metric_inconsistent_class_index", table_name="project_analytics_annotation")
    op.drop_index("annotate_ph_metric_height_index", table_name="project_analytics_annotation")
    op.drop_index("annotate_ph_metric_green_index", table_name="project_analytics_annotation")
    op.drop_index("annotate_ph_metric_contrast_index", table_name="project_analytics_annotation")
    op.drop_index("annotate_ph_metric_confidence_index", table_name="project_analytics_annotation")
    op.drop_index("annotate_ph_metric_brightness_index", table_name="project_analytics_annotation")
    op.drop_index("annotate_ph_metric_border_relative_index", table_name="project_analytics_annotation")
    op.drop_index("annotate_ph_metric_blue_index", table_name="project_analytics_annotation")
    op.drop_index("annotate_ph_metric_aspect_ratio_index", table_name="project_analytics_annotation")
    op.drop_index("annotate_ph_metric_area_relative_index", table_name="project_analytics_annotation")
    op.drop_index("annotate_ph_metric_area_index", table_name="project_analytics_annotation")
    op.drop_index("annotate_ph_metric_annotation_quality_index", table_name="project_analytics_annotation")
    op.drop_table("project_analytics_annotation")
    op.drop_table("project_prediction_data")
    op.drop_index("project_prediction_feature_confidence_index", table_name="project_prediction_analytics")
    op.drop_index("project_prediction_confidence_index", table_name="project_prediction_analytics")
    op.drop_table("project_prediction_analytics")
    op.drop_table("project_data_units")
    op.drop_table("project_tags")
    op.drop_index("project_prediction_project_uq", table_name="project_prediction")
    op.drop_table("project_prediction")
    op.drop_table("project_import")
    op.drop_index("project_embedding_reduction_ph_idx", table_name="project_embedding_reduction")
    op.drop_table("project_embedding_reduction")
    op.drop_table("project_embedding_index")
    op.drop_table("project_data")
    op.drop_table("project_collaborator")
    op.drop_table("project")
    # ### end Alembic commands ###
    pass


def _transform_char8(value: Optional[str]) -> Optional[int]:
    if value is None:
        return None
    if len(value) != 8:
        raise ValueError(f"{value} is an invalid 8byte hash")
    value_bytes = value.encode("ascii")
    return int.from_bytes(value_bytes, byteorder="little", signed=True)


def _transform_clamp_normal(value: float) -> float:
    if math.isnan(value):
        return 0.0
    elif math.isinf(value):
        return 1.0 if value > 0.0 else 0.0
    else:
        return min(max(value, 0.0), 1.0)


_annotation_type_migrate_mapping = {
    "CLASSIFICATION": 0,
    "BOUNDING_BOX": 1,
    "ROT_BOUNDING_BOX": 2,
    "POINT": 3,
    "POLYLINE": 4,
    "POLYGON": 5,
    "SKELETON": 6,
    "BITMASK": 7,
}


def _transform_annotation_type(value: str) -> int:
    return _annotation_type_migrate_mapping[value]


TransformObjectHash = ("annotation_hash", _transform_char8)
TransformFeatureHash = (None, _transform_char8)
TransformClampNormal = (None, _transform_clamp_normal)
TransformAnnotationType = (None, _transform_annotation_type)


def _sqlite_insert(table: str, values: list[dict], batch: int = 100) -> None:
    bind = op.get_bind()
    for i in tqdm(range(0, len(values), batch), desc=f"Migrating: {table}"):
        insert_dict_slice = values[i : i + batch]
        sorted_keys = sorted(values[0].keys())
        value_list = [f"({', '.join([f':v{i}{k}' for k in sorted_keys])})" for i, _dict in enumerate(insert_dict_slice)]
        value_params = {
            f"v{i}{k}": insert_dict[k] for i, insert_dict in enumerate(insert_dict_slice) for k in sorted_keys
        }
        bind.execute(f"INSERT INTO {table}({', '.join(sorted_keys)}) VALUES {', '.join(value_list)}", **value_params)
        bind.execute("COMMIT")  # FIXME: disable later


def _sqlite_migrate(
    from_table: str,
    to_table: str,
    rename: Optional[Dict[str, str]] = None,
    transform: Optional[Dict[str, Tuple[Optional[str], Callable]]] = None,
    define: Optional[Dict[str, Union[str, int]]] = None,
    drop: Optional[Set[str]] = None,
    mutate: Optional[Callable[[Dict], None]] = None,
    store_to_db: bool = True,
) -> None:
    bind = op.get_bind()
    results = bind.execute(f"SELECT * FROM {from_table}").all()

    # FIXME: delete this line
    bind.execute(f"DELETE FROM {to_table}")
    bind.execute("COMMIT")

    results_dict_list = [dict(r) for r in results]

    # Transform results
    for result_dict in results_dict_list:
        if rename is not None:
            for rename_from, rename_to in rename.items():
                result_dict[rename_to] = result_dict.pop(rename_from)
        if transform is not None:
            for transform_from, (transform_to, transform_op) in transform.items():
                result_dict[transform_to if transform_to is not None else transform_from] = transform_op(
                    result_dict.pop(transform_from)
                )
        if define is not None:
            for define_key, define_value in define.items():
                result_dict[define_key] = define_value
        if drop is not None:
            for drop_key in drop:
                result_dict.pop(drop_key)
        if mutate is not None:
            mutate(result_dict)

    if len(results_dict_list) > 0:
        bind.execute(f"SELECT {', '.join(sorted(results_dict_list[0].keys()))} FROM {to_table} LIMIT 1").all()

    # Insert new data into database
    if store_to_db:
        _sqlite_insert(to_table, results_dict_list)


def migrate_sqlite_database_to_new_schema():
    # Disable FK constraints
    bind = op.get_bind()

    ontology_feature_hash_to_color_lookup: Dict[Tuple[str, str], str] = {}

    ontology_feature_hash_to_answers_lookup: Dict[Tuple[str, str], Tuple[str, dict]] = {}

    def _ontology_option(opt: dict, project_hash: str, parent_feature: str, parent_color: str) -> None:
        ontology_feature_hash_to_color_lookup[project_hash, opt["featureNodeHash"]] = parent_color
        answers = {
            "classifications": [
                {
                    "featureHash": opt["featureNodeHash"],
                }
            ]
        }
        ontology_feature_hash_to_answers_lookup[project_hash, opt["featureNodeHash"]] = (parent_feature, answers)

    def _ontology_attribute(attrib: dict, project_hash: str, parent_feature: str, parent_color: str) -> None:
        ontology_feature_hash_to_color_lookup[project_hash, attrib["featureNodeHash"]] = parent_color
        if attrib["type"] == "radio":
            # Only support ontology type for prediction re-construction.
            for opt in attrib["options"]:
                _ontology_option(opt, project_hash, parent_feature, parent_color)

    def _mutate_store_ontology_metadata(value: dict) -> None:
        ontology_dict = json.loads(value["ontology"])
        project_hash = value["project_hash"]
        for obj in ontology_dict["objects"]:
            ontology_feature_hash_to_color_lookup[project_hash, obj["featureNodeHash"]] = obj["color"]
        for cls in ontology_dict["classifications"]:
            ontology_feature_hash_to_color_lookup[project_hash, cls["featureNodeHash"]] = cls.get("color", "#E27300")
            for attrib in cls.get("attributes", []):
                _ontology_attribute(attrib, project_hash, cls["featureNodeHash"], cls.get("color", "#E27300"))

    # Run table migration logic
    _sqlite_migrate(
        "active_project",
        "project",
        rename={"project_name": "name", "project_description": "description", "project_ontology": "ontology"},
        transform={"project_remote_ssh_key_path": ("remote", lambda x: x is not None)},
        mutate=_mutate_store_ontology_metadata,
    )

    data_title_dict: Dict[str, str] = {}
    data_type_dict: Dict[str, str] = {}
    migrate_now = datetime.now()

    def _mutate_project_data(data: dict) -> None:
        label_row_json = json.loads(data.pop("label_row_json"))
        data["data_title"] = label_row_json["data_title"]
        data["data_type"] = label_row_json["data_type"]
        data["created_at"] = (
            datetime.fromisoformat(label_row_json["created_at"]) if "created_at" in label_row_json else migrate_now
        )
        data["last_edited_at"] = (
            datetime.fromisoformat(label_row_json["last_edited_at"])
            if "last_edited_at" in label_row_json
            else migrate_now
        )
        data["object_answers"] = json.dumps(label_row_json["object_answers"])
        data["classification_answers"] = json.dumps(label_row_json["classification_answers"])
        # lookup failure:
        data_title_dict[data["data_hash"]] = label_row_json["data_title"]
        data_type_dict[data["data_hash"]] = label_row_json["data_type"]
        for du_entry in data.get("data_units", {}).values():
            du_hash = du_entry["data_hash"]
            if du_hash != data["data_hash"]:
                data_title_dict[du_hash] = du_entry["data_title"]
                data_type_dict[du_hash] = du_entry["data_type"]

    _sqlite_migrate("active_project_data", "project_data", mutate=_mutate_project_data)

    _du_hash_to_data_hash = {}

    def _mutate_project_data_unit(data: dict) -> None:
        data["data_title"] = data_title_dict.get(data["du_hash"], "unknown")
        data["data_type"] = data_type_dict.get(data["du_hash"], "unknown")
        _du_hash_to_data_hash[data["du_hash"]] = data["data_hash"]

    _sqlite_migrate("active_project_data_units", "project_data_units", mutate=_mutate_project_data_unit)

    # Extract emails
    all_emails = set(
        bind.execute(
            "SELECT project_hash, annotation_email FROM active_project_analytics_annotation "
            "GROUP BY project_hash, annotation_email"
        ).all()
    )
    ph_to_emails_set: Dict[str, List[str]] = {}
    for ph, email in all_emails:
        ph_email_list = ph_to_emails_set.setdefault(ph, ["robot@encord.com"])
        if email == "robot@encord.com":
            continue
        ph_email_list.append(email)
    ph_to_user_id_lookup = {
        (ph, email): user_id for ph, email_list in ph_to_emails_set.items() for user_id, email in enumerate(email_list)
    }
    op.get_bind().execute("DELETE FROM project_collaborator")
    op.get_bind().execute("COMMIT")
    _sqlite_insert(
        "project_collaborator",
        [
            {"project_hash": ph, "user_id": user_id, "user_email": email}
            for (ph, email), user_id in ph_to_user_id_lookup.items()
        ],
    )

    def _transform_user_email(value: dict) -> None:
        value["annotation_user_id"] = ph_to_user_id_lookup[
            value["project_hash"], value.pop("annotation_email") or "robot@encord.com"
        ]

    _sqlite_migrate("active_project_embedding_reduction", "project_embedding_reduction")

    _sqlite_migrate(
        "active_project_analytics_annotation",
        "project_analytics_annotation",
        mutate=_transform_user_email,
        rename={
            "metric_label_border_closeness": "metric_border_relative",
            "metric_label_confidence": "metric_confidence",
            "metric_label_duplicates": "metric_max_iou",
            "metric_label_inconsistent_classification_and_track": "metric_inconsistent_class",
            "metric_label_missing_or_broken_tracks": "metric_missing_or_broken_track",
            "metric_label_poly_similarity": "metric_polygon_similarity",
            "metric_label_shape_outlier": "metric_shape_outlier",
        },
        transform={
            "object_hash": TransformObjectHash,
            "feature_hash": TransformFeatureHash,
            "annotation_type": TransformAnnotationType,
        },
        drop={"embedding_clip", "embedding_hu"},
    )
    _sqlite_migrate(
        "active_project_analytics_annotation_extra",
        "project_analytics_annotation_extra",
        transform={"object_hash": TransformObjectHash},
    )
    _sqlite_migrate(
        "active_project_analytics_annotation_reduced",
        "project_analytics_annotation_reduced",
        transform={"object_hash": TransformObjectHash},
    )

    _sqlite_migrate(
        "active_project_analytics_data",
        "project_analytics_data",
        rename={
            "metric_image_singularity": "metric_image_uniqueness",
        },
        transform={
            "metric_image_difficulty": TransformClampNormal,
        },
    )
    _sqlite_migrate("active_project_analytics_data_extra", "project_analytics_data_extra", drop={"embedding_hu"})
    _sqlite_migrate("active_project_analytics_data_reduced", "project_analytics_data_reduced")

    _sqlite_migrate("active_project_tags", "project_tags")
    _sqlite_migrate("active_project_tagged_annotation", "project_tagged_annotation")
    _sqlite_migrate("active_project_tagged_data", "project_tagged_data")

    _prediction_to_project_hash = {}

    def _save_prediction_to_project_hash(value: dict) -> None:
        _prediction_to_project_hash[value["prediction_hash"]] = value["project_hash"]

    def load_prediction_to_project_hash(value: dict) -> None:
        value["project_hash"] = _prediction_to_project_hash[value["prediction_hash"]]

    _sqlite_migrate("active_project_prediction", "prediction", mutate=_save_prediction_to_project_hash)

    _prediction_annotations = {}

    def _cache_annotation_ty_1(value: dict) -> None:
        annotation_type = value["annotation_type"]
        feature_hash = value["feature_hash"]
        confidence = value["metric_confidence"]
        key = (value["prediction_hash"], value["du_hash"], value["frame"], value["annotation_hash"])
        _prediction_annotations[key] = (annotation_type, feature_hash, confidence, None)

    def _cache_annotation_ty_2(value: dict) -> None:
        load_prediction_to_project_hash(value)
        annotation_bytes = value.pop("annotation_bytes")
        key = (value["prediction_hash"], value["du_hash"], value["frame"], value["annotation_hash"])
        annotation_ty, feature_hash, confidence, _ignore = _prediction_annotations[key]
        _prediction_annotations[key] = (annotation_ty, feature_hash, confidence, annotation_bytes)

    _sqlite_migrate(
        "active_project_prediction_analytics",
        "prediction_analytics",
        transform={
            "object_hash": TransformObjectHash,
            "match_object_hash": ("match_annotation_hash", _transform_char8),
            "feature_hash": TransformFeatureHash,
            "match_feature_hash": TransformFeatureHash,
            "annotation_type": TransformAnnotationType,
        },
        rename={
            "metric_label_border_closeness": "metric_border_relative",
            "metric_label_confidence": "metric_confidence",
            "metric_label_duplicates": "metric_max_iou",
            "metric_label_inconsistent_classification_and_track": "metric_inconsistent_class",
            "metric_label_missing_or_broken_tracks": "metric_missing_or_broken_track",
            "metric_label_poly_similarity": "metric_polygon_similarity",
            "metric_label_shape_outlier": "metric_shape_outlier",
        },
        mutate=_cache_annotation_ty_1,
        store_to_db=False,
    )
    _sqlite_migrate(
        "active_project_prediction_analytics_extra",
        "prediction_analytics_extra",
        transform={
            "object_hash": TransformObjectHash,
        },
        mutate=_cache_annotation_ty_2,
        store_to_db=False,
    )

    op.get_bind().execute("DELETE FROM prediction_data")
    op.get_bind().execute("DELETE FROM prediction_data_units")
    op.get_bind().execute("COMMIT")
    prediction_data = {}
    prediction_data_units = {}
    for key, (annotation_type, feature_hash, confidence, annotation_bytes) in _prediction_annotations.items():
        prediction_hash, du_hash, frame, annotation_hash = key
        feature_hash_str = feature_hash.to_bytes(length=8, byteorder="little", signed=True).decode("ascii")
        project_hash = _prediction_to_project_hash[prediction_hash]
        predict_data_entry = prediction_data.setdefault(
            (prediction_hash, _du_hash_to_data_hash[du_hash]),
            {
                "prediction_hash": prediction_hash,
                "data_hash": _du_hash_to_data_hash[du_hash],
                "project_hash": project_hash,
                "label_hash": str(uuid.uuid4()).replace("-", ""),
                "created_at": migrate_now,
                "last_edited_at": migrate_now,
                "object_answers": {},
                "classification_answers": {},
            },
        )
        if annotation_type != _annotation_type_migrate_mapping["CLASSIFICATION"]:
            predict_data_entry["object_answers"][annotation_hash] = {
                "objectHash": annotation_hash,
                "classifications": [],
            }
        else:
            predict_data_entry["classification_answers"][annotation_hash] = {
                "classificationHash": annotation_hash,
                "classifications": [],
            }

        predict_du_entry = prediction_data_units.setdefault(
            (prediction_hash, du_hash, frame),
            {
                "prediction_hash": prediction_hash,
                "du_hash": du_hash,
                "frame": frame,
                "project_hash": project_hash,
                "data_hash": _du_hash_to_data_hash[du_hash],
                "objects": [],
                "classifications": [],
            },
        )
        if annotation_type == _annotation_type_migrate_mapping["CLASSIFICATION"]:
            root_feature_hash, feature_hash_answers = ontology_feature_hash_to_answers_lookup[
                project_hash, feature_hash_str
            ]
            for k, v in feature_hash_answers.items():
                predict_data_entry["classification_answers"][annotation_hash][k] = v
            predict_du_entry["classifications"].append(
                {
                    "confidence": float(confidence),
                    "featureHash": root_feature_hash,
                    "classificationHash": annotation_hash,
                    "manualAnnotation": False,
                }
            )
        else:
            if annotation_type == _annotation_type_migrate_mapping["BOUNDING_BOX"]:
                predict_shape = "bounding_box"
                x1, y1, x2, y2 = np.frombuffer(annotation_bytes, dtype=np.single).tolist()
                predict_format = {"x": x1, "y": y1, "w": x2 - x1, "h": y2 - y1}
            elif annotation_type == _annotation_type_migrate_mapping["POLYGON"]:
                predict_shape = "polygon"
                poly_list: List[float] = np.frombuffer(annotation_bytes, dtype=np.single).tolist()
                predict_format = {}
                for i in range(0, len(poly_list), 2):
                    predict_format[str(len(predict_format))] = {"x": poly_list[i], "y": poly_list[i + 1]}
            elif annotation_type == _annotation_type_migrate_mapping["BITMASK"]:
                predict_shape = "bitmask"
                # FIXME: the official encord format is a string
                print(f"WARNING: bitmask prediction migration is kinda incorrect")
                predict_format = np.frombuffer(annotation_bytes, dtype=np.int_).tolist()
            else:
                raise ValueError(f"Unknown annotation type: {annotation_type}")

            predict_du_entry["objects"].append(
                {
                    "color": ontology_feature_hash_to_color_lookup[project_hash, feature_hash_str],
                    "confidence": float(confidence),
                    "objectHash": annotation_hash,
                    "featureHash": feature_hash_str,
                    "shape": predict_shape,
                    "manualAnnotation": False,
                    predict_shape: predict_format,
                }
            )

    for v in prediction_data.values():
        v["classification_answers"] = json.dumps(v["classification_answers"])
        v["object_answers"] = json.dumps(v["object_answers"])

    for v in prediction_data_units.values():
        v["objects"] = json.dumps(v["objects"])
        v["classifications"] = json.dumps(v["classifications"])

    _sqlite_insert("prediction_data", list(prediction_data.values()))
    _sqlite_insert("prediction_data_units", list(prediction_data_units.values()))

    _sqlite_migrate(
        "active_project_prediction_analytics",
        "prediction_analytics",
        transform={
            "object_hash": TransformObjectHash,
            "match_object_hash": ("match_annotation_hash", _transform_char8),
            "feature_hash": TransformFeatureHash,
            "match_feature_hash": TransformFeatureHash,
            "annotation_type": TransformAnnotationType,
        },
        rename={
            "metric_label_border_closeness": "metric_border_relative",
            "metric_label_confidence": "metric_confidence",
            "metric_label_duplicates": "metric_max_iou",
            "metric_label_inconsistent_classification_and_track": "metric_inconsistent_class",
            "metric_label_missing_or_broken_tracks": "metric_missing_or_broken_track",
            "metric_label_poly_similarity": "metric_polygon_similarity",
            "metric_label_shape_outlier": "metric_shape_outlier",
        },
    )
    _sqlite_migrate(
        "active_project_prediction_analytics_extra",
        "prediction_analytics_extra",
        transform={
            "object_hash": TransformObjectHash,
        },
        drop={"annotation_bytes"},
        mutate=load_prediction_to_project_hash,
    )
    _sqlite_migrate(
        "active_project_prediction_analytics_false_negatives",
        "prediction_analytics_fn",
        transform={"object_hash": TransformObjectHash, "feature_hash": TransformFeatureHash},
        drop={
            "annotation_email",
            "annotation_manual",
            "annotation_type",
            "metric_annotation_quality",
            "metric_area",
            "metric_area_relative",
            "metric_aspect_ratio",
            "metric_blue",
            "metric_brightness",
            "metric_contrast",
            "metric_custom0",
            "metric_custom1",
            "metric_custom2",
            "metric_custom3",
            "metric_green",
            "metric_height",
            "metric_label_border_closeness",
            "metric_label_confidence",
            "metric_label_duplicates",
            "metric_label_inconsistent_classification_and_track",
            "metric_label_missing_or_broken_tracks",
            "metric_label_poly_similarity",
            "metric_label_shape_outlier",
            "metric_random",
            "metric_red",
            "metric_sharpness",
            "metric_width",
        },
        mutate=load_prediction_to_project_hash,
    )
    _sqlite_migrate(
        "active_project_prediction_analytics_reduced",
        "prediction_analytics_reduced",
        mutate=load_prediction_to_project_hash,
    )

    for prediction_hash, project_hash in tqdm(
        _prediction_to_project_hash.items(), desc="Populating prediction reduction"
    ):
        count = bind.execute(
            "SELECT COUNT(*) FROM prediction_analytics_reduced WHERE prediction_hash = :prediction_hash",
            prediction_hash=prediction_hash,
        ).scalar()
        if count == 0:
            sql = (
                "INSERT INTO prediction_analytics_reduced( "
                "   reduction_hash, prediction_hash, du_hash, frame, annotation_hash, project_hash, x, y "
                ") SELECT r.reduction_hash, a.prediction_hash, a.du_hash, a.frame, a.annotation_hash, a.project_hash, r.x, r.y "
                "FROM project_analytics_data_reduced r, prediction_analytics a "
                "WHERE r.project_hash = :project_hash "
                "AND a.prediction_hash = :prediction_hash "
                "AND a.project_hash = :project_hash "
                "AND a.du_hash == r.du_hash "
                "AND a.frame == r.frame "
            )
            bind.execute(sql, project_hash=project_hash, prediction_hash=prediction_hash)

    # Drop all tables & indices.
    op.drop_table("active_project_prediction_analytics_extra")
    op.drop_table("active_project_prediction_analytics_false_negatives")
    op.drop_table("active_project_prediction_analytics_reduced")
    op.drop_table("active_project_prediction_analytics")
    op.drop_table("active_project_prediction")
    op.drop_table("active_project_analytics_annotation_extra")
    op.drop_table("active_project_analytics_annotation_reduced")
    op.drop_table("active_project_analytics_annotation")
    op.drop_table("active_project_analytics_data_extra")
    op.drop_table("active_project_analytics_data_reduced")
    op.drop_table("active_project_analytics_data")
    op.drop_table("active_project_embedding_reduction")
    op.drop_table("active_project_tagged_annotation")
    op.drop_table("active_project_tagged_data")
    op.drop_table("active_project_tags")
    op.drop_table("active_project_data_units")
    op.drop_table("active_project_data")
    op.drop_table("active_project")
