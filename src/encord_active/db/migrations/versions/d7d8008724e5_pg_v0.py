"""pg_v0

Revision ID: d7d8008724e5
Revises: 89fbd64a5a1c
Create Date: 2023-08-09 16:29:29.287796+01:00

"""
from typing import TypeVar

import sqlalchemy as sa
import sqlmodel
from alembic import op

# revision identifiers, used by Alembic.
revision = "d7d8008724e5"
down_revision = "89fbd64a5a1c"
branch_labels = None
depends_on = None

TType = TypeVar('TType')


def _sqlite_hack(sqlite: TType, other: TType) -> TType:
    bind = op.get_bind()
    if bind.engine.name == 'sqlite':
        return sqlite
    else:
        return other


def upgrade() -> None:
    bind = op.get_bind()
    if bind.engine.name != 'sqlite':
        # Actually create the database schema.
        return create_new_database_not_sqlite()

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "active_project_collaborator",
        sa.Column("project_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("user_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("user_email", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("project_hash", "user_hash"),
    )
    op.create_table(
        "active_project_import_metadata",
        sa.Column("import_metadata", sa.JSON(), nullable=True),
        sa.Column("project_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("import_metadata_type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.ForeignKeyConstraint(
            ["project_hash"],
            ["active_project.project_hash"],
            name="active_project_hash_import_meta_fk",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("project_hash"),
    )

    # Rename columns - project analytics annotation.
    op.drop_index(
        "active_label_project_hash_metric_label_border_closeness_index",
        table_name="active_project_analytics_annotation",
    )
    op.drop_index(
        "active_label_project_hash_metric_label_confidence_index", table_name="active_project_analytics_annotation"
    )
    op.drop_index(
        _sqlite_hack(
            "active_label_project_hash_metric_label_inconsistent_classification_and_track_index",
            "active_label_project_hash_metric_label_inconsistent_class",
        ), table_name="active_project_analytics_annotation"
    )
    op.drop_index(
        _sqlite_hack(
            "active_label_project_hash_metric_label_missing_or_broken_tracks_index",
            "active_label_project_hash_metric_label_missing_or_bad_track",
        ), table_name="active_project_analytics_annotation"
    )
    with op.batch_alter_table("active_project_analytics_annotation") as bop:
        bop.alter_column(
            "annotation_type", existing_type=sa.SMALLINT(), nullable=False
        )
        bop.alter_column(
            "metric_label_confidence", nullable=True, new_column_name="metric_confidence", existing_type=sa.Float()
        )
        bop.alter_column(
            "metric_label_border_closeness", nullable=True, new_column_name="metric_border_relative",
            existing_type=sa.Float()
        )
        bop.alter_column(
            "metric_label_inconsistent_classification_and_track", nullable=True,
            new_column_name="metric_inconsistent_class",
            existing_type=sa.Float()
        )
        bop.alter_column(
            "metric_label_missing_or_broken_tracks", nullable=True,
            new_column_name="metric_missing_or_broken_track",
            existing_type=sa.Float()
        )
        # Splitting user emails out to side-tables
        bop.drop_column("annotation_email")
        bop.add_column(
            sa.Column("annotation_user", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        )
        bop.create_foreign_key(
            "active_project_label_annotation_user_fk",
            "active_project_collaborator",
            ["project_hash", "annotation_user"],
            ["project_hash", "user_hash"],
            onupdate="CASCADE",
            ondelete="CASCADE",
        )
    op.create_index(
        "active_label_project_hash_metric_border_relative_index",
        "active_project_analytics_annotation",
        ["project_hash", "metric_border_relative"],
        unique=False,
    )
    op.create_index(
        "active_label_project_hash_metric_confidence_index",
        "active_project_analytics_annotation",
        ["project_hash", "metric_confidence"],
        unique=False,
    )
    op.create_index(
        "active_label_project_hash_metric_inconsistent_class_index",
        "active_project_analytics_annotation",
        ["project_hash", "metric_inconsistent_class"],
        unique=False,
    )
    op.create_index(
        "active_label_project_hash_metric_missing_or_broken_track_index",
        "active_project_analytics_annotation",
        ["project_hash", "metric_missing_or_broken_track"],
        unique=False,
    )

    # Migrate project analytics annotation
    op.drop_index(
        "active_project_prediction_objects_confidence_index", table_name="active_project_prediction_analytics"
    )
    op.drop_index(
        "active_project_prediction_objects_feature_confidence_index", table_name="active_project_prediction_analytics"
    )
    with op.batch_alter_table("active_project_prediction_analytics") as bop:
        bop.alter_column(
            "annotation_type", existing_type=sa.SMALLINT(), nullable=False
        )
        bop.alter_column(
            "metric_label_confidence", nullable=True,
            new_column_name="metric_confidence",
            existing_type=sa.Float()
        )
        bop.alter_column(
            "metric_label_border_closeness", nullable=True,
            new_column_name="metric_border_relative",
            existing_type=sa.Float()
        )
        bop.alter_column(
            "metric_label_missing_or_broken_tracks", nullable=True,
            new_column_name="metric_missing_or_broken_track",
            existing_type=sa.Float()
        )
        bop.alter_column(
            "metric_label_inconsistent_classification_and_track", nullable=True,
            new_column_name="metric_inconsistent_class",
            existing_type=sa.Float()
        )
    op.create_index(
        "active_project_prediction_objects_confidence_index",
        "active_project_prediction_analytics",
        ["prediction_hash", "metric_confidence"],
        unique=False,
    )
    op.create_index(
        "active_project_prediction_objects_feature_confidence_index",
        "active_project_prediction_analytics",
        ["prediction_hash", "feature_hash", "metric_confidence"],
        unique=False,
    )

    # False negatives - change strategy to join against annotation_analytics table for metrics
    with op.batch_alter_table("active_project_prediction_analytics_false_negatives") as bop:
        bop.drop_column("metric_contrast")
        bop.drop_column("metric_height")
        bop.drop_column("metric_label_shape_outlier")
        bop.drop_column("metric_annotation_quality")
        bop.drop_column("annotation_type")
        bop.drop_column("metric_aspect_ratio")
        bop.drop_column("metric_random")
        bop.drop_column("metric_sharpness")
        bop.drop_column("metric_custom3")
        bop.drop_column("metric_label_poly_similarity")
        bop.drop_column("annotation_email")
        bop.drop_column("metric_width")
        bop.drop_column("metric_custom2")
        bop.drop_column("metric_max_iou")
        bop.drop_column("metric_red")
        bop.drop_column("metric_area")
        bop.drop_column("metric_label_confidence")
        bop.drop_column("metric_area_relative")
        bop.drop_column("metric_green")
        bop.drop_column("metric_custom0")
        bop.drop_column("metric_brightness")
        bop.drop_column("metric_custom1")
        bop.drop_column("metric_label_border_closeness")
        bop.drop_column("metric_label_missing_or_broken_tracks")
        bop.drop_column("metric_blue")
        bop.drop_column("annotation_manual")
        bop.drop_column(
            "metric_label_inconsistent_classification_and_track"
        )

    # Fix foreign key bugs introduced in sqlite tables
    bind = op.get_bind()
    if bind.engine.name == 'sqlite':
        with op.batch_alter_table("active_project_analytics_annotation_extra") as bop:
            bop.drop_constraint(
                "active_data_project_annotation_analytics_extra_fk",
                type_="foreignkey",
            )
            bop.create_foreign_key(
                "active_data_project_annotation_analytics_extra_fk",
                "active_project_analytics_annotation",
                ["project_hash", "du_hash", "frame", "object_hash"],
                ["project_hash", "du_hash", "frame", "object_hash"],
                onupdate="CASCADE",
                ondelete="CASCADE",
            )
        with op.batch_alter_table("active_project_prediction_analytics_extra") as bop:
            bop.drop_constraint(
                "active_project_prediction_analytics_extra_fk",
                type_="foreignkey"
            )
            bop.create_foreign_key(
                "active_project_prediction_analytics_extra_fk",
                "active_project_prediction_analytics",
                ["prediction_hash", "du_hash", "frame", "object_hash"],
                ["prediction_hash", "du_hash", "frame", "object_hash"],
                onupdate="CASCADE",
                ondelete="CASCADE",
            )
    # Drop type not used.
    bind = op.get_bind()
    if bind.engine.name != 'sqlite':
        op.execute("DROP TYPE annotationtype")
        for table in [
            "active_project_analytics_annotation_reduced",
            "active_project_analytics_data_reduced",
            "active_project_prediction_analytics_reduced"
        ]:
            op.alter_column(
                table,
                "x",
                existing_type=sa.Float(),
                nullable=False,
            )
            op.alter_column(
                table,
                "y",
                existing_type=sa.Float(),
                nullable=False,
            )
            op.alter_column(
                table,
                "x",
                existing_type=sa.Float(),
                type_=sa.REAL(),
            )
            op.alter_column(
                table,
                "y",
                existing_type=sa.Float(),
                type_=sa.REAL(),
            )

    # ### end Alembic commands ###


def create_new_database_not_sqlite() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "active_project",
        sa.Column("project_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("project_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("project_description", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("project_remote_ssh_key_path", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("project_ontology", sa.JSON(), nullable=True),
        sa.Column("custom_metrics", sa.JSON(), nullable=True),
        sa.PrimaryKeyConstraint("project_hash"),
    )
    op.create_table(
        "active_project_collaborator",
        sa.Column("project_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("user_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("user_email", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("project_hash", "user_hash"),
    )
    op.create_table(
        "active_project_data",
        sa.Column("project_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("data_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("label_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("dataset_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("num_frames", sa.Integer(), nullable=False),
        sa.Column("frames_per_second", sa.Float(), nullable=True),
        sa.Column("dataset_title", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("data_title", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("data_type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("label_row_json", sa.JSON(), nullable=True),
        sa.ForeignKeyConstraint(
            ["project_hash"],
            ["active_project.project_hash"],
            name="active_project_data_project_fk",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("project_hash", "data_hash"),
        sa.UniqueConstraint("label_hash"),
    )
    op.create_table(
        "active_project_embedding_reduction",
        sa.Column("reduction_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("project_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("reduction_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("reduction_description", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("reduction_type", sa.Enum("UMAP", name="embeddingreductiontype"), nullable=False),
        sa.Column("reduction_bytes", sa.LargeBinary(), nullable=False),
        sa.ForeignKeyConstraint(
            ["project_hash"],
            ["active_project.project_hash"],
            name="active_project_embedding_reduction_project_fk",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("reduction_hash"),
    )
    op.create_table(
        "active_project_import_metadata",
        sa.Column("project_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("import_metadata_type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("import_metadata", sa.JSON(), nullable=True),
        sa.ForeignKeyConstraint(
            ["project_hash"],
            ["active_project.project_hash"],
            name="active_project_hash_import_meta_fk",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("project_hash"),
    )
    op.create_table(
        "active_project_prediction",
        sa.Column("prediction_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("project_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.ForeignKeyConstraint(
            ["project_hash"],
            ["active_project.project_hash"],
            name="active_project_prediction_project_hash_fk",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("prediction_hash"),
    )
    op.create_table(
        "active_project_tags",
        sa.Column("tag_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("project_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=256), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.ForeignKeyConstraint(
            ["project_hash"],
            ["active_project.project_hash"],
            name="active_project_tags_project_fk",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("tag_hash"),
    )
    op.create_index(op.f("ix_active_project_tags_project_hash"), "active_project_tags", ["project_hash"], unique=False)
    op.create_table(
        "active_project_data_units",
        sa.Column("project_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("du_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("frame", sa.Integer(), nullable=False),
        sa.Column("data_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("width", sa.Integer(), nullable=False),
        sa.Column("height", sa.Integer(), nullable=False),
        sa.Column("data_uri", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("data_uri_is_video", sa.Boolean(), nullable=False),
        sa.Column("objects", sa.JSON(), nullable=True),
        sa.Column("classifications", sa.JSON(), nullable=True),
        sa.ForeignKeyConstraint(
            ["project_hash", "data_hash"],
            ["active_project_data.project_hash", "active_project_data.data_hash"],
            name="active_data_unit_data_fk",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["project_hash"],
            ["active_project.project_hash"],
        ),
        sa.PrimaryKeyConstraint("project_hash", "du_hash", "frame"),
    )
    op.create_index(
        "active_project_data_units_unique_du_hash_frame",
        "active_project_data_units",
        ["project_hash", "du_hash", "frame"],
        unique=True,
    )
    op.create_table(
        "active_project_prediction_analytics",
        sa.Column("prediction_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("du_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("frame", sa.Integer(), nullable=False),
        sa.Column("object_hash", sa.NCHAR(length=8), nullable=False),
        sa.Column("feature_hash", sa.NCHAR(length=8), nullable=False),
        sa.Column("project_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("annotation_type", sa.SMALLINT(), nullable=False),
        sa.Column("match_object_hash", sa.NCHAR(length=8), nullable=True),
        sa.Column("match_feature_hash", sa.NCHAR(length=8), nullable=True),
        sa.Column("match_duplicate_iou", sa.REAL(), nullable=False),
        sa.Column("iou", sa.REAL(), nullable=False),
        sa.Column("metric_width", sa.INTEGER(), nullable=True),
        sa.Column("metric_height", sa.INTEGER(), nullable=True),
        sa.Column("metric_area", sa.INTEGER(), nullable=True),
        sa.Column("metric_area_relative", sa.REAL(), nullable=True),
        sa.Column("metric_aspect_ratio", sa.REAL(), nullable=True),
        sa.Column("metric_brightness", sa.REAL(), nullable=True),
        sa.Column("metric_contrast", sa.REAL(), nullable=True),
        sa.Column("metric_sharpness", sa.REAL(), nullable=True),
        sa.Column("metric_red", sa.REAL(), nullable=True),
        sa.Column("metric_green", sa.REAL(), nullable=True),
        sa.Column("metric_blue", sa.REAL(), nullable=True),
        sa.Column("metric_random", sa.REAL(), nullable=True),
        sa.Column("metric_annotation_quality", sa.REAL(), nullable=True),
        sa.Column("metric_max_iou", sa.REAL(), nullable=True),
        sa.Column("metric_border_relative", sa.REAL(), nullable=True),
        sa.Column("metric_label_poly_similarity", sa.REAL(), nullable=True),
        sa.Column("metric_missing_or_broken_track", sa.REAL(), nullable=True),
        sa.Column("metric_inconsistent_class", sa.REAL(), nullable=True),
        sa.Column("metric_label_shape_outlier", sa.REAL(), nullable=True),
        sa.Column("metric_confidence", sa.REAL(), nullable=True),
        sa.Column("metric_custom0", sa.REAL(), nullable=True),
        sa.Column("metric_custom1", sa.REAL(), nullable=True),
        sa.Column("metric_custom2", sa.REAL(), nullable=True),
        sa.Column("metric_custom3", sa.REAL(), nullable=True),
        sa.CheckConstraint("iou BETWEEN 0.0 AND 1.0", name="active_project_prediction_iou"),
        sa.CheckConstraint(
            "match_duplicate_iou BETWEEN 0.0 AND 1.0 OR match_duplicate_iou = -1.0::real",
            name="active_project_prediction_match_duplicate_iou",
        ),
        sa.ForeignKeyConstraint(
            ["prediction_hash"],
            ["active_project_prediction.prediction_hash"],
            name="active_project_prediction_objects_prediction_fk",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("object_hash", "prediction_hash", "du_hash", "frame"),
    )
    op.create_index(
        "active_project_prediction_objects_confidence_index",
        "active_project_prediction_analytics",
        ["prediction_hash", "metric_confidence"],
        unique=False,
    )
    op.create_index(
        "active_project_prediction_objects_feature_confidence_index",
        "active_project_prediction_analytics",
        ["prediction_hash", "feature_hash", "metric_confidence"],
        unique=False,
    )
    op.create_table(
        "active_project_prediction_analytics_false_negatives",
        sa.Column("prediction_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("du_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("frame", sa.Integer(), nullable=False),
        sa.Column("object_hash", sa.NCHAR(length=8), nullable=False),
        sa.Column("iou_threshold", sa.REAL(), nullable=False),
        sa.Column("feature_hash", sa.NCHAR(length=8), nullable=False),
        sa.CheckConstraint(
            "iou_threshold BETWEEN 0.0 AND 1.0 OR iou_threshold = -1.0",
            name="active_project_prediction_unmatched_iou_threshold",
        ),
        sa.ForeignKeyConstraint(
            ["prediction_hash"],
            ["active_project_prediction.prediction_hash"],
            name="active_project_prediction_unmatched_prediction_fk",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("object_hash", "feature_hash", "prediction_hash", "du_hash", "frame"),
    )
    op.create_index(
        "active_project_prediction_unmatched_feature_hash_index",
        "active_project_prediction_analytics_false_negatives",
        ["prediction_hash", "feature_hash"],
        unique=False,
    )
    op.create_table(
        "active_project_analytics_annotation",
        sa.Column("project_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("du_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("frame", sa.Integer(), nullable=False),
        sa.Column("object_hash", sa.NCHAR(length=8), nullable=False),
        sa.Column("feature_hash", sa.NCHAR(length=8), nullable=False),
        sa.Column("annotation_type", sa.SMALLINT(), nullable=False),
        sa.Column("annotation_user", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("annotation_manual", sa.Boolean(), nullable=False),
        sa.Column("metric_width", sa.INTEGER(), nullable=True),
        sa.Column("metric_height", sa.INTEGER(), nullable=True),
        sa.Column("metric_area", sa.INTEGER(), nullable=True),
        sa.Column("metric_area_relative", sa.REAL(), nullable=True),
        sa.Column("metric_aspect_ratio", sa.REAL(), nullable=True),
        sa.Column("metric_brightness", sa.REAL(), nullable=True),
        sa.Column("metric_contrast", sa.REAL(), nullable=True),
        sa.Column("metric_sharpness", sa.REAL(), nullable=True),
        sa.Column("metric_red", sa.REAL(), nullable=True),
        sa.Column("metric_green", sa.REAL(), nullable=True),
        sa.Column("metric_blue", sa.REAL(), nullable=True),
        sa.Column("metric_random", sa.REAL(), nullable=True),
        sa.Column("metric_annotation_quality", sa.REAL(), nullable=True),
        sa.Column("metric_max_iou", sa.REAL(), nullable=True),
        sa.Column("metric_border_relative", sa.REAL(), nullable=True),
        sa.Column("metric_label_poly_similarity", sa.REAL(), nullable=True),
        sa.Column("metric_missing_or_broken_track", sa.REAL(), nullable=True),
        sa.Column("metric_inconsistent_class", sa.REAL(), nullable=True),
        sa.Column("metric_label_shape_outlier", sa.REAL(), nullable=True),
        sa.Column("metric_confidence", sa.REAL(), nullable=True),
        sa.Column("metric_custom0", sa.REAL(), nullable=True),
        sa.Column("metric_custom1", sa.REAL(), nullable=True),
        sa.Column("metric_custom2", sa.REAL(), nullable=True),
        sa.Column("metric_custom3", sa.REAL(), nullable=True),
        sa.CheckConstraint(
            "metric_annotation_quality BETWEEN 0.0 AND 1.0", name="active_annotate_metric_annotation_quality"
        ),
        sa.CheckConstraint("metric_area >= 0", name="active_annotate_metric_area"),
        sa.CheckConstraint("metric_area_relative BETWEEN 0.0 AND 1.0", name="active_annotate_metric_area_relative"),
        sa.CheckConstraint("metric_aspect_ratio >= 0.0", name="active_annotate_metric_aspect_ratio"),
        sa.CheckConstraint("metric_blue BETWEEN 0.0 AND 1.0", name="active_annotate_metric_blue"),
        sa.CheckConstraint(
            "metric_border_relative BETWEEN 0.0 AND 1.0", name="active_annotate_metric_border_relative"
        ),
        sa.CheckConstraint("metric_brightness BETWEEN 0.0 AND 1.0", name="active_annotate_metric_brightness"),
        sa.CheckConstraint("metric_confidence BETWEEN 0.0 AND 1.0", name="active_annotate_metric_confidence"),
        sa.CheckConstraint("metric_contrast BETWEEN 0.0 AND 1.0", name="active_annotate_metric_contrast"),
        sa.CheckConstraint("metric_green BETWEEN 0.0 AND 1.0", name="active_annotate_metric_green"),
        sa.CheckConstraint("metric_height >= 0", name="active_annotate_metric_height"),
        sa.CheckConstraint(
            "metric_inconsistent_class BETWEEN 0.0 AND 1.0", name="active_annotate_metric_inconsistent_class"
        ),
        sa.CheckConstraint(
            "metric_label_poly_similarity BETWEEN 0.0 AND 1.0", name="active_annotate_metric_label_poly_similarity"
        ),
        sa.CheckConstraint(
            "metric_label_shape_outlier BETWEEN 0.0 AND 1.0", name="active_annotate_metric_label_shape_outlier"
        ),
        sa.CheckConstraint("metric_max_iou BETWEEN 0.0 AND 1.0", name="active_annotate_metric_max_iou"),
        sa.CheckConstraint(
            "metric_missing_or_broken_track BETWEEN 0.0 AND 1.0",
            name="active_annotate_metric_missing_or_broken_track",
        ),
        sa.CheckConstraint("metric_random BETWEEN 0.0 AND 1.0", name="active_annotate_metric_random"),
        sa.CheckConstraint("metric_red BETWEEN 0.0 AND 1.0", name="active_annotate_metric_red"),
        sa.CheckConstraint("metric_sharpness BETWEEN 0.0 AND 1.0", name="active_annotate_metric_sharpness"),
        sa.CheckConstraint("metric_width >= 0", name="active_annotate_metric_width"),
        sa.ForeignKeyConstraint(
            ["project_hash", "annotation_user"],
            ["active_project_collaborator.project_hash", "active_project_collaborator.user_hash"],
            name="active_project_label_annotation_user_fk",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["project_hash", "du_hash", "frame"],
            [
                "active_project_data_units.project_hash",
                "active_project_data_units.du_hash",
                "active_project_data_units.frame",
            ],
            name="active_annotate_project_data_fk",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("object_hash", "project_hash", "du_hash", "frame"),
    )
    op.create_index(
        "active_annotate_ph_metric_annotation_quality_index",
        "active_project_analytics_annotation",
        ["project_hash", "metric_annotation_quality"],
        unique=False,
    )
    op.create_index(
        "active_annotate_ph_metric_area_index",
        "active_project_analytics_annotation",
        ["project_hash", "metric_area"],
        unique=False,
    )
    op.create_index(
        "active_annotate_ph_metric_area_relative_index",
        "active_project_analytics_annotation",
        ["project_hash", "metric_area_relative"],
        unique=False,
    )
    op.create_index(
        "active_annotate_ph_metric_aspect_ratio_index",
        "active_project_analytics_annotation",
        ["project_hash", "metric_aspect_ratio"],
        unique=False,
    )
    op.create_index(
        "active_annotate_ph_metric_blue_index",
        "active_project_analytics_annotation",
        ["project_hash", "metric_blue"],
        unique=False,
    )
    op.create_index(
        "active_annotate_ph_metric_border_relative_index",
        "active_project_analytics_annotation",
        ["project_hash", "metric_border_relative"],
        unique=False,
    )
    op.create_index(
        "active_annotate_ph_metric_brightness_index",
        "active_project_analytics_annotation",
        ["project_hash", "metric_brightness"],
        unique=False,
    )
    op.create_index(
        "active_annotate_ph_metric_confidence_index",
        "active_project_analytics_annotation",
        ["project_hash", "metric_confidence"],
        unique=False,
    )
    op.create_index(
        "active_annotate_ph_metric_contrast_index",
        "active_project_analytics_annotation",
        ["project_hash", "metric_contrast"],
        unique=False,
    )
    op.create_index(
        "active_annotate_ph_metric_green_index",
        "active_project_analytics_annotation",
        ["project_hash", "metric_green"],
        unique=False,
    )
    op.create_index(
        "active_annotate_ph_metric_height_index",
        "active_project_analytics_annotation",
        ["project_hash", "metric_height"],
        unique=False,
    )
    op.create_index(
        "active_annotate_ph_metric_inconsistent_class_index",
        "active_project_analytics_annotation",
        ["project_hash", "metric_inconsistent_class"],
        unique=False,
    )
    op.create_index(
        "active_annotate_ph_metric_label_poly_similarity_index",
        "active_project_analytics_annotation",
        ["project_hash", "metric_label_poly_similarity"],
        unique=False,
    )
    op.create_index(
        "active_annotate_ph_metric_label_shape_outlier_index",
        "active_project_analytics_annotation",
        ["project_hash", "metric_label_shape_outlier"],
        unique=False,
    )
    op.create_index(
        "active_annotate_ph_metric_max_iou_index",
        "active_project_analytics_annotation",
        ["project_hash", "metric_max_iou"],
        unique=False,
    )
    op.create_index(
        "active_annotate_ph_metric_missing_or_broken_track_index",
        "active_project_analytics_annotation",
        ["project_hash", "metric_missing_or_broken_track"],
        unique=False,
    )
    op.create_index(
        "active_annotate_ph_metric_random_index",
        "active_project_analytics_annotation",
        ["project_hash", "metric_random"],
        unique=False,
    )
    op.create_index(
        "active_annotate_ph_metric_red_index",
        "active_project_analytics_annotation",
        ["project_hash", "metric_red"],
        unique=False,
    )
    op.create_index(
        "active_annotate_ph_metric_sharpness_index",
        "active_project_analytics_annotation",
        ["project_hash", "metric_sharpness"],
        unique=False,
    )
    op.create_index(
        "active_annotate_ph_metric_width_index",
        "active_project_analytics_annotation",
        ["project_hash", "metric_width"],
        unique=False,
    )
    op.create_table(
        "active_project_analytics_data",
        sa.Column("project_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("du_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("frame", sa.Integer(), nullable=False),
        sa.Column("metric_width", sa.INTEGER(), nullable=True),
        sa.Column("metric_height", sa.INTEGER(), nullable=True),
        sa.Column("metric_area", sa.INTEGER(), nullable=True),
        sa.Column("metric_aspect_ratio", sa.REAL(), nullable=True),
        sa.Column("metric_brightness", sa.REAL(), nullable=True),
        sa.Column("metric_contrast", sa.REAL(), nullable=True),
        sa.Column("metric_sharpness", sa.REAL(), nullable=True),
        sa.Column("metric_red", sa.REAL(), nullable=True),
        sa.Column("metric_green", sa.REAL(), nullable=True),
        sa.Column("metric_blue", sa.REAL(), nullable=True),
        sa.Column("metric_random", sa.REAL(), nullable=True),
        sa.Column("metric_object_count", sa.INTEGER(), nullable=True),
        sa.Column("metric_object_density", sa.REAL(), nullable=True),
        sa.Column("metric_image_uniqueness", sa.REAL(), nullable=True),
        sa.Column("metric_image_difficulty", sa.Float(), nullable=True),
        sa.Column("metric_custom0", sa.REAL(), nullable=True),
        sa.Column("metric_custom1", sa.REAL(), nullable=True),
        sa.Column("metric_custom2", sa.REAL(), nullable=True),
        sa.Column("metric_custom3", sa.REAL(), nullable=True),
        sa.CheckConstraint("metric_area >= 0", name="active_data_metric_area"),
        sa.CheckConstraint("metric_aspect_ratio >= 0.0", name="active_data_metric_aspect_ratio"),
        sa.CheckConstraint("metric_blue BETWEEN 0.0 AND 1.0", name="active_data_metric_blue"),
        sa.CheckConstraint("metric_brightness BETWEEN 0.0 AND 1.0", name="active_data_metric_brightness"),
        sa.CheckConstraint("metric_contrast BETWEEN 0.0 AND 1.0", name="active_data_metric_contrast"),
        sa.CheckConstraint("metric_green BETWEEN 0.0 AND 1.0", name="active_data_metric_green"),
        sa.CheckConstraint("metric_height >= 0", name="active_data_metric_height"),
        sa.CheckConstraint(
            "metric_image_uniqueness BETWEEN 0.0 AND 1.0", name="active_data_metric_image_uniqueness"
        ),
        sa.CheckConstraint("metric_object_count >= 0", name="active_data_metric_object_count"),
        sa.CheckConstraint("metric_object_density BETWEEN 0.0 AND 1.0", name="active_data_metric_object_density"),
        sa.CheckConstraint("metric_random BETWEEN 0.0 AND 1.0", name="active_data_metric_random"),
        sa.CheckConstraint("metric_red BETWEEN 0.0 AND 1.0", name="active_data_metric_red"),
        sa.CheckConstraint("metric_sharpness BETWEEN 0.0 AND 1.0", name="active_data_metric_sharpness"),
        sa.CheckConstraint("metric_width >= 0", name="active_data_metric_width"),
        sa.ForeignKeyConstraint(
            ["project_hash", "du_hash", "frame"],
            [
                "active_project_data_units.project_hash",
                "active_project_data_units.du_hash",
                "active_project_data_units.frame",
            ],
            name="active_data_project_analytics_data_fk",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("project_hash", "du_hash", "frame"),
    )
    op.create_index(
        "active_data_ph_metric_area_index",
        "active_project_analytics_data",
        ["project_hash", "metric_area"],
        unique=False,
    )
    op.create_index(
        "active_data_ph_metric_aspect_ratio_index",
        "active_project_analytics_data",
        ["project_hash", "metric_aspect_ratio"],
        unique=False,
    )
    op.create_index(
        "active_data_ph_metric_blue_index",
        "active_project_analytics_data",
        ["project_hash", "metric_blue"],
        unique=False,
    )
    op.create_index(
        "active_data_ph_metric_brightness_index",
        "active_project_analytics_data",
        ["project_hash", "metric_brightness"],
        unique=False,
    )
    op.create_index(
        "active_data_ph_metric_contrast_index",
        "active_project_analytics_data",
        ["project_hash", "metric_contrast"],
        unique=False,
    )
    op.create_index(
        "active_data_ph_metric_green_index",
        "active_project_analytics_data",
        ["project_hash", "metric_green"],
        unique=False,
    )
    op.create_index(
        "active_data_ph_metric_height_index",
        "active_project_analytics_data",
        ["project_hash", "metric_height"],
        unique=False,
    )
    op.create_index(
        "active_data_ph_metric_image_difficulty_index",
        "active_project_analytics_data",
        ["project_hash", "metric_image_difficulty"],
        unique=False,
    )
    op.create_index(
        "active_data_ph_metric_image_uniqueness_index",
        "active_project_analytics_data",
        ["project_hash", "metric_image_uniqueness"],
        unique=False,
    )
    op.create_index(
        "active_data_ph_metric_object_count_index",
        "active_project_analytics_data",
        ["project_hash", "metric_object_count"],
        unique=False,
    )
    op.create_index(
        "active_data_ph_metric_object_density_index",
        "active_project_analytics_data",
        ["project_hash", "metric_object_density"],
        unique=False,
    )
    op.create_index(
        "active_data_ph_metric_random_index",
        "active_project_analytics_data",
        ["project_hash", "metric_random"],
        unique=False,
    )
    op.create_index(
        "active_data_ph_metric_red_index",
        "active_project_analytics_data",
        ["project_hash", "metric_red"],
        unique=False,
    )
    op.create_index(
        "active_data_ph_metric_sharpness_index",
        "active_project_analytics_data",
        ["project_hash", "metric_sharpness"],
        unique=False,
    )
    op.create_index(
        "active_data_ph_metric_width_index",
        "active_project_analytics_data",
        ["project_hash", "metric_width"],
        unique=False,
    )
    op.create_table(
        "active_project_prediction_analytics_extra",
        sa.Column("prediction_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("du_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("frame", sa.Integer(), nullable=False),
        sa.Column("object_hash", sa.NCHAR(length=8), nullable=False),
        sa.Column("annotation_bytes", sa.LargeBinary(), nullable=False),
        sa.Column("embedding_clip", sa.LargeBinary(), nullable=True),
        sa.ForeignKeyConstraint(
            ["prediction_hash", "du_hash", "frame", "object_hash"],
            [
                "active_project_prediction_analytics.prediction_hash",
                "active_project_prediction_analytics.du_hash",
                "active_project_prediction_analytics.frame",
                "active_project_prediction_analytics.object_hash",
            ],
            name="active_project_prediction_analytics_extra_fk",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("object_hash", "prediction_hash", "du_hash", "frame"),
    )
    op.create_table(
        "active_project_prediction_analytics_reduced",
        sa.Column("reduction_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("prediction_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("du_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("frame", sa.Integer(), nullable=False),
        sa.Column("object_hash", sa.NCHAR(length=8), nullable=False),
        sa.Column("x", sa.REAL(), nullable=False),
        sa.Column("y", sa.REAL(), nullable=False),
        sa.ForeignKeyConstraint(
            ["prediction_hash", "du_hash", "frame", "object_hash"],
            [
                "active_project_prediction_analytics.prediction_hash",
                "active_project_prediction_analytics.du_hash",
                "active_project_prediction_analytics.frame",
                "active_project_prediction_analytics.object_hash",
            ],
            name="active_data_project_prediction_analytics_reduced_fk",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["reduction_hash"],
            ["active_project_embedding_reduction.reduction_hash"],
            name="active_data_project_prediction_analytics_reduced_reduction_fk",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("object_hash", "reduction_hash", "prediction_hash", "du_hash", "frame"),
    )
    op.create_index(
        "active_project_analytics_prediction_reduced_x",
        "active_project_prediction_analytics_reduced",
        ["reduction_hash", "prediction_hash", "x", "y"],
        unique=False,
    )
    op.create_index(
        "active_project_analytics_prediction_reduced_y",
        "active_project_prediction_analytics_reduced",
        ["reduction_hash", "prediction_hash", "y", "x"],
        unique=False,
    )
    op.create_table(
        "active_project_analytics_annotation_extra",
        sa.Column("project_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("du_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("frame", sa.Integer(), nullable=False),
        sa.Column("object_hash", sa.NCHAR(length=8), nullable=False),
        sa.Column("embedding_clip", sa.LargeBinary(), nullable=True),
        sa.Column("embedding_hu", sa.LargeBinary(), nullable=True),
        sa.Column("derived_clip_nearest", sa.JSON(), nullable=True),
        sa.Column("metric_metadata", sa.JSON(), nullable=True),
        sa.ForeignKeyConstraint(
            ["project_hash", "du_hash", "frame", "object_hash"],
            [
                "active_project_analytics_annotation.project_hash",
                "active_project_analytics_annotation.du_hash",
                "active_project_analytics_annotation.frame",
                "active_project_analytics_annotation.object_hash",
            ],
            name="active_data_project_annotation_analytics_extra_fk",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("object_hash", "project_hash", "du_hash", "frame"),
    )
    op.create_table(
        "active_project_analytics_annotation_reduced",
        sa.Column("reduction_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("project_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("du_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("frame", sa.Integer(), nullable=False),
        sa.Column("object_hash", sa.NCHAR(length=8), nullable=False),
        sa.Column("x", sa.REAL(), nullable=False),
        sa.Column("y", sa.REAL(), nullable=False),
        sa.ForeignKeyConstraint(
            ["project_hash", "du_hash", "frame", "object_hash"],
            [
                "active_project_analytics_annotation.project_hash",
                "active_project_analytics_annotation.du_hash",
                "active_project_analytics_annotation.frame",
                "active_project_analytics_annotation.object_hash",
            ],
            name="active_data_project_annotation_analytics_reduced_fk",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["reduction_hash"],
            ["active_project_embedding_reduction.reduction_hash"],
            name="active_data_project_annotation_analytics_reduced_reduction_fk",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("object_hash", "reduction_hash", "project_hash", "du_hash", "frame"),
    )
    op.create_index(
        "active_project_analytics_annotation_reduced_x",
        "active_project_analytics_annotation_reduced",
        ["reduction_hash", "project_hash", "x", "y"],
        unique=False,
    )
    op.create_index(
        "active_project_analytics_annotation_reduced_y",
        "active_project_analytics_annotation_reduced",
        ["reduction_hash", "project_hash", "y", "x"],
        unique=False,
    )
    op.create_table(
        "active_project_analytics_data_extra",
        sa.Column("project_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("du_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("frame", sa.Integer(), nullable=False),
        sa.Column("embedding_clip", sa.LargeBinary(), nullable=True),
        sa.Column("derived_clip_nearest", sa.JSON(), nullable=True),
        sa.Column("metric_metadata", sa.JSON(), nullable=True),
        sa.ForeignKeyConstraint(
            ["project_hash", "du_hash", "frame"],
            [
                "active_project_analytics_data.project_hash",
                "active_project_analytics_data.du_hash",
                "active_project_analytics_data.frame",
            ],
            name="active_data_project_data_analytics_extra_fk",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("project_hash", "du_hash", "frame"),
    )
    op.create_table(
        "active_project_analytics_data_reduced",
        sa.Column("reduction_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("project_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("du_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("frame", sa.Integer(), nullable=False),
        sa.Column("x", sa.REAL(), nullable=False),
        sa.Column("y", sa.REAL(), nullable=False),
        sa.ForeignKeyConstraint(
            ["project_hash", "du_hash", "frame"],
            [
                "active_project_analytics_data.project_hash",
                "active_project_analytics_data.du_hash",
                "active_project_analytics_data.frame",
            ],
            name="active_data_project_data_analytics_reduced_fk",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["reduction_hash"],
            ["active_project_embedding_reduction.reduction_hash"],
            name="active_data_project_data_analytics_reduced_reduction_fk",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("reduction_hash", "project_hash", "du_hash", "frame"),
    )
    op.create_index(
        "active_project_analytics_data_reduced_x",
        "active_project_analytics_data_reduced",
        ["reduction_hash", "project_hash", "x", "y"],
        unique=False,
    )
    op.create_index(
        "active_project_analytics_data_reduced_y",
        "active_project_analytics_data_reduced",
        ["reduction_hash", "project_hash", "y", "x"],
        unique=False,
    )
    op.create_table(
        "active_project_tagged_annotation",
        sa.Column("project_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("du_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("frame", sa.Integer(), nullable=False),
        sa.Column("object_hash", sa.NCHAR(length=8), nullable=False),
        sa.Column("tag_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["project_hash", "du_hash", "frame", "object_hash"],
            [
                "active_project_analytics_annotation.project_hash",
                "active_project_analytics_annotation.du_hash",
                "active_project_analytics_annotation.frame",
                "active_project_analytics_annotation.object_hash",
            ],
            name="active_project_tagged_objects_analysis_fk",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["tag_hash"],
            ["active_project_tags.tag_hash"],
            name="active_project_tagged_objects_tag_fk",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("object_hash", "project_hash", "du_hash", "frame", "tag_hash"),
    )
    op.create_index(
        op.f("ix_active_project_tagged_annotation_tag_hash"),
        "active_project_tagged_annotation",
        ["tag_hash"],
        unique=False,
    )
    op.create_table(
        "active_project_tagged_data",
        sa.Column("project_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("du_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("frame", sa.Integer(), nullable=False),
        sa.Column("tag_hash", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["project_hash", "du_hash", "frame"],
            [
                "active_project_analytics_data.project_hash",
                "active_project_analytics_data.du_hash",
                "active_project_analytics_data.frame",
            ],
            name="active_project_tagged_data_units_analysis_fk",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["tag_hash"],
            ["active_project_tags.tag_hash"],
            name="active_project_tagged_data_units_tag_fk",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("project_hash", "du_hash", "frame", "tag_hash"),
    )
    op.create_index(
        op.f("ix_active_project_tagged_data_tag_hash"), "active_project_tagged_data", ["tag_hash"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    raise RuntimeError(
        f"Downgrading from this version of the database is not supported: ",
        f"Database version has been normalised to stable between all different users"
    )
